{"ast":null,"code":"var _jsxFileName = \"/Users/cadany/WebstormProjects/monaco/src/CodeEditor.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport * as monaco from 'monaco-editor';\nimport { registerAutoCompletionLanguage } from \"./proxy\";\nimport { editor } from \"monaco-editor\";\nvar IStandaloneEditorConstructionOptions = editor.IStandaloneEditorConstructionOptions;\nimport { Button } from \"antd\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar ITextModel = editor.ITextModel;\nvar IEditorViewState = editor.IEditorViewState;\nvar ICodeEditorViewState = editor.ICodeEditorViewState; // window.MonacoEnvironment = {\n//     getWorker: function (_moduleId: any, label: string) {\n//         // console.log(metadata.languages);\n//         switch (label) {\n//             case 'editorWorkerService':\n//                 return new Worker(new URL('monaco-editor/esm/vs/editor/editor.worker', import.meta.url));\n//             case 'css':\n//             case 'less':\n//             case 'scss':\n//                 return new Worker(new URL('monaco-editor/esm/vs/language/css/css.worker', import.meta.url));\n//             case 'handlebars':\n//             case 'html':\n//             case 'razor':\n//                 return new Worker(\n//                     new URL('monaco-editor/esm/vs/language/html/html.worker', import.meta.url),\n//                 );\n//             case 'json':\n//                 return new Worker(\n//                     new URL('monaco-editor/esm/vs/language/json/json.worker', import.meta.url),\n//                 );\n//             case 'javascript':\n//             case 'typescript':\n//                 return new Worker(\n//                     new URL('monaco-editor/esm/vs/language/typescript/ts.worker', import.meta.url),\n//                 );\n//             default:\n//                 throw new Error(`Unknown label ${label}`);\n//         }\n//     }\n// };\nexport const CodeEditor = (props, context) => {\n  _s();\n  const container = useRef(null);\n  let editor;\n  let autoCompletion;\n  let currentModel;\n  //自定义提示\n  let customAutoCompletion = [{\n    label: \"item11\",\n    insertText: \"item text\",\n    kind: \"6\",\n    detail: \"TABLE.COLLUMN\"\n  }];\n  useEffect(() => {\n    if (container.current) {\n      //didMount/didUpdateMount\n      editor = monaco.editor.create(container.current, {\n        ...props\n      });\n      editor.onDidChangeCursorPosition(pos => {\n        currentModel.cursorPosition = pos.position;\n      });\n      return () => {\n        //didUnmount\n        if (autoCompletion) autoCompletion.dispose(); //防止自动提示重复\n        editor.dispose();\n      };\n    }\n  }, []);\n  let sqlstate = {\n    model: monaco.editor.createModel(\"select * from table\", \"mysql\"),\n    viewstate: null\n  };\n  let redisstate = {\n    model: monaco.editor.createModel(\"INFO \", \"redis\"),\n    viewstate: null\n  };\n  function changeModel(type) {\n    if (autoCompletion) autoCompletion.dispose();\n    currentModel.viewstate = editor.saveViewState();\n    switch (type) {\n      case 1:\n        currentModel = sqlstate;\n        editor.setModel(currentModel.model);\n        autoCompletion = registerAutoCompletionLanguage(\"mysql\", customAutoCompletion);\n        editor.focus();\n        break;\n      default:\n        currentModel = redisstate;\n        editor.setModel(currentModel.model);\n        autoCompletion = registerAutoCompletionLanguage(\"redis\", customAutoCompletion);\n        editor.focus();\n    }\n    if (currentModel.viewstate) editor.restoreViewState(currentModel.viewstate);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: \"calc(100%)\",\n      width: \"calc(100%)\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => changeModel(1),\n      children: \"model sql\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => changeModel(0),\n      children: \"model redis\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Editor\",\n      ref: container,\n      style: {\n        height: \"calc(100%)\",\n        width: \"calc(100%)\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 12\n  }, this);\n};\n_s(CodeEditor, \"gP936EAkbq44zYYGRnj90r2fLhg=\");\n_c = CodeEditor;\nvar _c;\n$RefreshReg$(_c, \"CodeEditor\");","map":{"version":3,"names":["React","useRef","useEffect","monaco","registerAutoCompletionLanguage","editor","IStandaloneEditorConstructionOptions","Button","jsxDEV","_jsxDEV","ITextModel","IEditorViewState","ICodeEditorViewState","CodeEditor","props","context","_s","container","autoCompletion","currentModel","customAutoCompletion","label","insertText","kind","detail","current","create","onDidChangeCursorPosition","pos","cursorPosition","position","dispose","sqlstate","model","createModel","viewstate","redisstate","changeModel","type","saveViewState","setModel","focus","restoreViewState","style","height","width","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","className","ref","_c","$RefreshReg$"],"sources":["/Users/cadany/WebstormProjects/monaco/src/CodeEditor.tsx"],"sourcesContent":["import React, {useRef, useEffect} from 'react';\nimport * as monaco from 'monaco-editor';\nimport {registerAutoCompletionLanguage} from \"./proxy\";\nimport {editor, IPosition} from \"monaco-editor\";\nimport IStandaloneEditorConstructionOptions = editor.IStandaloneEditorConstructionOptions;\nimport {Button} from \"antd\";\nimport ITextModel = editor.ITextModel;\nimport IEditorViewState = editor.IEditorViewState;\nimport ICodeEditorViewState = editor.ICodeEditorViewState;\n\n\n// window.MonacoEnvironment = {\n//     getWorker: function (_moduleId: any, label: string) {\n//         // console.log(metadata.languages);\n//         switch (label) {\n//             case 'editorWorkerService':\n//                 return new Worker(new URL('monaco-editor/esm/vs/editor/editor.worker', import.meta.url));\n//             case 'css':\n//             case 'less':\n//             case 'scss':\n//                 return new Worker(new URL('monaco-editor/esm/vs/language/css/css.worker', import.meta.url));\n//             case 'handlebars':\n//             case 'html':\n//             case 'razor':\n//                 return new Worker(\n//                     new URL('monaco-editor/esm/vs/language/html/html.worker', import.meta.url),\n//                 );\n//             case 'json':\n//                 return new Worker(\n//                     new URL('monaco-editor/esm/vs/language/json/json.worker', import.meta.url),\n//                 );\n//             case 'javascript':\n//             case 'typescript':\n//                 return new Worker(\n//                     new URL('monaco-editor/esm/vs/language/typescript/ts.worker', import.meta.url),\n//                 );\n//             default:\n//                 throw new Error(`Unknown label ${label}`);\n//         }\n//     }\n// };\n\ninterface ISuggestions {\n    label: string;\n    kind: string;\n    insertText: string;\n    detail?: string;\n}\n\ninterface IModelState {\n    model: ITextModel,\n    cursorPosition?: IPosition,\n    viewstate: ICodeEditorViewState|null,\n}\n\nexport const CodeEditor: React.FC<IStandaloneEditorConstructionOptions> = (props, context) => {\n    const container = useRef<HTMLDivElement>(null);\n    let editor: monaco.editor.IStandaloneCodeEditor;\n    let autoCompletion: monaco.IDisposable;\n    let currentModel: IModelState;\n    //自定义提示\n    let customAutoCompletion: ISuggestions[] = [{\n        label: \"item11\",\n        insertText: \"item text\",\n        kind: \"6\",\n        detail: \"TABLE.COLLUMN\"\n    }];\n\n    useEffect(() => {\n        if (container.current) {\n            //didMount/didUpdateMount\n            editor = monaco.editor.create(container.current, {...props});\n            editor.onDidChangeCursorPosition((pos) => {\n                currentModel.cursorPosition = pos.position;\n            });\n            return () => {\n                //didUnmount\n                if (autoCompletion) autoCompletion.dispose();   //防止自动提示重复\n                editor.dispose();\n            };\n        }\n    }, []);\n\n    let sqlstate: IModelState = {model: monaco.editor.createModel(\"select * from table\", \"mysql\"), viewstate:null};\n    let redisstate: IModelState = {model: monaco.editor.createModel(\"INFO \", \"redis\"), viewstate:null};\n\n    function changeModel(type: number) {\n        if (autoCompletion) autoCompletion.dispose();\n        currentModel.viewstate = editor.saveViewState();\n        switch (type) {\n            case 1:\n                currentModel = sqlstate;\n                editor.setModel(currentModel.model);\n                autoCompletion = registerAutoCompletionLanguage(\"mysql\", customAutoCompletion);\n                editor.focus();\n                break;\n            default:\n                currentModel = redisstate;\n                editor.setModel(currentModel.model);\n                autoCompletion = registerAutoCompletionLanguage(\"redis\", customAutoCompletion);\n                editor.focus();\n        }\n        if(currentModel.viewstate)\n            editor.restoreViewState(currentModel.viewstate);\n    }\n\n    return <div style={{height: \"calc(100%)\", width: \"calc(100%)\"}}>\n        <Button onClick={() => changeModel(1)}>model sql</Button>\n        <Button onClick={() => changeModel(0)}>model redis</Button>\n        <div className=\"Editor\" ref={container} style={{height: \"calc(100%)\", width: \"calc(100%)\"}}></div>\n    </div>;\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}