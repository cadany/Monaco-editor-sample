{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './glyphMargin.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nexport class DecorationToRender {\n  constructor(startLineNumber, endLineNumber, className) {\n    this._decorationToRenderBrand = undefined;\n    this.startLineNumber = +startLineNumber;\n    this.endLineNumber = +endLineNumber;\n    this.className = String(className);\n  }\n}\nexport class DedupOverlay extends DynamicViewOverlay {\n  _render(visibleStartLineNumber, visibleEndLineNumber, decorations) {\n    const output = [];\n    for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n      const lineIndex = lineNumber - visibleStartLineNumber;\n      output[lineIndex] = [];\n    }\n    if (decorations.length === 0) {\n      return output;\n    }\n    decorations.sort((a, b) => {\n      if (a.className === b.className) {\n        if (a.startLineNumber === b.startLineNumber) {\n          return a.endLineNumber - b.endLineNumber;\n        }\n        return a.startLineNumber - b.startLineNumber;\n      }\n      return a.className < b.className ? -1 : 1;\n    });\n    let prevClassName = null;\n    let prevEndLineIndex = 0;\n    for (let i = 0, len = decorations.length; i < len; i++) {\n      const d = decorations[i];\n      const className = d.className;\n      let startLineIndex = Math.max(d.startLineNumber, visibleStartLineNumber) - visibleStartLineNumber;\n      const endLineIndex = Math.min(d.endLineNumber, visibleEndLineNumber) - visibleStartLineNumber;\n      if (prevClassName === className) {\n        startLineIndex = Math.max(prevEndLineIndex + 1, startLineIndex);\n        prevEndLineIndex = Math.max(prevEndLineIndex, endLineIndex);\n      } else {\n        prevClassName = className;\n        prevEndLineIndex = endLineIndex;\n      }\n      for (let i = startLineIndex; i <= prevEndLineIndex; i++) {\n        output[i].push(prevClassName);\n      }\n    }\n    return output;\n  }\n}\nexport class GlyphMarginOverlay extends DedupOverlay {\n  constructor(context) {\n    super();\n    this._context = context;\n    const options = this._context.configuration.options;\n    const layoutInfo = options.get(138 /* EditorOption.layoutInfo */);\n    this._lineHeight = options.get(63 /* EditorOption.lineHeight */);\n    this._glyphMargin = options.get(54 /* EditorOption.glyphMargin */);\n    this._glyphMarginLeft = layoutInfo.glyphMarginLeft;\n    this._glyphMarginWidth = layoutInfo.glyphMarginWidth;\n    this._renderResult = null;\n    this._context.addEventHandler(this);\n  }\n  dispose() {\n    this._context.removeEventHandler(this);\n    this._renderResult = null;\n    super.dispose();\n  }\n  // --- begin event handlers\n  onConfigurationChanged(e) {\n    const options = this._context.configuration.options;\n    const layoutInfo = options.get(138 /* EditorOption.layoutInfo */);\n    this._lineHeight = options.get(63 /* EditorOption.lineHeight */);\n    this._glyphMargin = options.get(54 /* EditorOption.glyphMargin */);\n    this._glyphMarginLeft = layoutInfo.glyphMarginLeft;\n    this._glyphMarginWidth = layoutInfo.glyphMarginWidth;\n    return true;\n  }\n  onDecorationsChanged(e) {\n    return true;\n  }\n  onFlushed(e) {\n    return true;\n  }\n  onLinesChanged(e) {\n    return true;\n  }\n  onLinesDeleted(e) {\n    return true;\n  }\n  onLinesInserted(e) {\n    return true;\n  }\n  onScrollChanged(e) {\n    return e.scrollTopChanged;\n  }\n  onZonesChanged(e) {\n    return true;\n  }\n  // --- end event handlers\n  _getDecorations(ctx) {\n    const decorations = ctx.getDecorationsInViewport();\n    const r = [];\n    let rLen = 0;\n    for (let i = 0, len = decorations.length; i < len; i++) {\n      const d = decorations[i];\n      const glyphMarginClassName = d.options.glyphMarginClassName;\n      if (glyphMarginClassName) {\n        r[rLen++] = new DecorationToRender(d.range.startLineNumber, d.range.endLineNumber, glyphMarginClassName);\n      }\n    }\n    return r;\n  }\n  prepareRender(ctx) {\n    if (!this._glyphMargin) {\n      this._renderResult = null;\n      return;\n    }\n    const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n    const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n    const toRender = this._render(visibleStartLineNumber, visibleEndLineNumber, this._getDecorations(ctx));\n    const lineHeight = this._lineHeight.toString();\n    const left = this._glyphMarginLeft.toString();\n    const width = this._glyphMarginWidth.toString();\n    const common = '\" style=\"left:' + left + 'px;width:' + width + 'px' + ';height:' + lineHeight + 'px;\"></div>';\n    const output = [];\n    for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n      const lineIndex = lineNumber - visibleStartLineNumber;\n      const classNames = toRender[lineIndex];\n      if (classNames.length === 0) {\n        output[lineIndex] = '';\n      } else {\n        output[lineIndex] = '<div class=\"cgmr codicon ' + classNames.join(' ') + common;\n      }\n    }\n    this._renderResult = output;\n  }\n  render(startLineNumber, lineNumber) {\n    if (!this._renderResult) {\n      return '';\n    }\n    const lineIndex = lineNumber - startLineNumber;\n    if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n      return '';\n    }\n    return this._renderResult[lineIndex];\n  }\n}","map":{"version":3,"names":["DynamicViewOverlay","DecorationToRender","constructor","startLineNumber","endLineNumber","className","_decorationToRenderBrand","undefined","String","DedupOverlay","_render","visibleStartLineNumber","visibleEndLineNumber","decorations","output","lineNumber","lineIndex","length","sort","a","b","prevClassName","prevEndLineIndex","i","len","d","startLineIndex","Math","max","endLineIndex","min","push","GlyphMarginOverlay","context","_context","options","configuration","layoutInfo","get","_lineHeight","_glyphMargin","_glyphMarginLeft","glyphMarginLeft","_glyphMarginWidth","glyphMarginWidth","_renderResult","addEventHandler","dispose","removeEventHandler","onConfigurationChanged","e","onDecorationsChanged","onFlushed","onLinesChanged","onLinesDeleted","onLinesInserted","onScrollChanged","scrollTopChanged","onZonesChanged","_getDecorations","ctx","getDecorationsInViewport","r","rLen","glyphMarginClassName","range","prepareRender","visibleRange","toRender","lineHeight","toString","left","width","common","classNames","join","render"],"sources":["/Users/cadany/WebstormProjects/monaco-editor-sample/node_modules/monaco-editor/esm/vs/editor/browser/viewParts/glyphMargin/glyphMargin.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './glyphMargin.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nexport class DecorationToRender {\n    constructor(startLineNumber, endLineNumber, className) {\n        this._decorationToRenderBrand = undefined;\n        this.startLineNumber = +startLineNumber;\n        this.endLineNumber = +endLineNumber;\n        this.className = String(className);\n    }\n}\nexport class DedupOverlay extends DynamicViewOverlay {\n    _render(visibleStartLineNumber, visibleEndLineNumber, decorations) {\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            output[lineIndex] = [];\n        }\n        if (decorations.length === 0) {\n            return output;\n        }\n        decorations.sort((a, b) => {\n            if (a.className === b.className) {\n                if (a.startLineNumber === b.startLineNumber) {\n                    return a.endLineNumber - b.endLineNumber;\n                }\n                return a.startLineNumber - b.startLineNumber;\n            }\n            return (a.className < b.className ? -1 : 1);\n        });\n        let prevClassName = null;\n        let prevEndLineIndex = 0;\n        for (let i = 0, len = decorations.length; i < len; i++) {\n            const d = decorations[i];\n            const className = d.className;\n            let startLineIndex = Math.max(d.startLineNumber, visibleStartLineNumber) - visibleStartLineNumber;\n            const endLineIndex = Math.min(d.endLineNumber, visibleEndLineNumber) - visibleStartLineNumber;\n            if (prevClassName === className) {\n                startLineIndex = Math.max(prevEndLineIndex + 1, startLineIndex);\n                prevEndLineIndex = Math.max(prevEndLineIndex, endLineIndex);\n            }\n            else {\n                prevClassName = className;\n                prevEndLineIndex = endLineIndex;\n            }\n            for (let i = startLineIndex; i <= prevEndLineIndex; i++) {\n                output[i].push(prevClassName);\n            }\n        }\n        return output;\n    }\n}\nexport class GlyphMarginOverlay extends DedupOverlay {\n    constructor(context) {\n        super();\n        this._context = context;\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(138 /* EditorOption.layoutInfo */);\n        this._lineHeight = options.get(63 /* EditorOption.lineHeight */);\n        this._glyphMargin = options.get(54 /* EditorOption.glyphMargin */);\n        this._glyphMarginLeft = layoutInfo.glyphMarginLeft;\n        this._glyphMarginWidth = layoutInfo.glyphMarginWidth;\n        this._renderResult = null;\n        this._context.addEventHandler(this);\n    }\n    dispose() {\n        this._context.removeEventHandler(this);\n        this._renderResult = null;\n        super.dispose();\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(138 /* EditorOption.layoutInfo */);\n        this._lineHeight = options.get(63 /* EditorOption.lineHeight */);\n        this._glyphMargin = options.get(54 /* EditorOption.glyphMargin */);\n        this._glyphMarginLeft = layoutInfo.glyphMarginLeft;\n        this._glyphMarginWidth = layoutInfo.glyphMarginWidth;\n        return true;\n    }\n    onDecorationsChanged(e) {\n        return true;\n    }\n    onFlushed(e) {\n        return true;\n    }\n    onLinesChanged(e) {\n        return true;\n    }\n    onLinesDeleted(e) {\n        return true;\n    }\n    onLinesInserted(e) {\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged;\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // --- end event handlers\n    _getDecorations(ctx) {\n        const decorations = ctx.getDecorationsInViewport();\n        const r = [];\n        let rLen = 0;\n        for (let i = 0, len = decorations.length; i < len; i++) {\n            const d = decorations[i];\n            const glyphMarginClassName = d.options.glyphMarginClassName;\n            if (glyphMarginClassName) {\n                r[rLen++] = new DecorationToRender(d.range.startLineNumber, d.range.endLineNumber, glyphMarginClassName);\n            }\n        }\n        return r;\n    }\n    prepareRender(ctx) {\n        if (!this._glyphMargin) {\n            this._renderResult = null;\n            return;\n        }\n        const visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n        const visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n        const toRender = this._render(visibleStartLineNumber, visibleEndLineNumber, this._getDecorations(ctx));\n        const lineHeight = this._lineHeight.toString();\n        const left = this._glyphMarginLeft.toString();\n        const width = this._glyphMarginWidth.toString();\n        const common = '\" style=\"left:' + left + 'px;width:' + width + 'px' + ';height:' + lineHeight + 'px;\"></div>';\n        const output = [];\n        for (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - visibleStartLineNumber;\n            const classNames = toRender[lineIndex];\n            if (classNames.length === 0) {\n                output[lineIndex] = '';\n            }\n            else {\n                output[lineIndex] = ('<div class=\"cgmr codicon '\n                    + classNames.join(' ')\n                    + common);\n            }\n        }\n        this._renderResult = output;\n    }\n    render(startLineNumber, lineNumber) {\n        if (!this._renderResult) {\n            return '';\n        }\n        const lineIndex = lineNumber - startLineNumber;\n        if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n            return '';\n        }\n        return this._renderResult[lineIndex];\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}