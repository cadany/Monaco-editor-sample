{"ast":null,"code":"var _jsxFileName = \"/Users/cadany/WebstormProjects/monaco/src/BaseEditor.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport * as monaco from 'monaco-editor';\n// import * as monaco from 'monaco-editor/esm/vs/editor/editor.api';\n// import { language as sqlLanguage } from 'monaco-editor/esm/vs/basic-languages/sql/sql';\nimport { registerGenricSQLLanguage } from \"./proxy\";\n\n// window.MonacoEnvironment = {\n//     getWorker: function (_moduleId: any, label: string) {\n//         // console.log(metadata.languages);\n//         switch (label) {\n//             case 'editorWorkerService':\n//                 return new Worker(new URL('monaco-editor/esm/vs/editor/editor.worker', import.meta.url));\n//             case 'css':\n//             case 'less':\n//             case 'scss':\n//                 return new Worker(new URL('monaco-editor/esm/vs/language/css/css.worker', import.meta.url));\n//             case 'handlebars':\n//             case 'html':\n//             case 'razor':\n//                 return new Worker(\n//                     new URL('monaco-editor/esm/vs/language/html/html.worker', import.meta.url),\n//                 );\n//             case 'json':\n//                 return new Worker(\n//                     new URL('monaco-editor/esm/vs/language/json/json.worker', import.meta.url),\n//                 );\n//             case 'javascript':\n//             case 'typescript':\n//                 return new Worker(\n//                     new URL('monaco-editor/esm/vs/language/typescript/ts.worker', import.meta.url),\n//                 );\n//             default:\n//                 throw new Error(`Unknown label ${label}`);\n//         }\n//     }\n// };\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const BaseEditor = (props, context) => {\n  _s();\n  const container = useRef(null);\n  let editor;\n  let completionItem;\n  useEffect(() => {\n    console.log(\"mount\");\n    if (container.current) {\n      editor = monaco.editor.create(container.current, {\n        value: ['select * from table1'].join('\\n'),\n        language: 'sql',\n        minimap: {\n          enabled: false\n        }\n      });\n      completionItem = registerGenricSQLLanguage();\n      return () => {\n        console.log(\"dispose\");\n        completionItem.dispose(); //防止自动提示重复\n        editor.dispose();\n      };\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Editor\",\n    ref: container,\n    style: {\n      height: \"100vh\",\n      width: \"100vw\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 12\n  }, this);\n};\n_s(BaseEditor, \"gP936EAkbq44zYYGRnj90r2fLhg=\");\n_c = BaseEditor;\nvar _c;\n$RefreshReg$(_c, \"BaseEditor\");","map":{"version":3,"names":["React","useRef","useEffect","monaco","registerGenricSQLLanguage","jsxDEV","_jsxDEV","BaseEditor","props","context","_s","container","editor","completionItem","console","log","current","create","value","join","language","minimap","enabled","dispose","className","ref","style","height","width","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/cadany/WebstormProjects/monaco/src/BaseEditor.tsx"],"sourcesContent":["import React, {useRef, useEffect} from 'react';\nimport * as monaco from 'monaco-editor';\n// import * as monaco from 'monaco-editor/esm/vs/editor/editor.api';\n// import { language as sqlLanguage } from 'monaco-editor/esm/vs/basic-languages/sql/sql';\nimport {registerGenricSQLLanguage} from \"./proxy\";\n\n\n// window.MonacoEnvironment = {\n//     getWorker: function (_moduleId: any, label: string) {\n//         // console.log(metadata.languages);\n//         switch (label) {\n//             case 'editorWorkerService':\n//                 return new Worker(new URL('monaco-editor/esm/vs/editor/editor.worker', import.meta.url));\n//             case 'css':\n//             case 'less':\n//             case 'scss':\n//                 return new Worker(new URL('monaco-editor/esm/vs/language/css/css.worker', import.meta.url));\n//             case 'handlebars':\n//             case 'html':\n//             case 'razor':\n//                 return new Worker(\n//                     new URL('monaco-editor/esm/vs/language/html/html.worker', import.meta.url),\n//                 );\n//             case 'json':\n//                 return new Worker(\n//                     new URL('monaco-editor/esm/vs/language/json/json.worker', import.meta.url),\n//                 );\n//             case 'javascript':\n//             case 'typescript':\n//                 return new Worker(\n//                     new URL('monaco-editor/esm/vs/language/typescript/ts.worker', import.meta.url),\n//                 );\n//             default:\n//                 throw new Error(`Unknown label ${label}`);\n//         }\n//     }\n// };\n\ninterface IEditorProps{\n    language: string\n}\nexport const BaseEditor: React.FC<IEditorProps> = (props, context) => {\n    const container = useRef<HTMLDivElement>(null);\n    let editor: monaco.editor.IStandaloneCodeEditor;\n    let completionItem: monaco.IDisposable;\n\n    useEffect(() => {\n        console.log(\"mount\");\n        if (container.current) {\n            editor = monaco.editor.create(container.current, {\n                value: ['select * from table1'].join('\\n'),\n                language: 'sql',\n                minimap: {enabled: false}\n            });\n            completionItem = registerGenricSQLLanguage();\n\n            return () => {\n                console.log(\"dispose\");\n                completionItem.dispose();   //防止自动提示重复\n                editor.dispose();\n            };\n        }\n    }, []);\n\n    return <div className=\"Editor\" ref={container} style={{height: \"100vh\", width: \"100vw\"}}></div>;\n};"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,MAAM,EAAEC,SAAS,QAAO,OAAO;AAC9C,OAAO,KAAKC,MAAM,MAAM,eAAe;AACvC;AACA;AACA,SAAQC,yBAAyB,QAAO,SAAS;;AAGjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAKA,OAAO,MAAMC,UAAkC,GAAGA,CAACC,KAAK,EAAEC,OAAO,KAAK;EAAAC,EAAA;EAClE,MAAMC,SAAS,GAAGV,MAAM,CAAiB,IAAI,CAAC;EAC9C,IAAIW,MAA2C;EAC/C,IAAIC,cAAkC;EAEtCX,SAAS,CAAC,MAAM;IACZY,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;IACpB,IAAIJ,SAAS,CAACK,OAAO,EAAE;MACnBJ,MAAM,GAAGT,MAAM,CAACS,MAAM,CAACK,MAAM,CAACN,SAAS,CAACK,OAAO,EAAE;QAC7CE,KAAK,EAAE,CAAC,sBAAsB,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;QAC1CC,QAAQ,EAAE,KAAK;QACfC,OAAO,EAAE;UAACC,OAAO,EAAE;QAAK;MAC5B,CAAC,CAAC;MACFT,cAAc,GAAGT,yBAAyB,EAAE;MAE5C,OAAO,MAAM;QACTU,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;QACtBF,cAAc,CAACU,OAAO,EAAE,CAAC,CAAG;QAC5BX,MAAM,CAACW,OAAO,EAAE;MACpB,CAAC;IACL;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,oBAAOjB,OAAA;IAAKkB,SAAS,EAAC,QAAQ;IAACC,GAAG,EAAEd,SAAU;IAACe,KAAK,EAAE;MAACC,MAAM,EAAE,OAAO;MAAEC,KAAK,EAAE;IAAO;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAO;AACnG,CAAC;AAACtB,EAAA,CAxBWH,UAAkC;AAAA0B,EAAA,GAAlC1B,UAAkC;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}