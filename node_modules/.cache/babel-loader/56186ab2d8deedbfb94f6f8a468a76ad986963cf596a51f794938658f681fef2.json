{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/cadany/WebstormProjects/monaco/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/cadany/WebstormProjects/monaco/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/cadany/WebstormProjects/monaco/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _slicedToArray from \"/Users/cadany/WebstormProjects/monaco/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { ObjectTreeModel } from './objectTreeModel.js';\nimport { TreeError, WeakMapper } from './tree.js';\nimport { Event } from '../../../common/event.js';\nimport { Iterable } from '../../../common/iterator.js';\nfunction noCompress(element) {\n  var elements = [element.element];\n  var incompressible = element.incompressible || false;\n  return {\n    element: {\n      elements: elements,\n      incompressible: incompressible\n    },\n    children: Iterable.map(Iterable.from(element.children), noCompress),\n    collapsible: element.collapsible,\n    collapsed: element.collapsed\n  };\n}\n// Exported only for test reasons, do not use directly\nexport function compress(element) {\n  var elements = [element.element];\n  var incompressible = element.incompressible || false;\n  var childrenIterator;\n  var children;\n  while (true) {\n    var _Iterable$consume = Iterable.consume(Iterable.from(element.children), 2);\n    var _Iterable$consume2 = _slicedToArray(_Iterable$consume, 2);\n    children = _Iterable$consume2[0];\n    childrenIterator = _Iterable$consume2[1];\n    if (children.length !== 1) {\n      break;\n    }\n    if (children[0].incompressible) {\n      break;\n    }\n    element = children[0];\n    elements.push(element.element);\n  }\n  return {\n    element: {\n      elements: elements,\n      incompressible: incompressible\n    },\n    children: Iterable.map(Iterable.concat(children, childrenIterator), compress),\n    collapsible: element.collapsible,\n    collapsed: element.collapsed\n  };\n}\nfunction _decompress(element) {\n  var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var children;\n  if (index < element.element.elements.length - 1) {\n    children = [_decompress(element, index + 1)];\n  } else {\n    children = Iterable.map(Iterable.from(element.children), function (el) {\n      return _decompress(el, 0);\n    });\n  }\n  if (index === 0 && element.element.incompressible) {\n    return {\n      element: element.element.elements[index],\n      children: children,\n      incompressible: true,\n      collapsible: element.collapsible,\n      collapsed: element.collapsed\n    };\n  }\n  return {\n    element: element.element.elements[index],\n    children: children,\n    collapsible: element.collapsible,\n    collapsed: element.collapsed\n  };\n}\n// Exported only for test reasons, do not use directly\nexport function decompress(element) {\n  return _decompress(element, 0);\n}\nfunction splice(treeElement, element, children) {\n  if (treeElement.element === element) {\n    return Object.assign(Object.assign({}, treeElement), {\n      children: children\n    });\n  }\n  return Object.assign(Object.assign({}, treeElement), {\n    children: Iterable.map(Iterable.from(treeElement.children), function (e) {\n      return splice(e, element, children);\n    })\n  });\n}\nvar wrapIdentityProvider = function wrapIdentityProvider(base) {\n  return {\n    getId: function getId(node) {\n      return node.elements.map(function (e) {\n        return base.getId(e).toString();\n      }).join('\\0');\n    }\n  };\n};\n// Exported only for test reasons, do not use directly\nexport var CompressedObjectTreeModel = /*#__PURE__*/function () {\n  function CompressedObjectTreeModel(user, list) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    _classCallCheck(this, CompressedObjectTreeModel);\n    this.user = user;\n    this.rootRef = null;\n    this.nodes = new Map();\n    this.model = new ObjectTreeModel(user, list, options);\n    this.enabled = typeof options.compressionEnabled === 'undefined' ? true : options.compressionEnabled;\n    this.identityProvider = options.identityProvider;\n  }\n  _createClass(CompressedObjectTreeModel, [{\n    key: \"onDidSplice\",\n    get: function get() {\n      return this.model.onDidSplice;\n    }\n  }, {\n    key: \"onDidChangeCollapseState\",\n    get: function get() {\n      return this.model.onDidChangeCollapseState;\n    }\n  }, {\n    key: \"onDidChangeRenderNodeCount\",\n    get: function get() {\n      return this.model.onDidChangeRenderNodeCount;\n    }\n  }, {\n    key: \"setChildren\",\n    value: function setChildren(element) {\n      var children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Iterable.empty();\n      var options = arguments.length > 2 ? arguments[2] : undefined;\n      // Diffs must be deem, since the compression can affect nested elements.\n      // @see https://github.com/microsoft/vscode/pull/114237#issuecomment-759425034\n      var diffIdentityProvider = options.diffIdentityProvider && wrapIdentityProvider(options.diffIdentityProvider);\n      if (element === null) {\n        var compressedChildren = Iterable.map(children, this.enabled ? compress : noCompress);\n        this._setChildren(null, compressedChildren, {\n          diffIdentityProvider: diffIdentityProvider,\n          diffDepth: Infinity\n        });\n        return;\n      }\n      var compressedNode = this.nodes.get(element);\n      if (!compressedNode) {\n        throw new TreeError(this.user, 'Unknown compressed tree node');\n      }\n      var node = this.model.getNode(compressedNode);\n      var compressedParentNode = this.model.getParentNodeLocation(compressedNode);\n      var parent = this.model.getNode(compressedParentNode);\n      var decompressedElement = decompress(node);\n      var splicedElement = splice(decompressedElement, element, children);\n      var recompressedElement = (this.enabled ? compress : noCompress)(splicedElement);\n      var parentChildren = parent.children.map(function (child) {\n        return child === node ? recompressedElement : child;\n      });\n      this._setChildren(parent.element, parentChildren, {\n        diffIdentityProvider: diffIdentityProvider,\n        diffDepth: node.depth - parent.depth\n      });\n    }\n  }, {\n    key: \"setCompressionEnabled\",\n    value: function setCompressionEnabled(enabled) {\n      if (enabled === this.enabled) {\n        return;\n      }\n      this.enabled = enabled;\n      var root = this.model.getNode();\n      var rootChildren = root.children;\n      var decompressedRootChildren = Iterable.map(rootChildren, decompress);\n      var recompressedRootChildren = Iterable.map(decompressedRootChildren, enabled ? compress : noCompress);\n      // it should be safe to always use deep diff mode here if an identity\n      // provider is available, since we know the raw nodes are unchanged.\n      this._setChildren(null, recompressedRootChildren, {\n        diffIdentityProvider: this.identityProvider,\n        diffDepth: Infinity\n      });\n    }\n  }, {\n    key: \"_setChildren\",\n    value: function _setChildren(node, children, options) {\n      var _this = this;\n      var insertedElements = new Set();\n      var onDidCreateNode = function onDidCreateNode(node) {\n        var _iterator = _createForOfIteratorHelper(node.element.elements),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var element = _step.value;\n            insertedElements.add(element);\n            _this.nodes.set(element, node.element);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      };\n      var onDidDeleteNode = function onDidDeleteNode(node) {\n        var _iterator2 = _createForOfIteratorHelper(node.element.elements),\n          _step2;\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var element = _step2.value;\n            if (!insertedElements.has(element)) {\n              _this.nodes.delete(element);\n            }\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      };\n      this.model.setChildren(node, children, Object.assign(Object.assign({}, options), {\n        onDidCreateNode: onDidCreateNode,\n        onDidDeleteNode: onDidDeleteNode\n      }));\n    }\n  }, {\n    key: \"has\",\n    value: function has(element) {\n      return this.nodes.has(element);\n    }\n  }, {\n    key: \"getListIndex\",\n    value: function getListIndex(location) {\n      var node = this.getCompressedNode(location);\n      return this.model.getListIndex(node);\n    }\n  }, {\n    key: \"getListRenderCount\",\n    value: function getListRenderCount(location) {\n      var node = this.getCompressedNode(location);\n      return this.model.getListRenderCount(node);\n    }\n  }, {\n    key: \"getNode\",\n    value: function getNode(location) {\n      if (typeof location === 'undefined') {\n        return this.model.getNode();\n      }\n      var node = this.getCompressedNode(location);\n      return this.model.getNode(node);\n    }\n    // TODO: review this\n  }, {\n    key: \"getNodeLocation\",\n    value: function getNodeLocation(node) {\n      var compressedNode = this.model.getNodeLocation(node);\n      if (compressedNode === null) {\n        return null;\n      }\n      return compressedNode.elements[compressedNode.elements.length - 1];\n    }\n    // TODO: review this\n  }, {\n    key: \"getParentNodeLocation\",\n    value: function getParentNodeLocation(location) {\n      var compressedNode = this.getCompressedNode(location);\n      var parentNode = this.model.getParentNodeLocation(compressedNode);\n      if (parentNode === null) {\n        return null;\n      }\n      return parentNode.elements[parentNode.elements.length - 1];\n    }\n  }, {\n    key: \"getFirstElementChild\",\n    value: function getFirstElementChild(location) {\n      var compressedNode = this.getCompressedNode(location);\n      return this.model.getFirstElementChild(compressedNode);\n    }\n  }, {\n    key: \"isCollapsible\",\n    value: function isCollapsible(location) {\n      var compressedNode = this.getCompressedNode(location);\n      return this.model.isCollapsible(compressedNode);\n    }\n  }, {\n    key: \"setCollapsible\",\n    value: function setCollapsible(location, collapsible) {\n      var compressedNode = this.getCompressedNode(location);\n      return this.model.setCollapsible(compressedNode, collapsible);\n    }\n  }, {\n    key: \"isCollapsed\",\n    value: function isCollapsed(location) {\n      var compressedNode = this.getCompressedNode(location);\n      return this.model.isCollapsed(compressedNode);\n    }\n  }, {\n    key: \"setCollapsed\",\n    value: function setCollapsed(location, collapsed, recursive) {\n      var compressedNode = this.getCompressedNode(location);\n      return this.model.setCollapsed(compressedNode, collapsed, recursive);\n    }\n  }, {\n    key: \"expandTo\",\n    value: function expandTo(location) {\n      var compressedNode = this.getCompressedNode(location);\n      this.model.expandTo(compressedNode);\n    }\n  }, {\n    key: \"rerender\",\n    value: function rerender(location) {\n      var compressedNode = this.getCompressedNode(location);\n      this.model.rerender(compressedNode);\n    }\n  }, {\n    key: \"refilter\",\n    value: function refilter() {\n      this.model.refilter();\n    }\n  }, {\n    key: \"getCompressedNode\",\n    value: function getCompressedNode(element) {\n      if (element === null) {\n        return null;\n      }\n      var node = this.nodes.get(element);\n      if (!node) {\n        throw new TreeError(this.user, \"Tree element not found: \".concat(element));\n      }\n      return node;\n    }\n  }]);\n  return CompressedObjectTreeModel;\n}();\nexport var DefaultElementMapper = function DefaultElementMapper(elements) {\n  return elements[elements.length - 1];\n};\nvar CompressedTreeNodeWrapper = /*#__PURE__*/function () {\n  function CompressedTreeNodeWrapper(unwrapper, node) {\n    _classCallCheck(this, CompressedTreeNodeWrapper);\n    this.unwrapper = unwrapper;\n    this.node = node;\n  }\n  _createClass(CompressedTreeNodeWrapper, [{\n    key: \"element\",\n    get: function get() {\n      return this.node.element === null ? null : this.unwrapper(this.node.element);\n    }\n  }, {\n    key: \"children\",\n    get: function get() {\n      var _this2 = this;\n      return this.node.children.map(function (node) {\n        return new CompressedTreeNodeWrapper(_this2.unwrapper, node);\n      });\n    }\n  }, {\n    key: \"depth\",\n    get: function get() {\n      return this.node.depth;\n    }\n  }, {\n    key: \"visibleChildrenCount\",\n    get: function get() {\n      return this.node.visibleChildrenCount;\n    }\n  }, {\n    key: \"visibleChildIndex\",\n    get: function get() {\n      return this.node.visibleChildIndex;\n    }\n  }, {\n    key: \"collapsible\",\n    get: function get() {\n      return this.node.collapsible;\n    }\n  }, {\n    key: \"collapsed\",\n    get: function get() {\n      return this.node.collapsed;\n    }\n  }, {\n    key: \"visible\",\n    get: function get() {\n      return this.node.visible;\n    }\n  }, {\n    key: \"filterData\",\n    get: function get() {\n      return this.node.filterData;\n    }\n  }]);\n  return CompressedTreeNodeWrapper;\n}();\nfunction mapList(nodeMapper, list) {\n  return {\n    splice: function splice(start, deleteCount, toInsert) {\n      list.splice(start, deleteCount, toInsert.map(function (node) {\n        return nodeMapper.map(node);\n      }));\n    },\n    updateElementHeight: function updateElementHeight(index, height) {\n      list.updateElementHeight(index, height);\n    }\n  };\n}\nfunction mapOptions(compressedNodeUnwrapper, options) {\n  return Object.assign(Object.assign({}, options), {\n    identityProvider: options.identityProvider && {\n      getId: function getId(node) {\n        return options.identityProvider.getId(compressedNodeUnwrapper(node));\n      }\n    },\n    sorter: options.sorter && {\n      compare: function compare(node, otherNode) {\n        return options.sorter.compare(node.elements[0], otherNode.elements[0]);\n      }\n    },\n    filter: options.filter && {\n      filter: function filter(node, parentVisibility) {\n        return options.filter.filter(compressedNodeUnwrapper(node), parentVisibility);\n      }\n    }\n  });\n}\nexport var CompressibleObjectTreeModel = /*#__PURE__*/function () {\n  function CompressibleObjectTreeModel(user, list) {\n    var _this3 = this;\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    _classCallCheck(this, CompressibleObjectTreeModel);\n    this.rootRef = null;\n    this.elementMapper = options.elementMapper || DefaultElementMapper;\n    var compressedNodeUnwrapper = function compressedNodeUnwrapper(node) {\n      return _this3.elementMapper(node.elements);\n    };\n    this.nodeMapper = new WeakMapper(function (node) {\n      return new CompressedTreeNodeWrapper(compressedNodeUnwrapper, node);\n    });\n    this.model = new CompressedObjectTreeModel(user, mapList(this.nodeMapper, list), mapOptions(compressedNodeUnwrapper, options));\n  }\n  _createClass(CompressibleObjectTreeModel, [{\n    key: \"onDidSplice\",\n    get: function get() {\n      var _this4 = this;\n      return Event.map(this.model.onDidSplice, function (_ref) {\n        var insertedNodes = _ref.insertedNodes,\n          deletedNodes = _ref.deletedNodes;\n        return {\n          insertedNodes: insertedNodes.map(function (node) {\n            return _this4.nodeMapper.map(node);\n          }),\n          deletedNodes: deletedNodes.map(function (node) {\n            return _this4.nodeMapper.map(node);\n          })\n        };\n      });\n    }\n  }, {\n    key: \"onDidChangeCollapseState\",\n    get: function get() {\n      var _this5 = this;\n      return Event.map(this.model.onDidChangeCollapseState, function (_ref2) {\n        var node = _ref2.node,\n          deep = _ref2.deep;\n        return {\n          node: _this5.nodeMapper.map(node),\n          deep: deep\n        };\n      });\n    }\n  }, {\n    key: \"onDidChangeRenderNodeCount\",\n    get: function get() {\n      var _this6 = this;\n      return Event.map(this.model.onDidChangeRenderNodeCount, function (node) {\n        return _this6.nodeMapper.map(node);\n      });\n    }\n  }, {\n    key: \"setChildren\",\n    value: function setChildren(element) {\n      var children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Iterable.empty();\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      this.model.setChildren(element, children, options);\n    }\n  }, {\n    key: \"setCompressionEnabled\",\n    value: function setCompressionEnabled(enabled) {\n      this.model.setCompressionEnabled(enabled);\n    }\n  }, {\n    key: \"has\",\n    value: function has(location) {\n      return this.model.has(location);\n    }\n  }, {\n    key: \"getListIndex\",\n    value: function getListIndex(location) {\n      return this.model.getListIndex(location);\n    }\n  }, {\n    key: \"getListRenderCount\",\n    value: function getListRenderCount(location) {\n      return this.model.getListRenderCount(location);\n    }\n  }, {\n    key: \"getNode\",\n    value: function getNode(location) {\n      return this.nodeMapper.map(this.model.getNode(location));\n    }\n  }, {\n    key: \"getNodeLocation\",\n    value: function getNodeLocation(node) {\n      return node.element;\n    }\n  }, {\n    key: \"getParentNodeLocation\",\n    value: function getParentNodeLocation(location) {\n      return this.model.getParentNodeLocation(location);\n    }\n  }, {\n    key: \"getFirstElementChild\",\n    value: function getFirstElementChild(location) {\n      var result = this.model.getFirstElementChild(location);\n      if (result === null || typeof result === 'undefined') {\n        return result;\n      }\n      return this.elementMapper(result.elements);\n    }\n  }, {\n    key: \"isCollapsible\",\n    value: function isCollapsible(location) {\n      return this.model.isCollapsible(location);\n    }\n  }, {\n    key: \"setCollapsible\",\n    value: function setCollapsible(location, collapsed) {\n      return this.model.setCollapsible(location, collapsed);\n    }\n  }, {\n    key: \"isCollapsed\",\n    value: function isCollapsed(location) {\n      return this.model.isCollapsed(location);\n    }\n  }, {\n    key: \"setCollapsed\",\n    value: function setCollapsed(location, collapsed, recursive) {\n      return this.model.setCollapsed(location, collapsed, recursive);\n    }\n  }, {\n    key: \"expandTo\",\n    value: function expandTo(location) {\n      return this.model.expandTo(location);\n    }\n  }, {\n    key: \"rerender\",\n    value: function rerender(location) {\n      return this.model.rerender(location);\n    }\n  }, {\n    key: \"refilter\",\n    value: function refilter() {\n      return this.model.refilter();\n    }\n  }, {\n    key: \"getCompressedTreeNode\",\n    value: function getCompressedTreeNode() {\n      var location = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      return this.model.getNode(location);\n    }\n  }]);\n  return CompressibleObjectTreeModel;\n}();","map":{"version":3,"names":["ObjectTreeModel","TreeError","WeakMapper","Event","Iterable","noCompress","element","elements","incompressible","children","map","from","collapsible","collapsed","compress","childrenIterator","_Iterable$consume","consume","_Iterable$consume2","_slicedToArray","length","push","concat","_decompress","index","arguments","undefined","el","decompress","splice","treeElement","Object","assign","e","wrapIdentityProvider","base","getId","node","toString","join","CompressedObjectTreeModel","user","list","options","_classCallCheck","rootRef","nodes","Map","model","enabled","compressionEnabled","identityProvider","_createClass","key","get","onDidSplice","onDidChangeCollapseState","onDidChangeRenderNodeCount","value","setChildren","empty","diffIdentityProvider","compressedChildren","_setChildren","diffDepth","Infinity","compressedNode","getNode","compressedParentNode","getParentNodeLocation","parent","decompressedElement","splicedElement","recompressedElement","parentChildren","child","depth","setCompressionEnabled","root","rootChildren","decompressedRootChildren","recompressedRootChildren","_this","insertedElements","Set","onDidCreateNode","_iterator","_createForOfIteratorHelper","_step","s","n","done","add","set","err","f","onDidDeleteNode","_iterator2","_step2","has","delete","getListIndex","location","getCompressedNode","getListRenderCount","getNodeLocation","parentNode","getFirstElementChild","isCollapsible","setCollapsible","isCollapsed","setCollapsed","recursive","expandTo","rerender","refilter","DefaultElementMapper","CompressedTreeNodeWrapper","unwrapper","_this2","visibleChildrenCount","visibleChildIndex","visible","filterData","mapList","nodeMapper","start","deleteCount","toInsert","updateElementHeight","height","mapOptions","compressedNodeUnwrapper","sorter","compare","otherNode","filter","parentVisibility","CompressibleObjectTreeModel","_this3","elementMapper","_this4","_ref","insertedNodes","deletedNodes","_this5","_ref2","deep","_this6","result","getCompressedTreeNode"],"sources":["/Users/cadany/WebstormProjects/monaco/node_modules/monaco-editor/esm/vs/base/browser/ui/tree/compressedObjectTreeModel.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { ObjectTreeModel } from './objectTreeModel.js';\nimport { TreeError, WeakMapper } from './tree.js';\nimport { Event } from '../../../common/event.js';\nimport { Iterable } from '../../../common/iterator.js';\nfunction noCompress(element) {\n    const elements = [element.element];\n    const incompressible = element.incompressible || false;\n    return {\n        element: { elements, incompressible },\n        children: Iterable.map(Iterable.from(element.children), noCompress),\n        collapsible: element.collapsible,\n        collapsed: element.collapsed\n    };\n}\n// Exported only for test reasons, do not use directly\nexport function compress(element) {\n    const elements = [element.element];\n    const incompressible = element.incompressible || false;\n    let childrenIterator;\n    let children;\n    while (true) {\n        [children, childrenIterator] = Iterable.consume(Iterable.from(element.children), 2);\n        if (children.length !== 1) {\n            break;\n        }\n        if (children[0].incompressible) {\n            break;\n        }\n        element = children[0];\n        elements.push(element.element);\n    }\n    return {\n        element: { elements, incompressible },\n        children: Iterable.map(Iterable.concat(children, childrenIterator), compress),\n        collapsible: element.collapsible,\n        collapsed: element.collapsed\n    };\n}\nfunction _decompress(element, index = 0) {\n    let children;\n    if (index < element.element.elements.length - 1) {\n        children = [_decompress(element, index + 1)];\n    }\n    else {\n        children = Iterable.map(Iterable.from(element.children), el => _decompress(el, 0));\n    }\n    if (index === 0 && element.element.incompressible) {\n        return {\n            element: element.element.elements[index],\n            children,\n            incompressible: true,\n            collapsible: element.collapsible,\n            collapsed: element.collapsed\n        };\n    }\n    return {\n        element: element.element.elements[index],\n        children,\n        collapsible: element.collapsible,\n        collapsed: element.collapsed\n    };\n}\n// Exported only for test reasons, do not use directly\nexport function decompress(element) {\n    return _decompress(element, 0);\n}\nfunction splice(treeElement, element, children) {\n    if (treeElement.element === element) {\n        return Object.assign(Object.assign({}, treeElement), { children });\n    }\n    return Object.assign(Object.assign({}, treeElement), { children: Iterable.map(Iterable.from(treeElement.children), e => splice(e, element, children)) });\n}\nconst wrapIdentityProvider = (base) => ({\n    getId(node) {\n        return node.elements.map(e => base.getId(e).toString()).join('\\0');\n    }\n});\n// Exported only for test reasons, do not use directly\nexport class CompressedObjectTreeModel {\n    get onDidSplice() { return this.model.onDidSplice; }\n    get onDidChangeCollapseState() { return this.model.onDidChangeCollapseState; }\n    get onDidChangeRenderNodeCount() { return this.model.onDidChangeRenderNodeCount; }\n    constructor(user, list, options = {}) {\n        this.user = user;\n        this.rootRef = null;\n        this.nodes = new Map();\n        this.model = new ObjectTreeModel(user, list, options);\n        this.enabled = typeof options.compressionEnabled === 'undefined' ? true : options.compressionEnabled;\n        this.identityProvider = options.identityProvider;\n    }\n    setChildren(element, children = Iterable.empty(), options) {\n        // Diffs must be deem, since the compression can affect nested elements.\n        // @see https://github.com/microsoft/vscode/pull/114237#issuecomment-759425034\n        const diffIdentityProvider = options.diffIdentityProvider && wrapIdentityProvider(options.diffIdentityProvider);\n        if (element === null) {\n            const compressedChildren = Iterable.map(children, this.enabled ? compress : noCompress);\n            this._setChildren(null, compressedChildren, { diffIdentityProvider, diffDepth: Infinity });\n            return;\n        }\n        const compressedNode = this.nodes.get(element);\n        if (!compressedNode) {\n            throw new TreeError(this.user, 'Unknown compressed tree node');\n        }\n        const node = this.model.getNode(compressedNode);\n        const compressedParentNode = this.model.getParentNodeLocation(compressedNode);\n        const parent = this.model.getNode(compressedParentNode);\n        const decompressedElement = decompress(node);\n        const splicedElement = splice(decompressedElement, element, children);\n        const recompressedElement = (this.enabled ? compress : noCompress)(splicedElement);\n        const parentChildren = parent.children\n            .map(child => child === node ? recompressedElement : child);\n        this._setChildren(parent.element, parentChildren, {\n            diffIdentityProvider,\n            diffDepth: node.depth - parent.depth,\n        });\n    }\n    setCompressionEnabled(enabled) {\n        if (enabled === this.enabled) {\n            return;\n        }\n        this.enabled = enabled;\n        const root = this.model.getNode();\n        const rootChildren = root.children;\n        const decompressedRootChildren = Iterable.map(rootChildren, decompress);\n        const recompressedRootChildren = Iterable.map(decompressedRootChildren, enabled ? compress : noCompress);\n        // it should be safe to always use deep diff mode here if an identity\n        // provider is available, since we know the raw nodes are unchanged.\n        this._setChildren(null, recompressedRootChildren, {\n            diffIdentityProvider: this.identityProvider,\n            diffDepth: Infinity,\n        });\n    }\n    _setChildren(node, children, options) {\n        const insertedElements = new Set();\n        const onDidCreateNode = (node) => {\n            for (const element of node.element.elements) {\n                insertedElements.add(element);\n                this.nodes.set(element, node.element);\n            }\n        };\n        const onDidDeleteNode = (node) => {\n            for (const element of node.element.elements) {\n                if (!insertedElements.has(element)) {\n                    this.nodes.delete(element);\n                }\n            }\n        };\n        this.model.setChildren(node, children, Object.assign(Object.assign({}, options), { onDidCreateNode, onDidDeleteNode }));\n    }\n    has(element) {\n        return this.nodes.has(element);\n    }\n    getListIndex(location) {\n        const node = this.getCompressedNode(location);\n        return this.model.getListIndex(node);\n    }\n    getListRenderCount(location) {\n        const node = this.getCompressedNode(location);\n        return this.model.getListRenderCount(node);\n    }\n    getNode(location) {\n        if (typeof location === 'undefined') {\n            return this.model.getNode();\n        }\n        const node = this.getCompressedNode(location);\n        return this.model.getNode(node);\n    }\n    // TODO: review this\n    getNodeLocation(node) {\n        const compressedNode = this.model.getNodeLocation(node);\n        if (compressedNode === null) {\n            return null;\n        }\n        return compressedNode.elements[compressedNode.elements.length - 1];\n    }\n    // TODO: review this\n    getParentNodeLocation(location) {\n        const compressedNode = this.getCompressedNode(location);\n        const parentNode = this.model.getParentNodeLocation(compressedNode);\n        if (parentNode === null) {\n            return null;\n        }\n        return parentNode.elements[parentNode.elements.length - 1];\n    }\n    getFirstElementChild(location) {\n        const compressedNode = this.getCompressedNode(location);\n        return this.model.getFirstElementChild(compressedNode);\n    }\n    isCollapsible(location) {\n        const compressedNode = this.getCompressedNode(location);\n        return this.model.isCollapsible(compressedNode);\n    }\n    setCollapsible(location, collapsible) {\n        const compressedNode = this.getCompressedNode(location);\n        return this.model.setCollapsible(compressedNode, collapsible);\n    }\n    isCollapsed(location) {\n        const compressedNode = this.getCompressedNode(location);\n        return this.model.isCollapsed(compressedNode);\n    }\n    setCollapsed(location, collapsed, recursive) {\n        const compressedNode = this.getCompressedNode(location);\n        return this.model.setCollapsed(compressedNode, collapsed, recursive);\n    }\n    expandTo(location) {\n        const compressedNode = this.getCompressedNode(location);\n        this.model.expandTo(compressedNode);\n    }\n    rerender(location) {\n        const compressedNode = this.getCompressedNode(location);\n        this.model.rerender(compressedNode);\n    }\n    refilter() {\n        this.model.refilter();\n    }\n    getCompressedNode(element) {\n        if (element === null) {\n            return null;\n        }\n        const node = this.nodes.get(element);\n        if (!node) {\n            throw new TreeError(this.user, `Tree element not found: ${element}`);\n        }\n        return node;\n    }\n}\nexport const DefaultElementMapper = elements => elements[elements.length - 1];\nclass CompressedTreeNodeWrapper {\n    get element() { return this.node.element === null ? null : this.unwrapper(this.node.element); }\n    get children() { return this.node.children.map(node => new CompressedTreeNodeWrapper(this.unwrapper, node)); }\n    get depth() { return this.node.depth; }\n    get visibleChildrenCount() { return this.node.visibleChildrenCount; }\n    get visibleChildIndex() { return this.node.visibleChildIndex; }\n    get collapsible() { return this.node.collapsible; }\n    get collapsed() { return this.node.collapsed; }\n    get visible() { return this.node.visible; }\n    get filterData() { return this.node.filterData; }\n    constructor(unwrapper, node) {\n        this.unwrapper = unwrapper;\n        this.node = node;\n    }\n}\nfunction mapList(nodeMapper, list) {\n    return {\n        splice(start, deleteCount, toInsert) {\n            list.splice(start, deleteCount, toInsert.map(node => nodeMapper.map(node)));\n        },\n        updateElementHeight(index, height) {\n            list.updateElementHeight(index, height);\n        }\n    };\n}\nfunction mapOptions(compressedNodeUnwrapper, options) {\n    return Object.assign(Object.assign({}, options), { identityProvider: options.identityProvider && {\n            getId(node) {\n                return options.identityProvider.getId(compressedNodeUnwrapper(node));\n            }\n        }, sorter: options.sorter && {\n            compare(node, otherNode) {\n                return options.sorter.compare(node.elements[0], otherNode.elements[0]);\n            }\n        }, filter: options.filter && {\n            filter(node, parentVisibility) {\n                return options.filter.filter(compressedNodeUnwrapper(node), parentVisibility);\n            }\n        } });\n}\nexport class CompressibleObjectTreeModel {\n    get onDidSplice() {\n        return Event.map(this.model.onDidSplice, ({ insertedNodes, deletedNodes }) => ({\n            insertedNodes: insertedNodes.map(node => this.nodeMapper.map(node)),\n            deletedNodes: deletedNodes.map(node => this.nodeMapper.map(node)),\n        }));\n    }\n    get onDidChangeCollapseState() {\n        return Event.map(this.model.onDidChangeCollapseState, ({ node, deep }) => ({\n            node: this.nodeMapper.map(node),\n            deep\n        }));\n    }\n    get onDidChangeRenderNodeCount() {\n        return Event.map(this.model.onDidChangeRenderNodeCount, node => this.nodeMapper.map(node));\n    }\n    constructor(user, list, options = {}) {\n        this.rootRef = null;\n        this.elementMapper = options.elementMapper || DefaultElementMapper;\n        const compressedNodeUnwrapper = node => this.elementMapper(node.elements);\n        this.nodeMapper = new WeakMapper(node => new CompressedTreeNodeWrapper(compressedNodeUnwrapper, node));\n        this.model = new CompressedObjectTreeModel(user, mapList(this.nodeMapper, list), mapOptions(compressedNodeUnwrapper, options));\n    }\n    setChildren(element, children = Iterable.empty(), options = {}) {\n        this.model.setChildren(element, children, options);\n    }\n    setCompressionEnabled(enabled) {\n        this.model.setCompressionEnabled(enabled);\n    }\n    has(location) {\n        return this.model.has(location);\n    }\n    getListIndex(location) {\n        return this.model.getListIndex(location);\n    }\n    getListRenderCount(location) {\n        return this.model.getListRenderCount(location);\n    }\n    getNode(location) {\n        return this.nodeMapper.map(this.model.getNode(location));\n    }\n    getNodeLocation(node) {\n        return node.element;\n    }\n    getParentNodeLocation(location) {\n        return this.model.getParentNodeLocation(location);\n    }\n    getFirstElementChild(location) {\n        const result = this.model.getFirstElementChild(location);\n        if (result === null || typeof result === 'undefined') {\n            return result;\n        }\n        return this.elementMapper(result.elements);\n    }\n    isCollapsible(location) {\n        return this.model.isCollapsible(location);\n    }\n    setCollapsible(location, collapsed) {\n        return this.model.setCollapsible(location, collapsed);\n    }\n    isCollapsed(location) {\n        return this.model.isCollapsed(location);\n    }\n    setCollapsed(location, collapsed, recursive) {\n        return this.model.setCollapsed(location, collapsed, recursive);\n    }\n    expandTo(location) {\n        return this.model.expandTo(location);\n    }\n    rerender(location) {\n        return this.model.rerender(location);\n    }\n    refilter() {\n        return this.model.refilter();\n    }\n    getCompressedTreeNode(location = null) {\n        return this.model.getNode(location);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}