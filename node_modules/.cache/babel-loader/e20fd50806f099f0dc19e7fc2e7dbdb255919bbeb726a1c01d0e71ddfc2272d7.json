{"ast":null,"code":"import { onUnexpectedError } from './errors.js';\nimport { once as onceFn } from './functional.js';\nimport { combinedDisposable, Disposable, DisposableStore, SafeDisposable, toDisposable } from './lifecycle.js';\nimport { LinkedList } from './linkedList.js';\nimport { StopWatch } from './stopwatch.js';\n// -----------------------------------------------------------------------------------------------------------------------\n// Uncomment the next line to print warnings whenever an emitter with listeners is disposed. That is a sign of code smell.\n// -----------------------------------------------------------------------------------------------------------------------\nconst _enableDisposeWithListenerWarning = false;\n// _enableDisposeWithListenerWarning = Boolean(\"TRUE\"); // causes a linter warning so that it cannot be pushed\n// -----------------------------------------------------------------------------------------------------------------------\n// Uncomment the next line to print warnings whenever a snapshotted event is used repeatedly without cleanup.\n// See https://github.com/microsoft/vscode/issues/142851\n// -----------------------------------------------------------------------------------------------------------------------\nconst _enableSnapshotPotentialLeakWarning = false;\nexport var Event;\n(function (Event) {\n  Event.None = () => Disposable.None;\n  function _addLeakageTraceLogic(options) {\n    if (_enableSnapshotPotentialLeakWarning) {\n      const {\n        onDidAddListener: origListenerDidAdd\n      } = options;\n      const stack = Stacktrace.create();\n      let count = 0;\n      options.onDidAddListener = () => {\n        if (++count === 2) {\n          console.warn('snapshotted emitter LIKELY used public and SHOULD HAVE BEEN created with DisposableStore. snapshotted here');\n          stack.print();\n        }\n        origListenerDidAdd === null || origListenerDidAdd === void 0 ? void 0 : origListenerDidAdd();\n      };\n    }\n  }\n  /**\n   * Given an event, returns another event which debounces calls and defers the listeners to a later task via a shared\n   * `setTimeout`. The event is converted into a signal (`Event<void>`) to avoid additional object creation as a\n   * result of merging events and to try prevent race conditions that could arise when using related deferred and\n   * non-deferred events.\n   *\n   * This is useful for deferring non-critical work (eg. general UI updates) to ensure it does not block critical work\n   * (eg. latency of keypress to text rendered).\n   *\n   * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n   * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n   * returned event causes this utility to leak a listener on the original event.\n   *\n   * @param event The event source for the new event.\n   * @param disposable A disposable store to add the new EventEmitter to.\n   */\n  function defer(event, disposable) {\n    return debounce(event, () => void 0, 0, undefined, true, undefined, disposable);\n  }\n  Event.defer = defer;\n  /**\n   * Given an event, returns another event which only fires once.\n   *\n   * @param event The event source for the new event.\n   */\n  function once(event) {\n    return function (listener) {\n      let thisArgs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      let disposables = arguments.length > 2 ? arguments[2] : undefined;\n      // we need this, in case the event fires during the listener call\n      let didFire = false;\n      let result = undefined;\n      result = event(e => {\n        if (didFire) {\n          return;\n        } else if (result) {\n          result.dispose();\n        } else {\n          didFire = true;\n        }\n        return listener.call(thisArgs, e);\n      }, null, disposables);\n      if (didFire) {\n        result.dispose();\n      }\n      return result;\n    };\n  }\n  Event.once = once;\n  /**\n   * Maps an event of one type into an event of another type using a mapping function, similar to how\n   * `Array.prototype.map` works.\n   *\n   * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n   * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n   * returned event causes this utility to leak a listener on the original event.\n   *\n   * @param event The event source for the new event.\n   * @param map The mapping function.\n   * @param disposable A disposable store to add the new EventEmitter to.\n   */\n  function map(event, map, disposable) {\n    return snapshot(function (listener) {\n      let thisArgs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      let disposables = arguments.length > 2 ? arguments[2] : undefined;\n      return event(i => listener.call(thisArgs, map(i)), null, disposables);\n    }, disposable);\n  }\n  Event.map = map;\n  /**\n   * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n   * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n   * returned event causes this utility to leak a listener on the original event.\n   */\n  function forEach(event, each, disposable) {\n    return snapshot(function (listener) {\n      let thisArgs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      let disposables = arguments.length > 2 ? arguments[2] : undefined;\n      return event(i => {\n        each(i);\n        listener.call(thisArgs, i);\n      }, null, disposables);\n    }, disposable);\n  }\n  Event.forEach = forEach;\n  function filter(event, filter, disposable) {\n    return snapshot(function (listener) {\n      let thisArgs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      let disposables = arguments.length > 2 ? arguments[2] : undefined;\n      return event(e => filter(e) && listener.call(thisArgs, e), null, disposables);\n    }, disposable);\n  }\n  Event.filter = filter;\n  /**\n   * Given an event, returns the same event but typed as `Event<void>`.\n   */\n  function signal(event) {\n    return event;\n  }\n  Event.signal = signal;\n  function any() {\n    for (var _len = arguments.length, events = new Array(_len), _key = 0; _key < _len; _key++) {\n      events[_key] = arguments[_key];\n    }\n    return function (listener) {\n      let thisArgs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      let disposables = arguments.length > 2 ? arguments[2] : undefined;\n      return combinedDisposable(...events.map(event => event(e => listener.call(thisArgs, e), null, disposables)));\n    };\n  }\n  Event.any = any;\n  /**\n   * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n   * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n   * returned event causes this utility to leak a listener on the original event.\n   */\n  function reduce(event, merge, initial, disposable) {\n    let output = initial;\n    return map(event, e => {\n      output = merge(output, e);\n      return output;\n    }, disposable);\n  }\n  Event.reduce = reduce;\n  function snapshot(event, disposable) {\n    let listener;\n    const options = {\n      onWillAddFirstListener() {\n        listener = event(emitter.fire, emitter);\n      },\n      onDidRemoveLastListener() {\n        listener === null || listener === void 0 ? void 0 : listener.dispose();\n      }\n    };\n    if (!disposable) {\n      _addLeakageTraceLogic(options);\n    }\n    const emitter = new Emitter(options);\n    disposable === null || disposable === void 0 ? void 0 : disposable.add(emitter);\n    return emitter.event;\n  }\n  function debounce(event, merge) {\n    let delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 100;\n    let leading = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    let flushOnListenerRemove = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    let leakWarningThreshold = arguments.length > 5 ? arguments[5] : undefined;\n    let disposable = arguments.length > 6 ? arguments[6] : undefined;\n    let subscription;\n    let output = undefined;\n    let handle = undefined;\n    let numDebouncedCalls = 0;\n    let doFire;\n    const options = {\n      leakWarningThreshold,\n      onWillAddFirstListener() {\n        subscription = event(cur => {\n          numDebouncedCalls++;\n          output = merge(output, cur);\n          if (leading && !handle) {\n            emitter.fire(output);\n            output = undefined;\n          }\n          doFire = () => {\n            const _output = output;\n            output = undefined;\n            handle = undefined;\n            if (!leading || numDebouncedCalls > 1) {\n              emitter.fire(_output);\n            }\n            numDebouncedCalls = 0;\n          };\n          if (typeof delay === 'number') {\n            clearTimeout(handle);\n            handle = setTimeout(doFire, delay);\n          } else {\n            if (handle === undefined) {\n              handle = 0;\n              queueMicrotask(doFire);\n            }\n          }\n        });\n      },\n      onWillRemoveListener() {\n        if (flushOnListenerRemove && numDebouncedCalls > 0) {\n          doFire === null || doFire === void 0 ? void 0 : doFire();\n        }\n      },\n      onDidRemoveLastListener() {\n        doFire = undefined;\n        subscription.dispose();\n      }\n    };\n    if (!disposable) {\n      _addLeakageTraceLogic(options);\n    }\n    const emitter = new Emitter(options);\n    disposable === null || disposable === void 0 ? void 0 : disposable.add(emitter);\n    return emitter.event;\n  }\n  Event.debounce = debounce;\n  /**\n   * Debounces an event, firing after some delay (default=0) with an array of all event original objects.\n   *\n   * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n   * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n   * returned event causes this utility to leak a listener on the original event.\n   */\n  function accumulate(event) {\n    let delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let disposable = arguments.length > 2 ? arguments[2] : undefined;\n    return Event.debounce(event, (last, e) => {\n      if (!last) {\n        return [e];\n      }\n      last.push(e);\n      return last;\n    }, delay, undefined, true, undefined, disposable);\n  }\n  Event.accumulate = accumulate;\n  /**\n   * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n   * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n   * returned event causes this utility to leak a listener on the original event.\n   */\n  function latch(event) {\n    let equals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (a, b) => a === b;\n    let disposable = arguments.length > 2 ? arguments[2] : undefined;\n    let firstCall = true;\n    let cache;\n    return filter(event, value => {\n      const shouldEmit = firstCall || !equals(value, cache);\n      firstCall = false;\n      cache = value;\n      return shouldEmit;\n    }, disposable);\n  }\n  Event.latch = latch;\n  /**\n   * Splits an event whose parameter is a union type into 2 separate events for each type in the union.\n   *\n   * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n   * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n   * returned event causes this utility to leak a listener on the original event.\n   *\n   * @example\n   * ```\n   * const event = new EventEmitter<number | undefined>().event;\n   * const [numberEvent, undefinedEvent] = Event.split(event, isUndefined);\n   * ```\n   *\n   * @param event The event source for the new event.\n   * @param isT A function that determines what event is of the first type.\n   * @param disposable A disposable store to add the new EventEmitter to.\n   */\n  function split(event, isT, disposable) {\n    return [Event.filter(event, isT, disposable), Event.filter(event, e => !isT(e), disposable)];\n  }\n  Event.split = split;\n  /**\n   * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n   * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n   * returned event causes this utility to leak a listener on the original event.\n   */\n  function buffer(event) {\n    let flushAfterTimeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let _buffer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    let buffer = _buffer.slice();\n    let listener = event(e => {\n      if (buffer) {\n        buffer.push(e);\n      } else {\n        emitter.fire(e);\n      }\n    });\n    const flush = () => {\n      buffer === null || buffer === void 0 ? void 0 : buffer.forEach(e => emitter.fire(e));\n      buffer = null;\n    };\n    const emitter = new Emitter({\n      onWillAddFirstListener() {\n        if (!listener) {\n          listener = event(e => emitter.fire(e));\n        }\n      },\n      onDidAddFirstListener() {\n        if (buffer) {\n          if (flushAfterTimeout) {\n            setTimeout(flush);\n          } else {\n            flush();\n          }\n        }\n      },\n      onDidRemoveLastListener() {\n        if (listener) {\n          listener.dispose();\n        }\n        listener = null;\n      }\n    });\n    return emitter.event;\n  }\n  Event.buffer = buffer;\n  class ChainableEvent {\n    constructor(event) {\n      this.event = event;\n      this.disposables = new DisposableStore();\n    }\n    map(fn) {\n      return new ChainableEvent(map(this.event, fn, this.disposables));\n    }\n    forEach(fn) {\n      return new ChainableEvent(forEach(this.event, fn, this.disposables));\n    }\n    filter(fn) {\n      return new ChainableEvent(filter(this.event, fn, this.disposables));\n    }\n    reduce(merge, initial) {\n      return new ChainableEvent(reduce(this.event, merge, initial, this.disposables));\n    }\n    latch() {\n      return new ChainableEvent(latch(this.event, undefined, this.disposables));\n    }\n    debounce(merge) {\n      let delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;\n      let leading = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      let flushOnListenerRemove = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      let leakWarningThreshold = arguments.length > 4 ? arguments[4] : undefined;\n      return new ChainableEvent(debounce(this.event, merge, delay, leading, flushOnListenerRemove, leakWarningThreshold, this.disposables));\n    }\n    on(listener, thisArgs, disposables) {\n      return this.event(listener, thisArgs, disposables);\n    }\n    once(listener, thisArgs, disposables) {\n      return once(this.event)(listener, thisArgs, disposables);\n    }\n    dispose() {\n      this.disposables.dispose();\n    }\n  }\n  function chain(event) {\n    return new ChainableEvent(event);\n  }\n  Event.chain = chain;\n  function fromNodeEventEmitter(emitter, eventName) {\n    let map = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : id => id;\n    const fn = function () {\n      return result.fire(map(...arguments));\n    };\n    const onFirstListenerAdd = () => emitter.on(eventName, fn);\n    const onLastListenerRemove = () => emitter.removeListener(eventName, fn);\n    const result = new Emitter({\n      onWillAddFirstListener: onFirstListenerAdd,\n      onDidRemoveLastListener: onLastListenerRemove\n    });\n    return result.event;\n  }\n  Event.fromNodeEventEmitter = fromNodeEventEmitter;\n  function fromDOMEventEmitter(emitter, eventName) {\n    let map = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : id => id;\n    const fn = function () {\n      return result.fire(map(...arguments));\n    };\n    const onFirstListenerAdd = () => emitter.addEventListener(eventName, fn);\n    const onLastListenerRemove = () => emitter.removeEventListener(eventName, fn);\n    const result = new Emitter({\n      onWillAddFirstListener: onFirstListenerAdd,\n      onDidRemoveLastListener: onLastListenerRemove\n    });\n    return result.event;\n  }\n  Event.fromDOMEventEmitter = fromDOMEventEmitter;\n  function toPromise(event) {\n    return new Promise(resolve => once(event)(resolve));\n  }\n  Event.toPromise = toPromise;\n  function runAndSubscribe(event, handler) {\n    handler(undefined);\n    return event(e => handler(e));\n  }\n  Event.runAndSubscribe = runAndSubscribe;\n  function runAndSubscribeWithStore(event, handler) {\n    let store = null;\n    function run(e) {\n      store === null || store === void 0 ? void 0 : store.dispose();\n      store = new DisposableStore();\n      handler(e, store);\n    }\n    run(undefined);\n    const disposable = event(e => run(e));\n    return toDisposable(() => {\n      disposable.dispose();\n      store === null || store === void 0 ? void 0 : store.dispose();\n    });\n  }\n  Event.runAndSubscribeWithStore = runAndSubscribeWithStore;\n  class EmitterObserver {\n    constructor(obs, store) {\n      this.obs = obs;\n      this._counter = 0;\n      this._hasChanged = false;\n      const options = {\n        onWillAddFirstListener: () => {\n          obs.addObserver(this);\n        },\n        onDidRemoveLastListener: () => {\n          obs.removeObserver(this);\n        }\n      };\n      if (!store) {\n        _addLeakageTraceLogic(options);\n      }\n      this.emitter = new Emitter(options);\n      if (store) {\n        store.add(this.emitter);\n      }\n    }\n    beginUpdate(_observable) {\n      // console.assert(_observable === this.obs);\n      this._counter++;\n    }\n    handleChange(_observable, _change) {\n      this._hasChanged = true;\n    }\n    endUpdate(_observable) {\n      if (--this._counter === 0) {\n        if (this._hasChanged) {\n          this._hasChanged = false;\n          this.emitter.fire(this.obs.get());\n        }\n      }\n    }\n  }\n  function fromObservable(obs, store) {\n    const observer = new EmitterObserver(obs, store);\n    return observer.emitter.event;\n  }\n  Event.fromObservable = fromObservable;\n})(Event || (Event = {}));\nclass EventProfiling {\n  constructor(name) {\n    this.listenerCount = 0;\n    this.invocationCount = 0;\n    this.elapsedOverall = 0;\n    this.durations = [];\n    this.name = `${name}_${EventProfiling._idPool++}`;\n    EventProfiling.all.add(this);\n  }\n  start(listenerCount) {\n    this._stopWatch = new StopWatch(true);\n    this.listenerCount = listenerCount;\n  }\n  stop() {\n    if (this._stopWatch) {\n      const elapsed = this._stopWatch.elapsed();\n      this.durations.push(elapsed);\n      this.elapsedOverall += elapsed;\n      this.invocationCount += 1;\n      this._stopWatch = undefined;\n    }\n  }\n}\nEventProfiling.all = new Set();\nEventProfiling._idPool = 0;\nexport { EventProfiling };\nlet _globalLeakWarningThreshold = -1;\nclass LeakageMonitor {\n  constructor(threshold) {\n    let name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Math.random().toString(18).slice(2, 5);\n    this.threshold = threshold;\n    this.name = name;\n    this._warnCountdown = 0;\n  }\n  dispose() {\n    var _a;\n    (_a = this._stacks) === null || _a === void 0 ? void 0 : _a.clear();\n  }\n  check(stack, listenerCount) {\n    const threshold = this.threshold;\n    if (threshold <= 0 || listenerCount < threshold) {\n      return undefined;\n    }\n    if (!this._stacks) {\n      this._stacks = new Map();\n    }\n    const count = this._stacks.get(stack.value) || 0;\n    this._stacks.set(stack.value, count + 1);\n    this._warnCountdown -= 1;\n    if (this._warnCountdown <= 0) {\n      // only warn on first exceed and then every time the limit\n      // is exceeded by 50% again\n      this._warnCountdown = threshold * 0.5;\n      // find most frequent listener and print warning\n      let topStack;\n      let topCount = 0;\n      for (const [stack, count] of this._stacks) {\n        if (!topStack || topCount < count) {\n          topStack = stack;\n          topCount = count;\n        }\n      }\n      console.warn(`[${this.name}] potential listener LEAK detected, having ${listenerCount} listeners already. MOST frequent listener (${topCount}):`);\n      console.warn(topStack);\n    }\n    return () => {\n      const count = this._stacks.get(stack.value) || 0;\n      this._stacks.set(stack.value, count - 1);\n    };\n  }\n}\nclass Stacktrace {\n  static create() {\n    var _a;\n    return new Stacktrace((_a = new Error().stack) !== null && _a !== void 0 ? _a : '');\n  }\n  constructor(value) {\n    this.value = value;\n  }\n  print() {\n    console.warn(this.value.split('\\n').slice(2).join('\\n'));\n  }\n}\nclass Listener {\n  constructor(callback, callbackThis, stack) {\n    this.callback = callback;\n    this.callbackThis = callbackThis;\n    this.stack = stack;\n    this.subscription = new SafeDisposable();\n  }\n  invoke(e) {\n    this.callback.call(this.callbackThis, e);\n  }\n}\n/**\n * The Emitter can be used to expose an Event to the public\n * to fire it from the insides.\n * Sample:\n    class Document {\n\n        private readonly _onDidChange = new Emitter<(value:string)=>any>();\n\n        public onDidChange = this._onDidChange.event;\n\n        // getter-style\n        // get onDidChange(): Event<(value:string)=>any> {\n        // \treturn this._onDidChange.event;\n        // }\n\n        private _doIt() {\n            //...\n            this._onDidChange.fire(value);\n        }\n    }\n */\nexport class Emitter {\n  constructor(options) {\n    var _a, _b, _c, _d, _e;\n    this._disposed = false;\n    this._options = options;\n    this._leakageMon = _globalLeakWarningThreshold > 0 || ((_a = this._options) === null || _a === void 0 ? void 0 : _a.leakWarningThreshold) ? new LeakageMonitor((_c = (_b = this._options) === null || _b === void 0 ? void 0 : _b.leakWarningThreshold) !== null && _c !== void 0 ? _c : _globalLeakWarningThreshold) : undefined;\n    this._perfMon = ((_d = this._options) === null || _d === void 0 ? void 0 : _d._profName) ? new EventProfiling(this._options._profName) : undefined;\n    this._deliveryQueue = (_e = this._options) === null || _e === void 0 ? void 0 : _e.deliveryQueue;\n  }\n  dispose() {\n    var _a, _b, _c, _d;\n    if (!this._disposed) {\n      this._disposed = true;\n      // It is bad to have listeners at the time of disposing an emitter, it is worst to have listeners keep the emitter\n      // alive via the reference that's embedded in their disposables. Therefore we loop over all remaining listeners and\n      // unset their subscriptions/disposables. Looping and blaming remaining listeners is done on next tick because the\n      // the following programming pattern is very popular:\n      //\n      // const someModel = this._disposables.add(new ModelObject()); // (1) create and register model\n      // this._disposables.add(someModel.onDidChange(() => { ... }); // (2) subscribe and register model-event listener\n      // ...later...\n      // this._disposables.dispose(); disposes (1) then (2): don't warn after (1) but after the \"overall dispose\" is done\n      if (this._listeners) {\n        if (_enableDisposeWithListenerWarning) {\n          const listeners = Array.from(this._listeners);\n          queueMicrotask(() => {\n            var _a;\n            for (const listener of listeners) {\n              if (listener.subscription.isset()) {\n                listener.subscription.unset();\n                (_a = listener.stack) === null || _a === void 0 ? void 0 : _a.print();\n              }\n            }\n          });\n        }\n        this._listeners.clear();\n      }\n      (_a = this._deliveryQueue) === null || _a === void 0 ? void 0 : _a.clear(this);\n      (_c = (_b = this._options) === null || _b === void 0 ? void 0 : _b.onDidRemoveLastListener) === null || _c === void 0 ? void 0 : _c.call(_b);\n      (_d = this._leakageMon) === null || _d === void 0 ? void 0 : _d.dispose();\n    }\n  }\n  /**\n   * For the public to allow to subscribe\n   * to events from this Emitter\n   */\n  get event() {\n    if (!this._event) {\n      this._event = (callback, thisArgs, disposables) => {\n        var _a, _b, _c;\n        if (!this._listeners) {\n          this._listeners = new LinkedList();\n        }\n        if (this._leakageMon && this._listeners.size > this._leakageMon.threshold * 3) {\n          console.warn(`[${this._leakageMon.name}] REFUSES to accept new listeners because it exceeded its threshold by far`);\n          return Disposable.None;\n        }\n        const firstListener = this._listeners.isEmpty();\n        if (firstListener && ((_a = this._options) === null || _a === void 0 ? void 0 : _a.onWillAddFirstListener)) {\n          this._options.onWillAddFirstListener(this);\n        }\n        let removeMonitor;\n        let stack;\n        if (this._leakageMon && this._listeners.size >= Math.ceil(this._leakageMon.threshold * 0.2)) {\n          // check and record this emitter for potential leakage\n          stack = Stacktrace.create();\n          removeMonitor = this._leakageMon.check(stack, this._listeners.size + 1);\n        }\n        if (_enableDisposeWithListenerWarning) {\n          stack = stack !== null && stack !== void 0 ? stack : Stacktrace.create();\n        }\n        const listener = new Listener(callback, thisArgs, stack);\n        const removeListener = this._listeners.push(listener);\n        if (firstListener && ((_b = this._options) === null || _b === void 0 ? void 0 : _b.onDidAddFirstListener)) {\n          this._options.onDidAddFirstListener(this);\n        }\n        if ((_c = this._options) === null || _c === void 0 ? void 0 : _c.onDidAddListener) {\n          this._options.onDidAddListener(this, callback, thisArgs);\n        }\n        const result = listener.subscription.set(() => {\n          var _a, _b;\n          removeMonitor === null || removeMonitor === void 0 ? void 0 : removeMonitor();\n          if (!this._disposed) {\n            (_b = (_a = this._options) === null || _a === void 0 ? void 0 : _a.onWillRemoveListener) === null || _b === void 0 ? void 0 : _b.call(_a, this);\n            removeListener();\n            if (this._options && this._options.onDidRemoveLastListener) {\n              const hasListeners = this._listeners && !this._listeners.isEmpty();\n              if (!hasListeners) {\n                this._options.onDidRemoveLastListener(this);\n              }\n            }\n          }\n        });\n        if (disposables instanceof DisposableStore) {\n          disposables.add(result);\n        } else if (Array.isArray(disposables)) {\n          disposables.push(result);\n        }\n        return result;\n      };\n    }\n    return this._event;\n  }\n  /**\n   * To be kept private to fire an event to\n   * subscribers\n   */\n  fire(event) {\n    var _a, _b;\n    if (this._listeners) {\n      // put all [listener,event]-pairs into delivery queue\n      // then emit all event. an inner/nested event might be\n      // the driver of this\n      if (!this._deliveryQueue) {\n        this._deliveryQueue = new PrivateEventDeliveryQueue();\n      }\n      for (const listener of this._listeners) {\n        this._deliveryQueue.push(this, listener, event);\n      }\n      // start/stop performance insight collection\n      (_a = this._perfMon) === null || _a === void 0 ? void 0 : _a.start(this._deliveryQueue.size);\n      this._deliveryQueue.deliver();\n      (_b = this._perfMon) === null || _b === void 0 ? void 0 : _b.stop();\n    }\n  }\n  hasListeners() {\n    if (!this._listeners) {\n      return false;\n    }\n    return !this._listeners.isEmpty();\n  }\n}\nexport class EventDeliveryQueue {\n  constructor() {\n    this._queue = new LinkedList();\n  }\n  get size() {\n    return this._queue.size;\n  }\n  push(emitter, listener, event) {\n    this._queue.push(new EventDeliveryQueueElement(emitter, listener, event));\n  }\n  clear(emitter) {\n    const newQueue = new LinkedList();\n    for (const element of this._queue) {\n      if (element.emitter !== emitter) {\n        newQueue.push(element);\n      }\n    }\n    this._queue = newQueue;\n  }\n  deliver() {\n    while (this._queue.size > 0) {\n      const element = this._queue.shift();\n      try {\n        element.listener.invoke(element.event);\n      } catch (e) {\n        onUnexpectedError(e);\n      }\n    }\n  }\n}\n/**\n * An `EventDeliveryQueue` that is guaranteed to be used by a single `Emitter`.\n */\nclass PrivateEventDeliveryQueue extends EventDeliveryQueue {\n  clear(emitter) {\n    // Here we can just clear the entire linked list because\n    // all elements are guaranteed to belong to this emitter\n    this._queue.clear();\n  }\n}\nclass EventDeliveryQueueElement {\n  constructor(emitter, listener, event) {\n    this.emitter = emitter;\n    this.listener = listener;\n    this.event = event;\n  }\n}\nexport class PauseableEmitter extends Emitter {\n  constructor(options) {\n    super(options);\n    this._isPaused = 0;\n    this._eventQueue = new LinkedList();\n    this._mergeFn = options === null || options === void 0 ? void 0 : options.merge;\n  }\n  pause() {\n    this._isPaused++;\n  }\n  resume() {\n    if (this._isPaused !== 0 && --this._isPaused === 0) {\n      if (this._mergeFn) {\n        // use the merge function to create a single composite\n        // event. make a copy in case firing pauses this emitter\n        if (this._eventQueue.size > 0) {\n          const events = Array.from(this._eventQueue);\n          this._eventQueue.clear();\n          super.fire(this._mergeFn(events));\n        }\n      } else {\n        // no merging, fire each event individually and test\n        // that this emitter isn't paused halfway through\n        while (!this._isPaused && this._eventQueue.size !== 0) {\n          super.fire(this._eventQueue.shift());\n        }\n      }\n    }\n  }\n  fire(event) {\n    if (this._listeners) {\n      if (this._isPaused !== 0) {\n        this._eventQueue.push(event);\n      } else {\n        super.fire(event);\n      }\n    }\n  }\n}\nexport class DebounceEmitter extends PauseableEmitter {\n  constructor(options) {\n    var _a;\n    super(options);\n    this._delay = (_a = options.delay) !== null && _a !== void 0 ? _a : 100;\n  }\n  fire(event) {\n    if (!this._handle) {\n      this.pause();\n      this._handle = setTimeout(() => {\n        this._handle = undefined;\n        this.resume();\n      }, this._delay);\n    }\n    super.fire(event);\n  }\n}\n/**\n * An emitter which queue all events and then process them at the\n * end of the event loop.\n */\nexport class MicrotaskEmitter extends Emitter {\n  constructor(options) {\n    super(options);\n    this._queuedEvents = [];\n    this._mergeFn = options === null || options === void 0 ? void 0 : options.merge;\n  }\n  fire(event) {\n    if (!this.hasListeners()) {\n      return;\n    }\n    this._queuedEvents.push(event);\n    if (this._queuedEvents.length === 1) {\n      queueMicrotask(() => {\n        if (this._mergeFn) {\n          super.fire(this._mergeFn(this._queuedEvents));\n        } else {\n          this._queuedEvents.forEach(e => super.fire(e));\n        }\n        this._queuedEvents = [];\n      });\n    }\n  }\n}\nexport class EventMultiplexer {\n  constructor() {\n    this.hasListeners = false;\n    this.events = [];\n    this.emitter = new Emitter({\n      onWillAddFirstListener: () => this.onFirstListenerAdd(),\n      onDidRemoveLastListener: () => this.onLastListenerRemove()\n    });\n  }\n  get event() {\n    return this.emitter.event;\n  }\n  add(event) {\n    const e = {\n      event: event,\n      listener: null\n    };\n    this.events.push(e);\n    if (this.hasListeners) {\n      this.hook(e);\n    }\n    const dispose = () => {\n      if (this.hasListeners) {\n        this.unhook(e);\n      }\n      const idx = this.events.indexOf(e);\n      this.events.splice(idx, 1);\n    };\n    return toDisposable(onceFn(dispose));\n  }\n  onFirstListenerAdd() {\n    this.hasListeners = true;\n    this.events.forEach(e => this.hook(e));\n  }\n  onLastListenerRemove() {\n    this.hasListeners = false;\n    this.events.forEach(e => this.unhook(e));\n  }\n  hook(e) {\n    e.listener = e.event(r => this.emitter.fire(r));\n  }\n  unhook(e) {\n    if (e.listener) {\n      e.listener.dispose();\n    }\n    e.listener = null;\n  }\n  dispose() {\n    this.emitter.dispose();\n  }\n}\n/**\n * The EventBufferer is useful in situations in which you want\n * to delay firing your events during some code.\n * You can wrap that code and be sure that the event will not\n * be fired during that wrap.\n *\n * ```\n * const emitter: Emitter;\n * const delayer = new EventDelayer();\n * const delayedEvent = delayer.wrapEvent(emitter.event);\n *\n * delayedEvent(console.log);\n *\n * delayer.bufferEvents(() => {\n *   emitter.fire(); // event will not be fired yet\n * });\n *\n * // event will only be fired at this point\n * ```\n */\nexport class EventBufferer {\n  constructor() {\n    this.buffers = [];\n  }\n  wrapEvent(event) {\n    return (listener, thisArgs, disposables) => {\n      return event(i => {\n        const buffer = this.buffers[this.buffers.length - 1];\n        if (buffer) {\n          buffer.push(() => listener.call(thisArgs, i));\n        } else {\n          listener.call(thisArgs, i);\n        }\n      }, undefined, disposables);\n    };\n  }\n  bufferEvents(fn) {\n    const buffer = [];\n    this.buffers.push(buffer);\n    const r = fn();\n    this.buffers.pop();\n    buffer.forEach(flush => flush());\n    return r;\n  }\n}\n/**\n * A Relay is an event forwarder which functions as a replugabble event pipe.\n * Once created, you can connect an input event to it and it will simply forward\n * events from that input event through its own `event` property. The `input`\n * can be changed at any point in time.\n */\nexport class Relay {\n  constructor() {\n    this.listening = false;\n    this.inputEvent = Event.None;\n    this.inputEventListener = Disposable.None;\n    this.emitter = new Emitter({\n      onDidAddFirstListener: () => {\n        this.listening = true;\n        this.inputEventListener = this.inputEvent(this.emitter.fire, this.emitter);\n      },\n      onDidRemoveLastListener: () => {\n        this.listening = false;\n        this.inputEventListener.dispose();\n      }\n    });\n    this.event = this.emitter.event;\n  }\n  set input(event) {\n    this.inputEvent = event;\n    if (this.listening) {\n      this.inputEventListener.dispose();\n      this.inputEventListener = event(this.emitter.fire, this.emitter);\n    }\n  }\n  dispose() {\n    this.inputEventListener.dispose();\n    this.emitter.dispose();\n  }\n}","map":{"version":3,"names":["onUnexpectedError","once","onceFn","combinedDisposable","Disposable","DisposableStore","SafeDisposable","toDisposable","LinkedList","StopWatch","_enableDisposeWithListenerWarning","_enableSnapshotPotentialLeakWarning","Event","None","_addLeakageTraceLogic","options","onDidAddListener","origListenerDidAdd","stack","Stacktrace","create","count","console","warn","print","defer","event","disposable","debounce","undefined","listener","thisArgs","arguments","length","disposables","didFire","result","e","dispose","call","map","snapshot","i","forEach","each","filter","signal","any","_len","events","Array","_key","reduce","merge","initial","output","onWillAddFirstListener","emitter","fire","onDidRemoveLastListener","Emitter","add","delay","leading","flushOnListenerRemove","leakWarningThreshold","subscription","handle","numDebouncedCalls","doFire","cur","_output","clearTimeout","setTimeout","queueMicrotask","onWillRemoveListener","accumulate","last","push","latch","equals","a","b","firstCall","cache","value","shouldEmit","split","isT","buffer","flushAfterTimeout","_buffer","slice","flush","onDidAddFirstListener","ChainableEvent","constructor","fn","on","chain","fromNodeEventEmitter","eventName","id","onFirstListenerAdd","onLastListenerRemove","removeListener","fromDOMEventEmitter","addEventListener","removeEventListener","toPromise","Promise","resolve","runAndSubscribe","handler","runAndSubscribeWithStore","store","run","EmitterObserver","obs","_counter","_hasChanged","addObserver","removeObserver","beginUpdate","_observable","handleChange","_change","endUpdate","get","fromObservable","observer","EventProfiling","name","listenerCount","invocationCount","elapsedOverall","durations","_idPool","all","start","_stopWatch","stop","elapsed","Set","_globalLeakWarningThreshold","LeakageMonitor","threshold","Math","random","toString","_warnCountdown","_a","_stacks","clear","check","Map","set","topStack","topCount","Error","join","Listener","callback","callbackThis","invoke","_b","_c","_d","_e","_disposed","_options","_leakageMon","_perfMon","_profName","_deliveryQueue","deliveryQueue","_listeners","listeners","from","isset","unset","_event","size","firstListener","isEmpty","removeMonitor","ceil","hasListeners","isArray","PrivateEventDeliveryQueue","deliver","EventDeliveryQueue","_queue","EventDeliveryQueueElement","newQueue","element","shift","PauseableEmitter","_isPaused","_eventQueue","_mergeFn","pause","resume","DebounceEmitter","_delay","_handle","MicrotaskEmitter","_queuedEvents","EventMultiplexer","hook","unhook","idx","indexOf","splice","r","EventBufferer","buffers","wrapEvent","bufferEvents","pop","Relay","listening","inputEvent","inputEventListener","input"],"sources":["/Users/cadany/WebstormProjects/monaco-editor-sample/node_modules/monaco-editor/esm/vs/base/common/event.js"],"sourcesContent":["import { onUnexpectedError } from './errors.js';\nimport { once as onceFn } from './functional.js';\nimport { combinedDisposable, Disposable, DisposableStore, SafeDisposable, toDisposable } from './lifecycle.js';\nimport { LinkedList } from './linkedList.js';\nimport { StopWatch } from './stopwatch.js';\n// -----------------------------------------------------------------------------------------------------------------------\n// Uncomment the next line to print warnings whenever an emitter with listeners is disposed. That is a sign of code smell.\n// -----------------------------------------------------------------------------------------------------------------------\nconst _enableDisposeWithListenerWarning = false;\n// _enableDisposeWithListenerWarning = Boolean(\"TRUE\"); // causes a linter warning so that it cannot be pushed\n// -----------------------------------------------------------------------------------------------------------------------\n// Uncomment the next line to print warnings whenever a snapshotted event is used repeatedly without cleanup.\n// See https://github.com/microsoft/vscode/issues/142851\n// -----------------------------------------------------------------------------------------------------------------------\nconst _enableSnapshotPotentialLeakWarning = false;\nexport var Event;\n(function (Event) {\n    Event.None = () => Disposable.None;\n    function _addLeakageTraceLogic(options) {\n        if (_enableSnapshotPotentialLeakWarning) {\n            const { onDidAddListener: origListenerDidAdd } = options;\n            const stack = Stacktrace.create();\n            let count = 0;\n            options.onDidAddListener = () => {\n                if (++count === 2) {\n                    console.warn('snapshotted emitter LIKELY used public and SHOULD HAVE BEEN created with DisposableStore. snapshotted here');\n                    stack.print();\n                }\n                origListenerDidAdd === null || origListenerDidAdd === void 0 ? void 0 : origListenerDidAdd();\n            };\n        }\n    }\n    /**\n     * Given an event, returns another event which debounces calls and defers the listeners to a later task via a shared\n     * `setTimeout`. The event is converted into a signal (`Event<void>`) to avoid additional object creation as a\n     * result of merging events and to try prevent race conditions that could arise when using related deferred and\n     * non-deferred events.\n     *\n     * This is useful for deferring non-critical work (eg. general UI updates) to ensure it does not block critical work\n     * (eg. latency of keypress to text rendered).\n     *\n     * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n     * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n     * returned event causes this utility to leak a listener on the original event.\n     *\n     * @param event The event source for the new event.\n     * @param disposable A disposable store to add the new EventEmitter to.\n     */\n    function defer(event, disposable) {\n        return debounce(event, () => void 0, 0, undefined, true, undefined, disposable);\n    }\n    Event.defer = defer;\n    /**\n     * Given an event, returns another event which only fires once.\n     *\n     * @param event The event source for the new event.\n     */\n    function once(event) {\n        return (listener, thisArgs = null, disposables) => {\n            // we need this, in case the event fires during the listener call\n            let didFire = false;\n            let result = undefined;\n            result = event(e => {\n                if (didFire) {\n                    return;\n                }\n                else if (result) {\n                    result.dispose();\n                }\n                else {\n                    didFire = true;\n                }\n                return listener.call(thisArgs, e);\n            }, null, disposables);\n            if (didFire) {\n                result.dispose();\n            }\n            return result;\n        };\n    }\n    Event.once = once;\n    /**\n     * Maps an event of one type into an event of another type using a mapping function, similar to how\n     * `Array.prototype.map` works.\n     *\n     * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n     * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n     * returned event causes this utility to leak a listener on the original event.\n     *\n     * @param event The event source for the new event.\n     * @param map The mapping function.\n     * @param disposable A disposable store to add the new EventEmitter to.\n     */\n    function map(event, map, disposable) {\n        return snapshot((listener, thisArgs = null, disposables) => event(i => listener.call(thisArgs, map(i)), null, disposables), disposable);\n    }\n    Event.map = map;\n    /**\n     * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n     * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n     * returned event causes this utility to leak a listener on the original event.\n     */\n    function forEach(event, each, disposable) {\n        return snapshot((listener, thisArgs = null, disposables) => event(i => { each(i); listener.call(thisArgs, i); }, null, disposables), disposable);\n    }\n    Event.forEach = forEach;\n    function filter(event, filter, disposable) {\n        return snapshot((listener, thisArgs = null, disposables) => event(e => filter(e) && listener.call(thisArgs, e), null, disposables), disposable);\n    }\n    Event.filter = filter;\n    /**\n     * Given an event, returns the same event but typed as `Event<void>`.\n     */\n    function signal(event) {\n        return event;\n    }\n    Event.signal = signal;\n    function any(...events) {\n        return (listener, thisArgs = null, disposables) => combinedDisposable(...events.map(event => event(e => listener.call(thisArgs, e), null, disposables)));\n    }\n    Event.any = any;\n    /**\n     * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n     * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n     * returned event causes this utility to leak a listener on the original event.\n     */\n    function reduce(event, merge, initial, disposable) {\n        let output = initial;\n        return map(event, e => {\n            output = merge(output, e);\n            return output;\n        }, disposable);\n    }\n    Event.reduce = reduce;\n    function snapshot(event, disposable) {\n        let listener;\n        const options = {\n            onWillAddFirstListener() {\n                listener = event(emitter.fire, emitter);\n            },\n            onDidRemoveLastListener() {\n                listener === null || listener === void 0 ? void 0 : listener.dispose();\n            }\n        };\n        if (!disposable) {\n            _addLeakageTraceLogic(options);\n        }\n        const emitter = new Emitter(options);\n        disposable === null || disposable === void 0 ? void 0 : disposable.add(emitter);\n        return emitter.event;\n    }\n    function debounce(event, merge, delay = 100, leading = false, flushOnListenerRemove = false, leakWarningThreshold, disposable) {\n        let subscription;\n        let output = undefined;\n        let handle = undefined;\n        let numDebouncedCalls = 0;\n        let doFire;\n        const options = {\n            leakWarningThreshold,\n            onWillAddFirstListener() {\n                subscription = event(cur => {\n                    numDebouncedCalls++;\n                    output = merge(output, cur);\n                    if (leading && !handle) {\n                        emitter.fire(output);\n                        output = undefined;\n                    }\n                    doFire = () => {\n                        const _output = output;\n                        output = undefined;\n                        handle = undefined;\n                        if (!leading || numDebouncedCalls > 1) {\n                            emitter.fire(_output);\n                        }\n                        numDebouncedCalls = 0;\n                    };\n                    if (typeof delay === 'number') {\n                        clearTimeout(handle);\n                        handle = setTimeout(doFire, delay);\n                    }\n                    else {\n                        if (handle === undefined) {\n                            handle = 0;\n                            queueMicrotask(doFire);\n                        }\n                    }\n                });\n            },\n            onWillRemoveListener() {\n                if (flushOnListenerRemove && numDebouncedCalls > 0) {\n                    doFire === null || doFire === void 0 ? void 0 : doFire();\n                }\n            },\n            onDidRemoveLastListener() {\n                doFire = undefined;\n                subscription.dispose();\n            }\n        };\n        if (!disposable) {\n            _addLeakageTraceLogic(options);\n        }\n        const emitter = new Emitter(options);\n        disposable === null || disposable === void 0 ? void 0 : disposable.add(emitter);\n        return emitter.event;\n    }\n    Event.debounce = debounce;\n    /**\n     * Debounces an event, firing after some delay (default=0) with an array of all event original objects.\n     *\n     * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n     * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n     * returned event causes this utility to leak a listener on the original event.\n     */\n    function accumulate(event, delay = 0, disposable) {\n        return Event.debounce(event, (last, e) => {\n            if (!last) {\n                return [e];\n            }\n            last.push(e);\n            return last;\n        }, delay, undefined, true, undefined, disposable);\n    }\n    Event.accumulate = accumulate;\n    /**\n     * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n     * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n     * returned event causes this utility to leak a listener on the original event.\n     */\n    function latch(event, equals = (a, b) => a === b, disposable) {\n        let firstCall = true;\n        let cache;\n        return filter(event, value => {\n            const shouldEmit = firstCall || !equals(value, cache);\n            firstCall = false;\n            cache = value;\n            return shouldEmit;\n        }, disposable);\n    }\n    Event.latch = latch;\n    /**\n     * Splits an event whose parameter is a union type into 2 separate events for each type in the union.\n     *\n     * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n     * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n     * returned event causes this utility to leak a listener on the original event.\n     *\n     * @example\n     * ```\n     * const event = new EventEmitter<number | undefined>().event;\n     * const [numberEvent, undefinedEvent] = Event.split(event, isUndefined);\n     * ```\n     *\n     * @param event The event source for the new event.\n     * @param isT A function that determines what event is of the first type.\n     * @param disposable A disposable store to add the new EventEmitter to.\n     */\n    function split(event, isT, disposable) {\n        return [\n            Event.filter(event, isT, disposable),\n            Event.filter(event, e => !isT(e), disposable),\n        ];\n    }\n    Event.split = split;\n    /**\n     * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n     * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n     * returned event causes this utility to leak a listener on the original event.\n     */\n    function buffer(event, flushAfterTimeout = false, _buffer = []) {\n        let buffer = _buffer.slice();\n        let listener = event(e => {\n            if (buffer) {\n                buffer.push(e);\n            }\n            else {\n                emitter.fire(e);\n            }\n        });\n        const flush = () => {\n            buffer === null || buffer === void 0 ? void 0 : buffer.forEach(e => emitter.fire(e));\n            buffer = null;\n        };\n        const emitter = new Emitter({\n            onWillAddFirstListener() {\n                if (!listener) {\n                    listener = event(e => emitter.fire(e));\n                }\n            },\n            onDidAddFirstListener() {\n                if (buffer) {\n                    if (flushAfterTimeout) {\n                        setTimeout(flush);\n                    }\n                    else {\n                        flush();\n                    }\n                }\n            },\n            onDidRemoveLastListener() {\n                if (listener) {\n                    listener.dispose();\n                }\n                listener = null;\n            }\n        });\n        return emitter.event;\n    }\n    Event.buffer = buffer;\n    class ChainableEvent {\n        constructor(event) {\n            this.event = event;\n            this.disposables = new DisposableStore();\n        }\n        map(fn) {\n            return new ChainableEvent(map(this.event, fn, this.disposables));\n        }\n        forEach(fn) {\n            return new ChainableEvent(forEach(this.event, fn, this.disposables));\n        }\n        filter(fn) {\n            return new ChainableEvent(filter(this.event, fn, this.disposables));\n        }\n        reduce(merge, initial) {\n            return new ChainableEvent(reduce(this.event, merge, initial, this.disposables));\n        }\n        latch() {\n            return new ChainableEvent(latch(this.event, undefined, this.disposables));\n        }\n        debounce(merge, delay = 100, leading = false, flushOnListenerRemove = false, leakWarningThreshold) {\n            return new ChainableEvent(debounce(this.event, merge, delay, leading, flushOnListenerRemove, leakWarningThreshold, this.disposables));\n        }\n        on(listener, thisArgs, disposables) {\n            return this.event(listener, thisArgs, disposables);\n        }\n        once(listener, thisArgs, disposables) {\n            return once(this.event)(listener, thisArgs, disposables);\n        }\n        dispose() {\n            this.disposables.dispose();\n        }\n    }\n    function chain(event) {\n        return new ChainableEvent(event);\n    }\n    Event.chain = chain;\n    function fromNodeEventEmitter(emitter, eventName, map = id => id) {\n        const fn = (...args) => result.fire(map(...args));\n        const onFirstListenerAdd = () => emitter.on(eventName, fn);\n        const onLastListenerRemove = () => emitter.removeListener(eventName, fn);\n        const result = new Emitter({ onWillAddFirstListener: onFirstListenerAdd, onDidRemoveLastListener: onLastListenerRemove });\n        return result.event;\n    }\n    Event.fromNodeEventEmitter = fromNodeEventEmitter;\n    function fromDOMEventEmitter(emitter, eventName, map = id => id) {\n        const fn = (...args) => result.fire(map(...args));\n        const onFirstListenerAdd = () => emitter.addEventListener(eventName, fn);\n        const onLastListenerRemove = () => emitter.removeEventListener(eventName, fn);\n        const result = new Emitter({ onWillAddFirstListener: onFirstListenerAdd, onDidRemoveLastListener: onLastListenerRemove });\n        return result.event;\n    }\n    Event.fromDOMEventEmitter = fromDOMEventEmitter;\n    function toPromise(event) {\n        return new Promise(resolve => once(event)(resolve));\n    }\n    Event.toPromise = toPromise;\n    function runAndSubscribe(event, handler) {\n        handler(undefined);\n        return event(e => handler(e));\n    }\n    Event.runAndSubscribe = runAndSubscribe;\n    function runAndSubscribeWithStore(event, handler) {\n        let store = null;\n        function run(e) {\n            store === null || store === void 0 ? void 0 : store.dispose();\n            store = new DisposableStore();\n            handler(e, store);\n        }\n        run(undefined);\n        const disposable = event(e => run(e));\n        return toDisposable(() => {\n            disposable.dispose();\n            store === null || store === void 0 ? void 0 : store.dispose();\n        });\n    }\n    Event.runAndSubscribeWithStore = runAndSubscribeWithStore;\n    class EmitterObserver {\n        constructor(obs, store) {\n            this.obs = obs;\n            this._counter = 0;\n            this._hasChanged = false;\n            const options = {\n                onWillAddFirstListener: () => {\n                    obs.addObserver(this);\n                },\n                onDidRemoveLastListener: () => {\n                    obs.removeObserver(this);\n                }\n            };\n            if (!store) {\n                _addLeakageTraceLogic(options);\n            }\n            this.emitter = new Emitter(options);\n            if (store) {\n                store.add(this.emitter);\n            }\n        }\n        beginUpdate(_observable) {\n            // console.assert(_observable === this.obs);\n            this._counter++;\n        }\n        handleChange(_observable, _change) {\n            this._hasChanged = true;\n        }\n        endUpdate(_observable) {\n            if (--this._counter === 0) {\n                if (this._hasChanged) {\n                    this._hasChanged = false;\n                    this.emitter.fire(this.obs.get());\n                }\n            }\n        }\n    }\n    function fromObservable(obs, store) {\n        const observer = new EmitterObserver(obs, store);\n        return observer.emitter.event;\n    }\n    Event.fromObservable = fromObservable;\n})(Event || (Event = {}));\nclass EventProfiling {\n    constructor(name) {\n        this.listenerCount = 0;\n        this.invocationCount = 0;\n        this.elapsedOverall = 0;\n        this.durations = [];\n        this.name = `${name}_${EventProfiling._idPool++}`;\n        EventProfiling.all.add(this);\n    }\n    start(listenerCount) {\n        this._stopWatch = new StopWatch(true);\n        this.listenerCount = listenerCount;\n    }\n    stop() {\n        if (this._stopWatch) {\n            const elapsed = this._stopWatch.elapsed();\n            this.durations.push(elapsed);\n            this.elapsedOverall += elapsed;\n            this.invocationCount += 1;\n            this._stopWatch = undefined;\n        }\n    }\n}\nEventProfiling.all = new Set();\nEventProfiling._idPool = 0;\nexport { EventProfiling };\nlet _globalLeakWarningThreshold = -1;\nclass LeakageMonitor {\n    constructor(threshold, name = Math.random().toString(18).slice(2, 5)) {\n        this.threshold = threshold;\n        this.name = name;\n        this._warnCountdown = 0;\n    }\n    dispose() {\n        var _a;\n        (_a = this._stacks) === null || _a === void 0 ? void 0 : _a.clear();\n    }\n    check(stack, listenerCount) {\n        const threshold = this.threshold;\n        if (threshold <= 0 || listenerCount < threshold) {\n            return undefined;\n        }\n        if (!this._stacks) {\n            this._stacks = new Map();\n        }\n        const count = (this._stacks.get(stack.value) || 0);\n        this._stacks.set(stack.value, count + 1);\n        this._warnCountdown -= 1;\n        if (this._warnCountdown <= 0) {\n            // only warn on first exceed and then every time the limit\n            // is exceeded by 50% again\n            this._warnCountdown = threshold * 0.5;\n            // find most frequent listener and print warning\n            let topStack;\n            let topCount = 0;\n            for (const [stack, count] of this._stacks) {\n                if (!topStack || topCount < count) {\n                    topStack = stack;\n                    topCount = count;\n                }\n            }\n            console.warn(`[${this.name}] potential listener LEAK detected, having ${listenerCount} listeners already. MOST frequent listener (${topCount}):`);\n            console.warn(topStack);\n        }\n        return () => {\n            const count = (this._stacks.get(stack.value) || 0);\n            this._stacks.set(stack.value, count - 1);\n        };\n    }\n}\nclass Stacktrace {\n    static create() {\n        var _a;\n        return new Stacktrace((_a = new Error().stack) !== null && _a !== void 0 ? _a : '');\n    }\n    constructor(value) {\n        this.value = value;\n    }\n    print() {\n        console.warn(this.value.split('\\n').slice(2).join('\\n'));\n    }\n}\nclass Listener {\n    constructor(callback, callbackThis, stack) {\n        this.callback = callback;\n        this.callbackThis = callbackThis;\n        this.stack = stack;\n        this.subscription = new SafeDisposable();\n    }\n    invoke(e) {\n        this.callback.call(this.callbackThis, e);\n    }\n}\n/**\n * The Emitter can be used to expose an Event to the public\n * to fire it from the insides.\n * Sample:\n    class Document {\n\n        private readonly _onDidChange = new Emitter<(value:string)=>any>();\n\n        public onDidChange = this._onDidChange.event;\n\n        // getter-style\n        // get onDidChange(): Event<(value:string)=>any> {\n        // \treturn this._onDidChange.event;\n        // }\n\n        private _doIt() {\n            //...\n            this._onDidChange.fire(value);\n        }\n    }\n */\nexport class Emitter {\n    constructor(options) {\n        var _a, _b, _c, _d, _e;\n        this._disposed = false;\n        this._options = options;\n        this._leakageMon = _globalLeakWarningThreshold > 0 || ((_a = this._options) === null || _a === void 0 ? void 0 : _a.leakWarningThreshold) ? new LeakageMonitor((_c = (_b = this._options) === null || _b === void 0 ? void 0 : _b.leakWarningThreshold) !== null && _c !== void 0 ? _c : _globalLeakWarningThreshold) : undefined;\n        this._perfMon = ((_d = this._options) === null || _d === void 0 ? void 0 : _d._profName) ? new EventProfiling(this._options._profName) : undefined;\n        this._deliveryQueue = (_e = this._options) === null || _e === void 0 ? void 0 : _e.deliveryQueue;\n    }\n    dispose() {\n        var _a, _b, _c, _d;\n        if (!this._disposed) {\n            this._disposed = true;\n            // It is bad to have listeners at the time of disposing an emitter, it is worst to have listeners keep the emitter\n            // alive via the reference that's embedded in their disposables. Therefore we loop over all remaining listeners and\n            // unset their subscriptions/disposables. Looping and blaming remaining listeners is done on next tick because the\n            // the following programming pattern is very popular:\n            //\n            // const someModel = this._disposables.add(new ModelObject()); // (1) create and register model\n            // this._disposables.add(someModel.onDidChange(() => { ... }); // (2) subscribe and register model-event listener\n            // ...later...\n            // this._disposables.dispose(); disposes (1) then (2): don't warn after (1) but after the \"overall dispose\" is done\n            if (this._listeners) {\n                if (_enableDisposeWithListenerWarning) {\n                    const listeners = Array.from(this._listeners);\n                    queueMicrotask(() => {\n                        var _a;\n                        for (const listener of listeners) {\n                            if (listener.subscription.isset()) {\n                                listener.subscription.unset();\n                                (_a = listener.stack) === null || _a === void 0 ? void 0 : _a.print();\n                            }\n                        }\n                    });\n                }\n                this._listeners.clear();\n            }\n            (_a = this._deliveryQueue) === null || _a === void 0 ? void 0 : _a.clear(this);\n            (_c = (_b = this._options) === null || _b === void 0 ? void 0 : _b.onDidRemoveLastListener) === null || _c === void 0 ? void 0 : _c.call(_b);\n            (_d = this._leakageMon) === null || _d === void 0 ? void 0 : _d.dispose();\n        }\n    }\n    /**\n     * For the public to allow to subscribe\n     * to events from this Emitter\n     */\n    get event() {\n        if (!this._event) {\n            this._event = (callback, thisArgs, disposables) => {\n                var _a, _b, _c;\n                if (!this._listeners) {\n                    this._listeners = new LinkedList();\n                }\n                if (this._leakageMon && this._listeners.size > this._leakageMon.threshold * 3) {\n                    console.warn(`[${this._leakageMon.name}] REFUSES to accept new listeners because it exceeded its threshold by far`);\n                    return Disposable.None;\n                }\n                const firstListener = this._listeners.isEmpty();\n                if (firstListener && ((_a = this._options) === null || _a === void 0 ? void 0 : _a.onWillAddFirstListener)) {\n                    this._options.onWillAddFirstListener(this);\n                }\n                let removeMonitor;\n                let stack;\n                if (this._leakageMon && this._listeners.size >= Math.ceil(this._leakageMon.threshold * 0.2)) {\n                    // check and record this emitter for potential leakage\n                    stack = Stacktrace.create();\n                    removeMonitor = this._leakageMon.check(stack, this._listeners.size + 1);\n                }\n                if (_enableDisposeWithListenerWarning) {\n                    stack = stack !== null && stack !== void 0 ? stack : Stacktrace.create();\n                }\n                const listener = new Listener(callback, thisArgs, stack);\n                const removeListener = this._listeners.push(listener);\n                if (firstListener && ((_b = this._options) === null || _b === void 0 ? void 0 : _b.onDidAddFirstListener)) {\n                    this._options.onDidAddFirstListener(this);\n                }\n                if ((_c = this._options) === null || _c === void 0 ? void 0 : _c.onDidAddListener) {\n                    this._options.onDidAddListener(this, callback, thisArgs);\n                }\n                const result = listener.subscription.set(() => {\n                    var _a, _b;\n                    removeMonitor === null || removeMonitor === void 0 ? void 0 : removeMonitor();\n                    if (!this._disposed) {\n                        (_b = (_a = this._options) === null || _a === void 0 ? void 0 : _a.onWillRemoveListener) === null || _b === void 0 ? void 0 : _b.call(_a, this);\n                        removeListener();\n                        if (this._options && this._options.onDidRemoveLastListener) {\n                            const hasListeners = (this._listeners && !this._listeners.isEmpty());\n                            if (!hasListeners) {\n                                this._options.onDidRemoveLastListener(this);\n                            }\n                        }\n                    }\n                });\n                if (disposables instanceof DisposableStore) {\n                    disposables.add(result);\n                }\n                else if (Array.isArray(disposables)) {\n                    disposables.push(result);\n                }\n                return result;\n            };\n        }\n        return this._event;\n    }\n    /**\n     * To be kept private to fire an event to\n     * subscribers\n     */\n    fire(event) {\n        var _a, _b;\n        if (this._listeners) {\n            // put all [listener,event]-pairs into delivery queue\n            // then emit all event. an inner/nested event might be\n            // the driver of this\n            if (!this._deliveryQueue) {\n                this._deliveryQueue = new PrivateEventDeliveryQueue();\n            }\n            for (const listener of this._listeners) {\n                this._deliveryQueue.push(this, listener, event);\n            }\n            // start/stop performance insight collection\n            (_a = this._perfMon) === null || _a === void 0 ? void 0 : _a.start(this._deliveryQueue.size);\n            this._deliveryQueue.deliver();\n            (_b = this._perfMon) === null || _b === void 0 ? void 0 : _b.stop();\n        }\n    }\n    hasListeners() {\n        if (!this._listeners) {\n            return false;\n        }\n        return !this._listeners.isEmpty();\n    }\n}\nexport class EventDeliveryQueue {\n    constructor() {\n        this._queue = new LinkedList();\n    }\n    get size() {\n        return this._queue.size;\n    }\n    push(emitter, listener, event) {\n        this._queue.push(new EventDeliveryQueueElement(emitter, listener, event));\n    }\n    clear(emitter) {\n        const newQueue = new LinkedList();\n        for (const element of this._queue) {\n            if (element.emitter !== emitter) {\n                newQueue.push(element);\n            }\n        }\n        this._queue = newQueue;\n    }\n    deliver() {\n        while (this._queue.size > 0) {\n            const element = this._queue.shift();\n            try {\n                element.listener.invoke(element.event);\n            }\n            catch (e) {\n                onUnexpectedError(e);\n            }\n        }\n    }\n}\n/**\n * An `EventDeliveryQueue` that is guaranteed to be used by a single `Emitter`.\n */\nclass PrivateEventDeliveryQueue extends EventDeliveryQueue {\n    clear(emitter) {\n        // Here we can just clear the entire linked list because\n        // all elements are guaranteed to belong to this emitter\n        this._queue.clear();\n    }\n}\nclass EventDeliveryQueueElement {\n    constructor(emitter, listener, event) {\n        this.emitter = emitter;\n        this.listener = listener;\n        this.event = event;\n    }\n}\nexport class PauseableEmitter extends Emitter {\n    constructor(options) {\n        super(options);\n        this._isPaused = 0;\n        this._eventQueue = new LinkedList();\n        this._mergeFn = options === null || options === void 0 ? void 0 : options.merge;\n    }\n    pause() {\n        this._isPaused++;\n    }\n    resume() {\n        if (this._isPaused !== 0 && --this._isPaused === 0) {\n            if (this._mergeFn) {\n                // use the merge function to create a single composite\n                // event. make a copy in case firing pauses this emitter\n                if (this._eventQueue.size > 0) {\n                    const events = Array.from(this._eventQueue);\n                    this._eventQueue.clear();\n                    super.fire(this._mergeFn(events));\n                }\n            }\n            else {\n                // no merging, fire each event individually and test\n                // that this emitter isn't paused halfway through\n                while (!this._isPaused && this._eventQueue.size !== 0) {\n                    super.fire(this._eventQueue.shift());\n                }\n            }\n        }\n    }\n    fire(event) {\n        if (this._listeners) {\n            if (this._isPaused !== 0) {\n                this._eventQueue.push(event);\n            }\n            else {\n                super.fire(event);\n            }\n        }\n    }\n}\nexport class DebounceEmitter extends PauseableEmitter {\n    constructor(options) {\n        var _a;\n        super(options);\n        this._delay = (_a = options.delay) !== null && _a !== void 0 ? _a : 100;\n    }\n    fire(event) {\n        if (!this._handle) {\n            this.pause();\n            this._handle = setTimeout(() => {\n                this._handle = undefined;\n                this.resume();\n            }, this._delay);\n        }\n        super.fire(event);\n    }\n}\n/**\n * An emitter which queue all events and then process them at the\n * end of the event loop.\n */\nexport class MicrotaskEmitter extends Emitter {\n    constructor(options) {\n        super(options);\n        this._queuedEvents = [];\n        this._mergeFn = options === null || options === void 0 ? void 0 : options.merge;\n    }\n    fire(event) {\n        if (!this.hasListeners()) {\n            return;\n        }\n        this._queuedEvents.push(event);\n        if (this._queuedEvents.length === 1) {\n            queueMicrotask(() => {\n                if (this._mergeFn) {\n                    super.fire(this._mergeFn(this._queuedEvents));\n                }\n                else {\n                    this._queuedEvents.forEach(e => super.fire(e));\n                }\n                this._queuedEvents = [];\n            });\n        }\n    }\n}\nexport class EventMultiplexer {\n    constructor() {\n        this.hasListeners = false;\n        this.events = [];\n        this.emitter = new Emitter({\n            onWillAddFirstListener: () => this.onFirstListenerAdd(),\n            onDidRemoveLastListener: () => this.onLastListenerRemove()\n        });\n    }\n    get event() {\n        return this.emitter.event;\n    }\n    add(event) {\n        const e = { event: event, listener: null };\n        this.events.push(e);\n        if (this.hasListeners) {\n            this.hook(e);\n        }\n        const dispose = () => {\n            if (this.hasListeners) {\n                this.unhook(e);\n            }\n            const idx = this.events.indexOf(e);\n            this.events.splice(idx, 1);\n        };\n        return toDisposable(onceFn(dispose));\n    }\n    onFirstListenerAdd() {\n        this.hasListeners = true;\n        this.events.forEach(e => this.hook(e));\n    }\n    onLastListenerRemove() {\n        this.hasListeners = false;\n        this.events.forEach(e => this.unhook(e));\n    }\n    hook(e) {\n        e.listener = e.event(r => this.emitter.fire(r));\n    }\n    unhook(e) {\n        if (e.listener) {\n            e.listener.dispose();\n        }\n        e.listener = null;\n    }\n    dispose() {\n        this.emitter.dispose();\n    }\n}\n/**\n * The EventBufferer is useful in situations in which you want\n * to delay firing your events during some code.\n * You can wrap that code and be sure that the event will not\n * be fired during that wrap.\n *\n * ```\n * const emitter: Emitter;\n * const delayer = new EventDelayer();\n * const delayedEvent = delayer.wrapEvent(emitter.event);\n *\n * delayedEvent(console.log);\n *\n * delayer.bufferEvents(() => {\n *   emitter.fire(); // event will not be fired yet\n * });\n *\n * // event will only be fired at this point\n * ```\n */\nexport class EventBufferer {\n    constructor() {\n        this.buffers = [];\n    }\n    wrapEvent(event) {\n        return (listener, thisArgs, disposables) => {\n            return event(i => {\n                const buffer = this.buffers[this.buffers.length - 1];\n                if (buffer) {\n                    buffer.push(() => listener.call(thisArgs, i));\n                }\n                else {\n                    listener.call(thisArgs, i);\n                }\n            }, undefined, disposables);\n        };\n    }\n    bufferEvents(fn) {\n        const buffer = [];\n        this.buffers.push(buffer);\n        const r = fn();\n        this.buffers.pop();\n        buffer.forEach(flush => flush());\n        return r;\n    }\n}\n/**\n * A Relay is an event forwarder which functions as a replugabble event pipe.\n * Once created, you can connect an input event to it and it will simply forward\n * events from that input event through its own `event` property. The `input`\n * can be changed at any point in time.\n */\nexport class Relay {\n    constructor() {\n        this.listening = false;\n        this.inputEvent = Event.None;\n        this.inputEventListener = Disposable.None;\n        this.emitter = new Emitter({\n            onDidAddFirstListener: () => {\n                this.listening = true;\n                this.inputEventListener = this.inputEvent(this.emitter.fire, this.emitter);\n            },\n            onDidRemoveLastListener: () => {\n                this.listening = false;\n                this.inputEventListener.dispose();\n            }\n        });\n        this.event = this.emitter.event;\n    }\n    set input(event) {\n        this.inputEvent = event;\n        if (this.listening) {\n            this.inputEventListener.dispose();\n            this.inputEventListener = event(this.emitter.fire, this.emitter);\n        }\n    }\n    dispose() {\n        this.inputEventListener.dispose();\n        this.emitter.dispose();\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}