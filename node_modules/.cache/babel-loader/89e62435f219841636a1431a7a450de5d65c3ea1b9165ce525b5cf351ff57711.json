{"ast":null,"code":"var _jsxFileName = \"/Users/cadany/WebstormProjects/monaco/src/Editor.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport * as monaco from 'monaco-editor';\n//\n// // @ts-ignore\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nwindow.MonacoEnvironment = {\n  getWorker: function (_moduleId, label) {\n    //         if (label === 'sql') {\n    //             return './sql.worker.bundle.js';\n    //         }\n    //         if (label === 'html' || label === 'handlebars' || label === 'razor') {\n    //             return './html.worker.bundle.js';\n    //         }\n    //         if (label === 'typescript' || label === 'javascript') {\n    //             return './ts.worker.bundle.js';\n    //         }\n    //         return './editor.worker.bundle.js';\n    let url = \"monaco-editor/esm/vs/language/typescript/ts.worker\";\n    if (label === 'css') {\n      url = \"monaco-editor/esm/vs/language/css/css.worker\";\n    } else if (label === 'html') {\n      url = \"monaco-editor/esm/vs/language/html/html.worker\";\n    }\n    return new Worker(new URL(url, import.meta.url));\n  }\n};\nexport const Editor = () => {\n  _s();\n  const divEl = useRef(null);\n  let editor;\n  useEffect(() => {\n    if (divEl.current) {\n      editor = monaco.editor.create(divEl.current, {\n        value: ['function x() {', '\\tconsole.log(\"Hello world!\");', '}'].join('\\n'),\n        language: 'html'\n      });\n    }\n    return () => {\n      editor.dispose();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Editor\",\n    ref: divEl,\n    style: {\n      height: \"100vh\",\n      width: \"100vw\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 12\n  }, this);\n};\n_s(Editor, \"4/bE1htRc0IY+BbUQYZkOsc6Qj8=\");\n_c = Editor;\nvar _c;\n$RefreshReg$(_c, \"Editor\");","map":{"version":3,"names":["React","useRef","useEffect","monaco","jsxDEV","_jsxDEV","window","MonacoEnvironment","getWorker","_moduleId","label","url","Worker","URL","import","meta","Editor","_s","divEl","editor","current","create","value","join","language","dispose","className","ref","style","height","width","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/cadany/WebstormProjects/monaco/src/Editor.tsx"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport * as monaco from 'monaco-editor';\n//\n// // @ts-ignore\nwindow.MonacoEnvironment = {\n    getWorker: function (_moduleId: any, label: string) {\n//         if (label === 'sql') {\n//             return './sql.worker.bundle.js';\n//         }\n//         if (label === 'html' || label === 'handlebars' || label === 'razor') {\n//             return './html.worker.bundle.js';\n//         }\n//         if (label === 'typescript' || label === 'javascript') {\n//             return './ts.worker.bundle.js';\n//         }\n//         return './editor.worker.bundle.js';\n        let url = \"monaco-editor/esm/vs/language/typescript/ts.worker\";\n        if (label === 'css'){\n            url = \"monaco-editor/esm/vs/language/css/css.worker\";\n        }\n        else if (label === 'html'){\n            url = \"monaco-editor/esm/vs/language/html/html.worker\";\n        }\n\n        return new Worker(\n            new URL(url, import.meta.url),\n        );\n    }\n};\n\nexport const Editor: React.FC = () => {\n    const divEl = useRef<HTMLDivElement>(null);\n    let editor: monaco.editor.IStandaloneCodeEditor;\n    useEffect(() => {\n        if (divEl.current) {\n            editor = monaco.editor.create(divEl.current, {\n                value: ['function x() {', '\\tconsole.log(\"Hello world!\");', '}'].join('\\n'),\n                language: 'html'\n            });\n        }\n        return () => {\n            editor.dispose();\n        };\n    }, []);\n    return <div className=\"Editor\" ref={divEl} style={{height: \"100vh\", width: \"100vw\"}}></div>;\n};"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAChD,OAAO,KAAKC,MAAM,MAAM,eAAe;AACvC;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACAC,MAAM,CAACC,iBAAiB,GAAG;EACvBC,SAAS,EAAE,SAAAA,CAAUC,SAAc,EAAEC,KAAa,EAAE;IACxD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACQ,IAAIC,GAAG,GAAG,oDAAoD;IAC9D,IAAID,KAAK,KAAK,KAAK,EAAC;MAChBC,GAAG,GAAG,8CAA8C;IACxD,CAAC,MACI,IAAID,KAAK,KAAK,MAAM,EAAC;MACtBC,GAAG,GAAG,gDAAgD;IAC1D;IAEA,OAAO,IAAIC,MAAM,CACb,IAAIC,GAAG,CAACF,GAAG,EAAEG,MAAM,CAACC,IAAI,CAACJ,GAAG,CAAC,CAChC;EACL;AACJ,CAAC;AAED,OAAO,MAAMK,MAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClC,MAAMC,KAAK,GAAGjB,MAAM,CAAiB,IAAI,CAAC;EAC1C,IAAIkB,MAA2C;EAC/CjB,SAAS,CAAC,MAAM;IACZ,IAAIgB,KAAK,CAACE,OAAO,EAAE;MACfD,MAAM,GAAGhB,MAAM,CAACgB,MAAM,CAACE,MAAM,CAACH,KAAK,CAACE,OAAO,EAAE;QACzCE,KAAK,EAAE,CAAC,gBAAgB,EAAE,gCAAgC,EAAE,GAAG,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;QAC3EC,QAAQ,EAAE;MACd,CAAC,CAAC;IACN;IACA,OAAO,MAAM;MACTL,MAAM,CAACM,OAAO,EAAE;IACpB,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EACN,oBAAOpB,OAAA;IAAKqB,SAAS,EAAC,QAAQ;IAACC,GAAG,EAAET,KAAM;IAACU,KAAK,EAAE;MAACC,MAAM,EAAE,OAAO;MAAEC,KAAK,EAAE;IAAO;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAO;AAC/F,CAAC;AAACjB,EAAA,CAfWD,MAAgB;AAAAmB,EAAA,GAAhBnB,MAAgB;AAAA,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}