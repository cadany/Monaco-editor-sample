{"ast":null,"code":"var _jsxFileName = \"/Users/cadany/WebstormProjects/monaco/src/CodeEditor.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport * as monaco from 'monaco-editor';\n// import * as monaco from 'monaco-editor/esm/vs/editor/editor.api';\n// import { language as sqlLanguage } from 'monaco-editor/esm/vs/basic-languages/sql/sql';\nimport { registerAutoCompletionLanguage } from \"./proxy\";\nimport { editor } from \"monaco-editor\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar IStandaloneEditorConstructionOptions = editor.IStandaloneEditorConstructionOptions;\nvar IStandaloneCodeEditor = editor.IStandaloneCodeEditor; // window.MonacoEnvironment = {\n//     getWorker: function (_moduleId: any, label: string) {\n//         // console.log(metadata.languages);\n//         switch (label) {\n//             case 'editorWorkerService':\n//                 return new Worker(new URL('monaco-editor/esm/vs/editor/editor.worker', import.meta.url));\n//             case 'css':\n//             case 'less':\n//             case 'scss':\n//                 return new Worker(new URL('monaco-editor/esm/vs/language/css/css.worker', import.meta.url));\n//             case 'handlebars':\n//             case 'html':\n//             case 'razor':\n//                 return new Worker(\n//                     new URL('monaco-editor/esm/vs/language/html/html.worker', import.meta.url),\n//                 );\n//             case 'json':\n//                 return new Worker(\n//                     new URL('monaco-editor/esm/vs/language/json/json.worker', import.meta.url),\n//                 );\n//             case 'javascript':\n//             case 'typescript':\n//                 return new Worker(\n//                     new URL('monaco-editor/esm/vs/language/typescript/ts.worker', import.meta.url),\n//                 );\n//             default:\n//                 throw new Error(`Unknown label ${label}`);\n//         }\n//     }\n// };\nexport const CodeEditor = (props, context) => {\n  _s();\n  const container = useRef(null);\n  let editor;\n  let autoCompletion;\n  useEffect(() => {\n    console.log(\"mount\");\n    if (container.current) {\n      editor = monaco.editor.create(container.current, {\n        ...props\n      });\n      autoCompletion = registerAutoCompletionLanguage(props.language);\n      return () => {\n        console.log(\"dispose \");\n        if (autoCompletion) autoCompletion.dispose(); //防止自动提示重复\n        editor.dispose();\n      };\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Editor\",\n    ref: container,\n    style: {\n      height: \"calc(100%)\",\n      width: \"calc(100%)\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 12\n  }, this);\n};\n_s(CodeEditor, \"gP936EAkbq44zYYGRnj90r2fLhg=\");\n_c = CodeEditor;\nvar _c;\n$RefreshReg$(_c, \"CodeEditor\");","map":{"version":3,"names":["React","useRef","useEffect","monaco","registerAutoCompletionLanguage","editor","jsxDEV","_jsxDEV","IStandaloneEditorConstructionOptions","IStandaloneCodeEditor","CodeEditor","props","context","_s","container","autoCompletion","console","log","current","create","language","dispose","className","ref","style","height","width","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/cadany/WebstormProjects/monaco/src/CodeEditor.tsx"],"sourcesContent":["import React, {useRef, useEffect} from 'react';\nimport * as monaco from 'monaco-editor';\n// import * as monaco from 'monaco-editor/esm/vs/editor/editor.api';\n// import { language as sqlLanguage } from 'monaco-editor/esm/vs/basic-languages/sql/sql';\nimport {registerAutoCompletionLanguage} from \"./proxy\";\nimport {editor} from \"monaco-editor\";\nimport IStandaloneEditorConstructionOptions = editor.IStandaloneEditorConstructionOptions;\nimport IStandaloneCodeEditor = editor.IStandaloneCodeEditor;\n\n\n// window.MonacoEnvironment = {\n//     getWorker: function (_moduleId: any, label: string) {\n//         // console.log(metadata.languages);\n//         switch (label) {\n//             case 'editorWorkerService':\n//                 return new Worker(new URL('monaco-editor/esm/vs/editor/editor.worker', import.meta.url));\n//             case 'css':\n//             case 'less':\n//             case 'scss':\n//                 return new Worker(new URL('monaco-editor/esm/vs/language/css/css.worker', import.meta.url));\n//             case 'handlebars':\n//             case 'html':\n//             case 'razor':\n//                 return new Worker(\n//                     new URL('monaco-editor/esm/vs/language/html/html.worker', import.meta.url),\n//                 );\n//             case 'json':\n//                 return new Worker(\n//                     new URL('monaco-editor/esm/vs/language/json/json.worker', import.meta.url),\n//                 );\n//             case 'javascript':\n//             case 'typescript':\n//                 return new Worker(\n//                     new URL('monaco-editor/esm/vs/language/typescript/ts.worker', import.meta.url),\n//                 );\n//             default:\n//                 throw new Error(`Unknown label ${label}`);\n//         }\n//     }\n// };\n\nexport const CodeEditor: React.FC<IStandaloneEditorConstructionOptions> = (props, context) => {\n    const container = useRef<HTMLDivElement>(null);\n    let editor: monaco.editor.IStandaloneCodeEditor;\n    let autoCompletion: monaco.IDisposable | null;\n\n    useEffect(() => {\n        console.log(\"mount\");\n        if (container.current) {\n            editor = monaco.editor.create(container.current, {...props});\n            autoCompletion = registerAutoCompletionLanguage(props.language);\n            \n            return () => {\n                console.log(\"dispose \");\n                if (autoCompletion) autoCompletion.dispose();   //防止自动提示重复\n                editor.dispose();\n            };\n        }\n    }, []);\n\n    return <div className=\"Editor\" ref={container} style={{height: \"calc(100%)\", width: \"calc(100%)\"}}></div>;\n};"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,MAAM,EAAEC,SAAS,QAAO,OAAO;AAC9C,OAAO,KAAKC,MAAM,MAAM,eAAe;AACvC;AACA;AACA,SAAQC,8BAA8B,QAAO,SAAS;AACtD,SAAQC,MAAM,QAAO,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,IAC9BC,oCAAoC,GAAGH,MAAM,CAACG,oCAAoC;AAAA,IAClFC,qBAAqB,GAAGJ,MAAM,CAACI,qBAAqB,EAG3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAO,MAAMC,UAA0D,GAAGA,CAACC,KAAK,EAAEC,OAAO,KAAK;EAAAC,EAAA;EAC1F,MAAMC,SAAS,GAAGb,MAAM,CAAiB,IAAI,CAAC;EAC9C,IAAII,MAA2C;EAC/C,IAAIU,cAAyC;EAE7Cb,SAAS,CAAC,MAAM;IACZc,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;IACpB,IAAIH,SAAS,CAACI,OAAO,EAAE;MACnBb,MAAM,GAAGF,MAAM,CAACE,MAAM,CAACc,MAAM,CAACL,SAAS,CAACI,OAAO,EAAE;QAAC,GAAGP;MAAK,CAAC,CAAC;MAC5DI,cAAc,GAAGX,8BAA8B,CAACO,KAAK,CAACS,QAAQ,CAAC;MAE/D,OAAO,MAAM;QACTJ,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;QACvB,IAAIF,cAAc,EAAEA,cAAc,CAACM,OAAO,EAAE,CAAC,CAAG;QAChDhB,MAAM,CAACgB,OAAO,EAAE;MACpB,CAAC;IACL;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,oBAAOd,OAAA;IAAKe,SAAS,EAAC,QAAQ;IAACC,GAAG,EAAET,SAAU;IAACU,KAAK,EAAE;MAACC,MAAM,EAAE,YAAY;MAAEC,KAAK,EAAE;IAAY;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAO;AAC7G,CAAC;AAACjB,EAAA,CApBWH,UAA0D;AAAAqB,EAAA,GAA1DrB,UAA0D;AAAA,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}