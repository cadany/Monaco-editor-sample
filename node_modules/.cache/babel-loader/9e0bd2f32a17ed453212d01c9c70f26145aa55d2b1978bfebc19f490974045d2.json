{"ast":null,"code":"var _jsxFileName = \"/Users/cadany/WebstormProjects/monaco/src/CodeEditor.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport * as monaco from 'monaco-editor';\nimport { editor } from \"monaco-editor\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar IStandaloneEditorConstructionOptions = editor.IStandaloneEditorConstructionOptions;\nvar ITextModel = editor.ITextModel;\nvar IEditorViewState = editor.IEditorViewState;\nvar ICodeEditorViewState = editor.ICodeEditorViewState; // window.MonacoEnvironment = {\n//     getWorker: function (_moduleId: any, label: string) {\n//         // console.log(metadata.languages);\n//         switch (label) {\n//             case 'editorWorkerService':\n//                 return new Worker(new URL('monaco-editor/esm/vs/editor/editor.worker', import.meta.url));\n//             case 'css':\n//             case 'less':\n//             case 'scss':\n//                 return new Worker(new URL('monaco-editor/esm/vs/language/css/css.worker', import.meta.url));\n//             case 'handlebars':\n//             case 'html':\n//             case 'razor':\n//                 return new Worker(\n//                     new URL('monaco-editor/esm/vs/language/html/html.worker', import.meta.url),\n//                 );\n//             case 'json':\n//                 return new Worker(\n//                     new URL('monaco-editor/esm/vs/language/json/json.worker', import.meta.url),\n//                 );\n//             case 'javascript':\n//             case 'typescript':\n//                 return new Worker(\n//                     new URL('monaco-editor/esm/vs/language/typescript/ts.worker', import.meta.url),\n//                 );\n//             default:\n//                 throw new Error(`Unknown label ${label}`);\n//         }\n//     }\n// };\nexport const CodeEditor = (props, context) => {\n  _s();\n  const container = useRef(null);\n  let editor;\n  let autoCompletion;\n\n  //自定义提示\n  let customAutoCompletion = [{\n    label: \"item11\",\n    insertText: \"item text\",\n    kind: \"6\",\n    detail: \"TABLE.COLLUMN\"\n  }];\n  useEffect(() => {\n    if (container.current) {\n      var _props$standaloneEdit;\n      console.log(\"didMount ==> \" + ((_props$standaloneEdit = props.standaloneEditorConstructionOptions) === null || _props$standaloneEdit === void 0 ? void 0 : _props$standaloneEdit.language));\n      //didMount/didUpdateMount\n      editor = monaco.editor.create(container.current, {\n        language: \"mysql\",\n        value: \"select * from\"\n      });\n      // autoCompletion = registerAutoCompletionLanguage(\"mysq\");\n      // editor = monaco.editor.create(container.current, {...props.standaloneEditorConstructionOptions});\n      // if(props.standaloneEditorConstructionOptions?.model) {\n      //     editor.setModel(props.standaloneEditorConstructionOptions?.model)\n      //     autoCompletion = registerAutoCompletionLanguage(props.standaloneEditorConstructionOptions?.model.getLanguageId(), customAutoCompletion);\n      // }\n      return () => {\n        //didUnmount\n        if (autoCompletion) autoCompletion.dispose(); //防止自动提示重复\n        editor.dispose();\n      };\n    }\n  }, []);\n\n  // let sqlstate: IModelState = {model: monaco.editor.createModel(\"select * from table\", \"mysql\"), viewstate: null};\n  // let redisstate: IModelState = {model: monaco.editor.createModel(\"INFO \", \"redis\"), viewstate: null};\n\n  // function changeModel(type: number) {\n  //     if (autoCompletion) autoCompletion.dispose();\n  //     //保存状态\n  //     if (currentModel) {\n  //         currentModel.viewstate = editor.saveViewState();\n  //     }\n  //     //切换\n  //     switch (type) {\n  //         case 1:\n  //             currentModel = sqlstate;\n  //             editor.setModel(currentModel.model);\n  //             autoCompletion = registerAutoCompletionLanguage(\"mysql\", customAutoCompletion);\n  //             editor.focus();\n  //             break;\n  //         default:\n  //             currentModel = redisstate;\n  //             editor.setModel(currentModel.model);\n  //             autoCompletion = registerAutoCompletionLanguage(\"redis\", customAutoCompletion);\n  //             editor.focus();\n  //     }\n  //     //恢复状态\n  //     if (currentModel.viewstate) {\n  //         editor.restoreViewState(currentModel.viewstate);\n  //         editor.setScrollPosition({\n  //             scrollTop: currentModel.viewstate.viewState.scrollTop,\n  //             scrollLeft: currentModel.viewstate.viewState.scrollLeft\n  //         });\n  //     }\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: \"calc(100%)\",\n      width: \"calc(100%)\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Editor\",\n      ref: container,\n      style: {\n        height: \"calc(90%)\",\n        width: \"calc(100%)\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 12\n  }, this);\n};\n_s(CodeEditor, \"gP936EAkbq44zYYGRnj90r2fLhg=\");\n_c = CodeEditor;\nvar _c;\n$RefreshReg$(_c, \"CodeEditor\");","map":{"version":3,"names":["React","useRef","useEffect","monaco","editor","jsxDEV","_jsxDEV","IStandaloneEditorConstructionOptions","ITextModel","IEditorViewState","ICodeEditorViewState","CodeEditor","props","context","_s","container","autoCompletion","customAutoCompletion","label","insertText","kind","detail","current","_props$standaloneEdit","console","log","standaloneEditorConstructionOptions","language","create","value","dispose","style","height","width","children","className","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/cadany/WebstormProjects/monaco/src/CodeEditor.tsx"],"sourcesContent":["import React, {useRef, useEffect} from 'react';\nimport * as monaco from 'monaco-editor';\nimport {registerAutoCompletionLanguage} from \"./proxy\";\nimport {editor, IPosition} from \"monaco-editor\";\nimport IStandaloneEditorConstructionOptions = editor.IStandaloneEditorConstructionOptions;\nimport ITextModel = editor.ITextModel;\nimport IEditorViewState = editor.IEditorViewState;\nimport ICodeEditorViewState = editor.ICodeEditorViewState;\n\n\n// window.MonacoEnvironment = {\n//     getWorker: function (_moduleId: any, label: string) {\n//         // console.log(metadata.languages);\n//         switch (label) {\n//             case 'editorWorkerService':\n//                 return new Worker(new URL('monaco-editor/esm/vs/editor/editor.worker', import.meta.url));\n//             case 'css':\n//             case 'less':\n//             case 'scss':\n//                 return new Worker(new URL('monaco-editor/esm/vs/language/css/css.worker', import.meta.url));\n//             case 'handlebars':\n//             case 'html':\n//             case 'razor':\n//                 return new Worker(\n//                     new URL('monaco-editor/esm/vs/language/html/html.worker', import.meta.url),\n//                 );\n//             case 'json':\n//                 return new Worker(\n//                     new URL('monaco-editor/esm/vs/language/json/json.worker', import.meta.url),\n//                 );\n//             case 'javascript':\n//             case 'typescript':\n//                 return new Worker(\n//                     new URL('monaco-editor/esm/vs/language/typescript/ts.worker', import.meta.url),\n//                 );\n//             default:\n//                 throw new Error(`Unknown label ${label}`);\n//         }\n//     }\n// };\n\ninterface ISuggestions {\n    label: string;\n    kind: string;\n    insertText: string;\n    detail?: string;\n}\n\nexport interface IModelState {\n    // model: ITextModel,\n    viewstate?: ICodeEditorViewState | null,\n    standaloneEditorConstructionOptions?: IStandaloneEditorConstructionOptions\n}\n\n\n\nexport const CodeEditor: React.FC<IModelState> = (props, context) => {\n    const container = useRef<HTMLDivElement>(null);\n    let editor: monaco.editor.IStandaloneCodeEditor;\n    let autoCompletion: monaco.IDisposable;\n\n    //自定义提示\n    let customAutoCompletion: ISuggestions[] = [{\n        label: \"item11\",\n        insertText: \"item text\",\n        kind: \"6\",\n        detail: \"TABLE.COLLUMN\"\n    }];\n\n    useEffect(() => {\n        if (container.current) {\n            console.log(\"didMount ==> \"+props.standaloneEditorConstructionOptions?.language);\n            //didMount/didUpdateMount\n            editor = monaco.editor.create(container.current, {language:\"mysql\", value:\"select * from\"});\n            // autoCompletion = registerAutoCompletionLanguage(\"mysq\");\n            // editor = monaco.editor.create(container.current, {...props.standaloneEditorConstructionOptions});\n            // if(props.standaloneEditorConstructionOptions?.model) {\n            //     editor.setModel(props.standaloneEditorConstructionOptions?.model)\n            //     autoCompletion = registerAutoCompletionLanguage(props.standaloneEditorConstructionOptions?.model.getLanguageId(), customAutoCompletion);\n            // }\n            return () => {\n                //didUnmount\n                if (autoCompletion) autoCompletion.dispose();   //防止自动提示重复\n                editor.dispose();\n            };\n        }\n    }, []);\n\n    // let sqlstate: IModelState = {model: monaco.editor.createModel(\"select * from table\", \"mysql\"), viewstate: null};\n    // let redisstate: IModelState = {model: monaco.editor.createModel(\"INFO \", \"redis\"), viewstate: null};\n\n    // function changeModel(type: number) {\n    //     if (autoCompletion) autoCompletion.dispose();\n    //     //保存状态\n    //     if (currentModel) {\n    //         currentModel.viewstate = editor.saveViewState();\n    //     }\n    //     //切换\n    //     switch (type) {\n    //         case 1:\n    //             currentModel = sqlstate;\n    //             editor.setModel(currentModel.model);\n    //             autoCompletion = registerAutoCompletionLanguage(\"mysql\", customAutoCompletion);\n    //             editor.focus();\n    //             break;\n    //         default:\n    //             currentModel = redisstate;\n    //             editor.setModel(currentModel.model);\n    //             autoCompletion = registerAutoCompletionLanguage(\"redis\", customAutoCompletion);\n    //             editor.focus();\n    //     }\n    //     //恢复状态\n    //     if (currentModel.viewstate) {\n    //         editor.restoreViewState(currentModel.viewstate);\n    //         editor.setScrollPosition({\n    //             scrollTop: currentModel.viewstate.viewState.scrollTop,\n    //             scrollLeft: currentModel.viewstate.viewState.scrollLeft\n    //         });\n    //     }\n    // }\n\n    return <div style={{height: \"calc(100%)\", width: \"calc(100%)\"}}>\n        <div className=\"Editor\" ref={container} style={{height: \"calc(90%)\", width: \"calc(100%)\"}}></div>\n    </div>;\n};"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,MAAM,EAAEC,SAAS,QAAO,OAAO;AAC9C,OAAO,KAAKC,MAAM,MAAM,eAAe;AAEvC,SAAQC,MAAM,QAAkB,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,IACzCC,oCAAoC,GAAGH,MAAM,CAACG,oCAAoC;AAAA,IAClFC,UAAU,GAAGJ,MAAM,CAACI,UAAU;AAAA,IAC9BC,gBAAgB,GAAGL,MAAM,CAACK,gBAAgB;AAAA,IAC1CC,oBAAoB,GAAGN,MAAM,CAACM,oBAAoB,EAGzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAiBA,OAAO,MAAMC,UAAiC,GAAGA,CAACC,KAAK,EAAEC,OAAO,KAAK;EAAAC,EAAA;EACjE,MAAMC,SAAS,GAAGd,MAAM,CAAiB,IAAI,CAAC;EAC9C,IAAIG,MAA2C;EAC/C,IAAIY,cAAkC;;EAEtC;EACA,IAAIC,oBAAoC,GAAG,CAAC;IACxCC,KAAK,EAAE,QAAQ;IACfC,UAAU,EAAE,WAAW;IACvBC,IAAI,EAAE,GAAG;IACTC,MAAM,EAAE;EACZ,CAAC,CAAC;EAEFnB,SAAS,CAAC,MAAM;IACZ,IAAIa,SAAS,CAACO,OAAO,EAAE;MAAA,IAAAC,qBAAA;MACnBC,OAAO,CAACC,GAAG,CAAC,eAAe,KAAAF,qBAAA,GAACX,KAAK,CAACc,mCAAmC,cAAAH,qBAAA,uBAAzCA,qBAAA,CAA2CI,QAAQ,EAAC;MAChF;MACAvB,MAAM,GAAGD,MAAM,CAACC,MAAM,CAACwB,MAAM,CAACb,SAAS,CAACO,OAAO,EAAE;QAACK,QAAQ,EAAC,OAAO;QAAEE,KAAK,EAAC;MAAe,CAAC,CAAC;MAC3F;MACA;MACA;MACA;MACA;MACA;MACA,OAAO,MAAM;QACT;QACA,IAAIb,cAAc,EAAEA,cAAc,CAACc,OAAO,EAAE,CAAC,CAAG;QAChD1B,MAAM,CAAC0B,OAAO,EAAE;MACpB,CAAC;IACL;EACJ,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,oBAAOxB,OAAA;IAAKyB,KAAK,EAAE;MAACC,MAAM,EAAE,YAAY;MAAEC,KAAK,EAAE;IAAY,CAAE;IAAAC,QAAA,eAC3D5B,OAAA;MAAK6B,SAAS,EAAC,QAAQ;MAACC,GAAG,EAAErB,SAAU;MAACgB,KAAK,EAAE;QAACC,MAAM,EAAE,WAAW;QAAEC,KAAK,EAAE;MAAY;IAAE;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAO;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAC/F;AACV,CAAC;AAAC1B,EAAA,CApEWH,UAAiC;AAAA8B,EAAA,GAAjC9B,UAAiC;AAAA,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}