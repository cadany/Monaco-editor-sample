{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nimport * as dom from '../../../../base/browser/dom.js';\nimport { HoverAction, HoverWidget } from '../../../../base/browser/ui/hover/hoverWidget.js';\nimport { coalesce } from '../../../../base/common/arrays.js';\nimport { Disposable, DisposableStore, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { ModelDecorationOptions } from '../../../common/model/textModel.js';\nimport { TokenizationRegistry } from '../../../common/languages.js';\nimport { HoverOperation } from './hoverOperation.js';\nimport { HoverParticipantRegistry, HoverRangeAnchor } from './hoverTypes.js';\nimport { IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IKeybindingService } from '../../../../platform/keybinding/common/keybinding.js';\nimport { Context as SuggestContext } from '../../suggest/browser/suggest.js';\nimport { AsyncIterableObject } from '../../../../base/common/async.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nconst $ = dom.$;\nlet ContentHoverController = class ContentHoverController extends Disposable {\n  constructor(_editor, _instantiationService, _keybindingService) {\n    super();\n    this._editor = _editor;\n    this._instantiationService = _instantiationService;\n    this._keybindingService = _keybindingService;\n    this._widget = this._register(this._instantiationService.createInstance(ContentHoverWidget, this._editor));\n    this._currentResult = null;\n    // Instantiate participants and sort them by `hoverOrdinal` which is relevant for rendering order.\n    this._participants = [];\n    for (const participant of HoverParticipantRegistry.getAll()) {\n      this._participants.push(this._instantiationService.createInstance(participant, this._editor));\n    }\n    this._participants.sort((p1, p2) => p1.hoverOrdinal - p2.hoverOrdinal);\n    this._computer = new ContentHoverComputer(this._editor, this._participants);\n    this._hoverOperation = this._register(new HoverOperation(this._editor, this._computer));\n    this._register(this._hoverOperation.onResult(result => {\n      if (!this._computer.anchor) {\n        // invalid state, ignore result\n        return;\n      }\n      const messages = result.hasLoadingMessage ? this._addLoadingMessage(result.value) : result.value;\n      this._withResult(new HoverResult(this._computer.anchor, messages, result.isComplete));\n    }));\n    this._register(dom.addStandardDisposableListener(this._widget.getDomNode(), 'keydown', e => {\n      if (e.equals(9 /* KeyCode.Escape */)) {\n        this.hide();\n      }\n    }));\n    this._register(TokenizationRegistry.onDidChange(() => {\n      if (this._widget.position && this._currentResult) {\n        this._widget.clear();\n        this._setCurrentResult(this._currentResult); // render again\n      }\n    }));\n  }\n  /**\n   * Returns true if the hover shows now or will show.\n   */\n  maybeShowAt(mouseEvent) {\n    const anchorCandidates = [];\n    for (const participant of this._participants) {\n      if (participant.suggestHoverAnchor) {\n        const anchor = participant.suggestHoverAnchor(mouseEvent);\n        if (anchor) {\n          anchorCandidates.push(anchor);\n        }\n      }\n    }\n    const target = mouseEvent.target;\n    if (target.type === 6 /* MouseTargetType.CONTENT_TEXT */) {\n      anchorCandidates.push(new HoverRangeAnchor(0, target.range, mouseEvent.event.posx, mouseEvent.event.posy));\n    }\n    if (target.type === 7 /* MouseTargetType.CONTENT_EMPTY */) {\n      const epsilon = this._editor.getOption(47 /* EditorOption.fontInfo */).typicalHalfwidthCharacterWidth / 2;\n      if (!target.detail.isAfterLines && typeof target.detail.horizontalDistanceToText === 'number' && target.detail.horizontalDistanceToText < epsilon) {\n        // Let hover kick in even when the mouse is technically in the empty area after a line, given the distance is small enough\n        anchorCandidates.push(new HoverRangeAnchor(0, target.range, mouseEvent.event.posx, mouseEvent.event.posy));\n      }\n    }\n    if (anchorCandidates.length === 0) {\n      return this._startShowingOrUpdateHover(null, 0 /* HoverStartMode.Delayed */, 0 /* HoverStartSource.Mouse */, false, mouseEvent);\n    }\n    anchorCandidates.sort((a, b) => b.priority - a.priority);\n    return this._startShowingOrUpdateHover(anchorCandidates[0], 0 /* HoverStartMode.Delayed */, 0 /* HoverStartSource.Mouse */, false, mouseEvent);\n  }\n  startShowingAtRange(range, mode, source, focus) {\n    this._startShowingOrUpdateHover(new HoverRangeAnchor(0, range, undefined, undefined), mode, source, focus, null);\n  }\n  /**\n   * Returns true if the hover shows now or will show.\n   */\n  _startShowingOrUpdateHover(anchor, mode, source, focus, mouseEvent) {\n    if (!this._widget.position || !this._currentResult) {\n      // The hover is not visible\n      if (anchor) {\n        this._startHoverOperationIfNecessary(anchor, mode, source, focus, false);\n        return true;\n      }\n      return false;\n    }\n    // The hover is currently visible\n    const hoverIsSticky = this._editor.getOption(57 /* EditorOption.hover */).sticky;\n    const isGettingCloser = hoverIsSticky && mouseEvent && this._widget.isMouseGettingCloser(mouseEvent.event.posx, mouseEvent.event.posy);\n    if (isGettingCloser) {\n      // The mouse is getting closer to the hover, so we will keep the hover untouched\n      // But we will kick off a hover update at the new anchor, insisting on keeping the hover visible.\n      if (anchor) {\n        this._startHoverOperationIfNecessary(anchor, mode, source, focus, true);\n      }\n      return true;\n    }\n    if (!anchor) {\n      this._setCurrentResult(null);\n      return false;\n    }\n    if (anchor && this._currentResult.anchor.equals(anchor)) {\n      // The widget is currently showing results for the exact same anchor, so no update is needed\n      return true;\n    }\n    if (!anchor.canAdoptVisibleHover(this._currentResult.anchor, this._widget.position)) {\n      // The new anchor is not compatible with the previous anchor\n      this._setCurrentResult(null);\n      this._startHoverOperationIfNecessary(anchor, mode, source, focus, false);\n      return true;\n    }\n    // We aren't getting any closer to the hover, so we will filter existing results\n    // and keep those which also apply to the new anchor.\n    this._setCurrentResult(this._currentResult.filter(anchor));\n    this._startHoverOperationIfNecessary(anchor, mode, source, focus, false);\n    return true;\n  }\n  _startHoverOperationIfNecessary(anchor, mode, source, focus, insistOnKeepingHoverVisible) {\n    if (this._computer.anchor && this._computer.anchor.equals(anchor)) {\n      // We have to start a hover operation at the exact same anchor as before, so no work is needed\n      return;\n    }\n    this._hoverOperation.cancel();\n    this._computer.anchor = anchor;\n    this._computer.shouldFocus = focus;\n    this._computer.source = source;\n    this._computer.insistOnKeepingHoverVisible = insistOnKeepingHoverVisible;\n    this._hoverOperation.start(mode);\n  }\n  _setCurrentResult(hoverResult) {\n    if (this._currentResult === hoverResult) {\n      // avoid updating the DOM to avoid resetting the user selection\n      return;\n    }\n    if (hoverResult && hoverResult.messages.length === 0) {\n      hoverResult = null;\n    }\n    this._currentResult = hoverResult;\n    if (this._currentResult) {\n      this._renderMessages(this._currentResult.anchor, this._currentResult.messages);\n    } else {\n      this._widget.hide();\n    }\n  }\n  hide() {\n    this._computer.anchor = null;\n    this._hoverOperation.cancel();\n    this._setCurrentResult(null);\n  }\n  isColorPickerVisible() {\n    return this._widget.isColorPickerVisible;\n  }\n  isVisibleFromKeyboard() {\n    return this._widget.isVisibleFromKeyboard;\n  }\n  containsNode(node) {\n    return this._widget.getDomNode().contains(node);\n  }\n  _addLoadingMessage(result) {\n    if (this._computer.anchor) {\n      for (const participant of this._participants) {\n        if (participant.createLoadingMessage) {\n          const loadingMessage = participant.createLoadingMessage(this._computer.anchor);\n          if (loadingMessage) {\n            return result.slice(0).concat([loadingMessage]);\n          }\n        }\n      }\n    }\n    return result;\n  }\n  _withResult(hoverResult) {\n    if (this._widget.position && this._currentResult && this._currentResult.isComplete) {\n      // The hover is visible with a previous complete result.\n      if (!hoverResult.isComplete) {\n        // Instead of rendering the new partial result, we wait for the result to be complete.\n        return;\n      }\n      if (this._computer.insistOnKeepingHoverVisible && hoverResult.messages.length === 0) {\n        // The hover would now hide normally, so we'll keep the previous messages\n        return;\n      }\n    }\n    this._setCurrentResult(hoverResult);\n  }\n  _renderMessages(anchor, messages) {\n    const {\n      showAtPosition,\n      showAtSecondaryPosition,\n      highlightRange\n    } = ContentHoverController.computeHoverRanges(this._editor, anchor.range, messages);\n    const disposables = new DisposableStore();\n    const statusBar = disposables.add(new EditorHoverStatusBar(this._keybindingService));\n    const fragment = document.createDocumentFragment();\n    let colorPicker = null;\n    const context = {\n      fragment,\n      statusBar,\n      setColorPicker: widget => colorPicker = widget,\n      onContentsChanged: () => this._widget.onContentsChanged(),\n      hide: () => this.hide()\n    };\n    for (const participant of this._participants) {\n      const hoverParts = messages.filter(msg => msg.owner === participant);\n      if (hoverParts.length > 0) {\n        disposables.add(participant.renderHoverParts(context, hoverParts));\n      }\n    }\n    const isBeforeContent = messages.some(m => m.isBeforeContent);\n    if (statusBar.hasContent) {\n      fragment.appendChild(statusBar.hoverElement);\n    }\n    if (fragment.hasChildNodes()) {\n      if (highlightRange) {\n        const highlightDecoration = this._editor.createDecorationsCollection();\n        highlightDecoration.set([{\n          range: highlightRange,\n          options: ContentHoverController._DECORATION_OPTIONS\n        }]);\n        disposables.add(toDisposable(() => {\n          highlightDecoration.clear();\n        }));\n      }\n      this._widget.showAt(fragment, new ContentHoverVisibleData(colorPicker, showAtPosition, showAtSecondaryPosition, this._editor.getOption(57 /* EditorOption.hover */).above, this._computer.shouldFocus, this._computer.source, isBeforeContent, anchor.initialMousePosX, anchor.initialMousePosY, disposables));\n    } else {\n      disposables.dispose();\n    }\n  }\n  static computeHoverRanges(editor, anchorRange, messages) {\n    let startColumnBoundary = 1;\n    if (editor.hasModel()) {\n      // Ensure the range is on the current view line\n      const viewModel = editor._getViewModel();\n      const coordinatesConverter = viewModel.coordinatesConverter;\n      const anchorViewRange = coordinatesConverter.convertModelRangeToViewRange(anchorRange);\n      const anchorViewRangeStart = new Position(anchorViewRange.startLineNumber, viewModel.getLineMinColumn(anchorViewRange.startLineNumber));\n      startColumnBoundary = coordinatesConverter.convertViewPositionToModelPosition(anchorViewRangeStart).column;\n    }\n    // The anchor range is always on a single line\n    const anchorLineNumber = anchorRange.startLineNumber;\n    let renderStartColumn = anchorRange.startColumn;\n    let highlightRange = messages[0].range;\n    let forceShowAtRange = null;\n    for (const msg of messages) {\n      highlightRange = Range.plusRange(highlightRange, msg.range);\n      if (msg.range.startLineNumber === anchorLineNumber && msg.range.endLineNumber === anchorLineNumber) {\n        // this message has a range that is completely sitting on the line of the anchor\n        renderStartColumn = Math.max(Math.min(renderStartColumn, msg.range.startColumn), startColumnBoundary);\n      }\n      if (msg.forceShowAtRange) {\n        forceShowAtRange = msg.range;\n      }\n    }\n    return {\n      showAtPosition: forceShowAtRange ? forceShowAtRange.getStartPosition() : new Position(anchorLineNumber, anchorRange.startColumn),\n      showAtSecondaryPosition: forceShowAtRange ? forceShowAtRange.getStartPosition() : new Position(anchorLineNumber, renderStartColumn),\n      highlightRange\n    };\n  }\n};\nContentHoverController._DECORATION_OPTIONS = ModelDecorationOptions.register({\n  description: 'content-hover-highlight',\n  className: 'hoverHighlight'\n});\nContentHoverController = __decorate([__param(1, IInstantiationService), __param(2, IKeybindingService)], ContentHoverController);\nexport { ContentHoverController };\nclass HoverResult {\n  constructor(anchor, messages, isComplete) {\n    this.anchor = anchor;\n    this.messages = messages;\n    this.isComplete = isComplete;\n  }\n  filter(anchor) {\n    const filteredMessages = this.messages.filter(m => m.isValidForHoverAnchor(anchor));\n    if (filteredMessages.length === this.messages.length) {\n      return this;\n    }\n    return new FilteredHoverResult(this, this.anchor, filteredMessages, this.isComplete);\n  }\n}\nclass FilteredHoverResult extends HoverResult {\n  constructor(original, anchor, messages, isComplete) {\n    super(anchor, messages, isComplete);\n    this.original = original;\n  }\n  filter(anchor) {\n    return this.original.filter(anchor);\n  }\n}\nclass ContentHoverVisibleData {\n  constructor(colorPicker, showAtPosition, showAtSecondaryPosition, preferAbove, stoleFocus, source, isBeforeContent, initialMousePosX, initialMousePosY, disposables) {\n    this.colorPicker = colorPicker;\n    this.showAtPosition = showAtPosition;\n    this.showAtSecondaryPosition = showAtSecondaryPosition;\n    this.preferAbove = preferAbove;\n    this.stoleFocus = stoleFocus;\n    this.source = source;\n    this.isBeforeContent = isBeforeContent;\n    this.initialMousePosX = initialMousePosX;\n    this.initialMousePosY = initialMousePosY;\n    this.disposables = disposables;\n    this.closestMouseDistance = undefined;\n  }\n}\nlet ContentHoverWidget = class ContentHoverWidget extends Disposable {\n  /**\n   * Returns `null` if the hover is not visible.\n   */\n  get position() {\n    var _a, _b;\n    return (_b = (_a = this._visibleData) === null || _a === void 0 ? void 0 : _a.showAtPosition) !== null && _b !== void 0 ? _b : null;\n  }\n  get isColorPickerVisible() {\n    var _a;\n    return Boolean((_a = this._visibleData) === null || _a === void 0 ? void 0 : _a.colorPicker);\n  }\n  get isVisibleFromKeyboard() {\n    var _a;\n    return ((_a = this._visibleData) === null || _a === void 0 ? void 0 : _a.source) === 1 /* HoverStartSource.Keyboard */;\n  }\n\n  constructor(_editor, _contextKeyService) {\n    super();\n    this._editor = _editor;\n    this._contextKeyService = _contextKeyService;\n    this.allowEditorOverflow = true;\n    this._hoverVisibleKey = EditorContextKeys.hoverVisible.bindTo(this._contextKeyService);\n    this._hover = this._register(new HoverWidget());\n    this._visibleData = null;\n    this._register(this._editor.onDidLayoutChange(() => this._layout()));\n    this._register(this._editor.onDidChangeConfiguration(e => {\n      if (e.hasChanged(47 /* EditorOption.fontInfo */)) {\n        this._updateFont();\n      }\n    }));\n    this._setVisibleData(null);\n    this._layout();\n    this._editor.addContentWidget(this);\n  }\n  dispose() {\n    this._editor.removeContentWidget(this);\n    if (this._visibleData) {\n      this._visibleData.disposables.dispose();\n    }\n    super.dispose();\n  }\n  getId() {\n    return ContentHoverWidget.ID;\n  }\n  getDomNode() {\n    return this._hover.containerDomNode;\n  }\n  getPosition() {\n    if (!this._visibleData) {\n      return null;\n    }\n    let preferAbove = this._visibleData.preferAbove;\n    if (!preferAbove && this._contextKeyService.getContextKeyValue(SuggestContext.Visible.key)) {\n      // Prefer rendering above if the suggest widget is visible\n      preferAbove = true;\n    }\n    // :before content can align left of the text content\n    const affinity = this._visibleData.isBeforeContent ? 3 /* PositionAffinity.LeftOfInjectedText */ : undefined;\n    return {\n      position: this._visibleData.showAtPosition,\n      secondaryPosition: this._visibleData.showAtSecondaryPosition,\n      preference: preferAbove ? [1 /* ContentWidgetPositionPreference.ABOVE */, 2 /* ContentWidgetPositionPreference.BELOW */] : [2 /* ContentWidgetPositionPreference.BELOW */, 1 /* ContentWidgetPositionPreference.ABOVE */],\n      positionAffinity: affinity\n    };\n  }\n  isMouseGettingCloser(posx, posy) {\n    if (!this._visibleData) {\n      return false;\n    }\n    if (typeof this._visibleData.initialMousePosX === 'undefined' || typeof this._visibleData.initialMousePosY === 'undefined') {\n      this._visibleData.initialMousePosX = posx;\n      this._visibleData.initialMousePosY = posy;\n      return false;\n    }\n    const widgetRect = dom.getDomNodePagePosition(this.getDomNode());\n    if (typeof this._visibleData.closestMouseDistance === 'undefined') {\n      this._visibleData.closestMouseDistance = computeDistanceFromPointToRectangle(this._visibleData.initialMousePosX, this._visibleData.initialMousePosY, widgetRect.left, widgetRect.top, widgetRect.width, widgetRect.height);\n    }\n    const distance = computeDistanceFromPointToRectangle(posx, posy, widgetRect.left, widgetRect.top, widgetRect.width, widgetRect.height);\n    if (distance > this._visibleData.closestMouseDistance + 4 /* tolerance of 4 pixels */) {\n      // The mouse is getting farther away\n      return false;\n    }\n    this._visibleData.closestMouseDistance = Math.min(this._visibleData.closestMouseDistance, distance);\n    return true;\n  }\n  _setVisibleData(visibleData) {\n    if (this._visibleData) {\n      this._visibleData.disposables.dispose();\n    }\n    this._visibleData = visibleData;\n    this._hoverVisibleKey.set(!!this._visibleData);\n    this._hover.containerDomNode.classList.toggle('hidden', !this._visibleData);\n  }\n  _layout() {\n    const height = Math.max(this._editor.getLayoutInfo().height / 4, 250);\n    const {\n      fontSize,\n      lineHeight\n    } = this._editor.getOption(47 /* EditorOption.fontInfo */);\n    this._hover.contentsDomNode.style.fontSize = `${fontSize}px`;\n    this._hover.contentsDomNode.style.lineHeight = `${lineHeight / fontSize}`;\n    this._hover.contentsDomNode.style.maxHeight = `${height}px`;\n    this._hover.contentsDomNode.style.maxWidth = `${Math.max(this._editor.getLayoutInfo().width * 0.66, 500)}px`;\n  }\n  _updateFont() {\n    const codeClasses = Array.prototype.slice.call(this._hover.contentsDomNode.getElementsByClassName('code'));\n    codeClasses.forEach(node => this._editor.applyFontInfo(node));\n  }\n  showAt(node, visibleData) {\n    var _a;\n    this._setVisibleData(visibleData);\n    this._hover.contentsDomNode.textContent = '';\n    this._hover.contentsDomNode.appendChild(node);\n    this._hover.contentsDomNode.style.paddingBottom = '';\n    this._updateFont();\n    this.onContentsChanged();\n    // Simply force a synchronous render on the editor\n    // such that the widget does not really render with left = '0px'\n    this._editor.render();\n    // See https://github.com/microsoft/vscode/issues/140339\n    // TODO: Doing a second layout of the hover after force rendering the editor\n    this.onContentsChanged();\n    if (visibleData.stoleFocus) {\n      this._hover.containerDomNode.focus();\n    }\n    (_a = visibleData.colorPicker) === null || _a === void 0 ? void 0 : _a.layout();\n  }\n  hide() {\n    if (this._visibleData) {\n      const stoleFocus = this._visibleData.stoleFocus;\n      this._setVisibleData(null);\n      this._editor.layoutContentWidget(this);\n      if (stoleFocus) {\n        this._editor.focus();\n      }\n    }\n  }\n  onContentsChanged() {\n    this._editor.layoutContentWidget(this);\n    this._hover.onContentsChanged();\n    const scrollDimensions = this._hover.scrollbar.getScrollDimensions();\n    const hasHorizontalScrollbar = scrollDimensions.scrollWidth > scrollDimensions.width;\n    if (hasHorizontalScrollbar) {\n      // There is just a horizontal scrollbar\n      const extraBottomPadding = `${this._hover.scrollbar.options.horizontalScrollbarSize}px`;\n      if (this._hover.contentsDomNode.style.paddingBottom !== extraBottomPadding) {\n        this._hover.contentsDomNode.style.paddingBottom = extraBottomPadding;\n        this._editor.layoutContentWidget(this);\n        this._hover.onContentsChanged();\n      }\n    }\n  }\n  clear() {\n    this._hover.contentsDomNode.textContent = '';\n  }\n};\nContentHoverWidget.ID = 'editor.contrib.contentHoverWidget';\nContentHoverWidget = __decorate([__param(1, IContextKeyService)], ContentHoverWidget);\nexport { ContentHoverWidget };\nlet EditorHoverStatusBar = class EditorHoverStatusBar extends Disposable {\n  get hasContent() {\n    return this._hasContent;\n  }\n  constructor(_keybindingService) {\n    super();\n    this._keybindingService = _keybindingService;\n    this._hasContent = false;\n    this.hoverElement = $('div.hover-row.status-bar');\n    this.actionsElement = dom.append(this.hoverElement, $('div.actions'));\n  }\n  addAction(actionOptions) {\n    const keybinding = this._keybindingService.lookupKeybinding(actionOptions.commandId);\n    const keybindingLabel = keybinding ? keybinding.getLabel() : null;\n    this._hasContent = true;\n    return this._register(HoverAction.render(this.actionsElement, actionOptions, keybindingLabel));\n  }\n  append(element) {\n    const result = dom.append(this.actionsElement, element);\n    this._hasContent = true;\n    return result;\n  }\n};\nEditorHoverStatusBar = __decorate([__param(0, IKeybindingService)], EditorHoverStatusBar);\nclass ContentHoverComputer {\n  get anchor() {\n    return this._anchor;\n  }\n  set anchor(value) {\n    this._anchor = value;\n  }\n  get shouldFocus() {\n    return this._shouldFocus;\n  }\n  set shouldFocus(value) {\n    this._shouldFocus = value;\n  }\n  get source() {\n    return this._source;\n  }\n  set source(value) {\n    this._source = value;\n  }\n  get insistOnKeepingHoverVisible() {\n    return this._insistOnKeepingHoverVisible;\n  }\n  set insistOnKeepingHoverVisible(value) {\n    this._insistOnKeepingHoverVisible = value;\n  }\n  constructor(_editor, _participants) {\n    this._editor = _editor;\n    this._participants = _participants;\n    this._anchor = null;\n    this._shouldFocus = false;\n    this._source = 0 /* HoverStartSource.Mouse */;\n    this._insistOnKeepingHoverVisible = false;\n  }\n  static _getLineDecorations(editor, anchor) {\n    if (anchor.type !== 1 /* HoverAnchorType.Range */ && !anchor.supportsMarkerHover) {\n      return [];\n    }\n    const model = editor.getModel();\n    const lineNumber = anchor.range.startLineNumber;\n    if (lineNumber > model.getLineCount()) {\n      // invalid line\n      return [];\n    }\n    const maxColumn = model.getLineMaxColumn(lineNumber);\n    return editor.getLineDecorations(lineNumber).filter(d => {\n      if (d.options.isWholeLine) {\n        return true;\n      }\n      const startColumn = d.range.startLineNumber === lineNumber ? d.range.startColumn : 1;\n      const endColumn = d.range.endLineNumber === lineNumber ? d.range.endColumn : maxColumn;\n      if (d.options.showIfCollapsed) {\n        // Relax check around `showIfCollapsed` decorations to also include +/- 1 character\n        if (startColumn > anchor.range.startColumn + 1 || anchor.range.endColumn - 1 > endColumn) {\n          return false;\n        }\n      } else {\n        if (startColumn > anchor.range.startColumn || anchor.range.endColumn > endColumn) {\n          return false;\n        }\n      }\n      return true;\n    });\n  }\n  computeAsync(token) {\n    const anchor = this._anchor;\n    if (!this._editor.hasModel() || !anchor) {\n      return AsyncIterableObject.EMPTY;\n    }\n    const lineDecorations = ContentHoverComputer._getLineDecorations(this._editor, anchor);\n    return AsyncIterableObject.merge(this._participants.map(participant => {\n      if (!participant.computeAsync) {\n        return AsyncIterableObject.EMPTY;\n      }\n      return participant.computeAsync(anchor, lineDecorations, token);\n    }));\n  }\n  computeSync() {\n    if (!this._editor.hasModel() || !this._anchor) {\n      return [];\n    }\n    const lineDecorations = ContentHoverComputer._getLineDecorations(this._editor, this._anchor);\n    let result = [];\n    for (const participant of this._participants) {\n      result = result.concat(participant.computeSync(this._anchor, lineDecorations));\n    }\n    return coalesce(result);\n  }\n}\nfunction computeDistanceFromPointToRectangle(pointX, pointY, left, top, width, height) {\n  const x = left + width / 2; // x center of rectangle\n  const y = top + height / 2; // y center of rectangle\n  const dx = Math.max(Math.abs(pointX - x) - width / 2, 0);\n  const dy = Math.max(Math.abs(pointY - y) - height / 2, 0);\n  return Math.sqrt(dx * dx + dy * dy);\n}","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","dom","HoverAction","HoverWidget","coalesce","Disposable","DisposableStore","toDisposable","Position","Range","ModelDecorationOptions","TokenizationRegistry","HoverOperation","HoverParticipantRegistry","HoverRangeAnchor","IContextKeyService","IInstantiationService","IKeybindingService","Context","SuggestContext","AsyncIterableObject","EditorContextKeys","$","ContentHoverController","constructor","_editor","_instantiationService","_keybindingService","_widget","_register","createInstance","ContentHoverWidget","_currentResult","_participants","participant","getAll","push","sort","p1","p2","hoverOrdinal","_computer","ContentHoverComputer","_hoverOperation","onResult","result","anchor","messages","hasLoadingMessage","_addLoadingMessage","value","_withResult","HoverResult","isComplete","addStandardDisposableListener","getDomNode","e","equals","hide","onDidChange","position","clear","_setCurrentResult","maybeShowAt","mouseEvent","anchorCandidates","suggestHoverAnchor","type","range","event","posx","posy","epsilon","getOption","typicalHalfwidthCharacterWidth","detail","isAfterLines","horizontalDistanceToText","_startShowingOrUpdateHover","a","b","priority","startShowingAtRange","mode","source","focus","undefined","_startHoverOperationIfNecessary","hoverIsSticky","sticky","isGettingCloser","isMouseGettingCloser","canAdoptVisibleHover","filter","insistOnKeepingHoverVisible","cancel","shouldFocus","start","hoverResult","_renderMessages","isColorPickerVisible","isVisibleFromKeyboard","containsNode","node","contains","createLoadingMessage","loadingMessage","slice","concat","showAtPosition","showAtSecondaryPosition","highlightRange","computeHoverRanges","disposables","statusBar","add","EditorHoverStatusBar","fragment","document","createDocumentFragment","colorPicker","context","setColorPicker","widget","onContentsChanged","hoverParts","msg","owner","renderHoverParts","isBeforeContent","some","m","hasContent","appendChild","hoverElement","hasChildNodes","highlightDecoration","createDecorationsCollection","set","options","_DECORATION_OPTIONS","showAt","ContentHoverVisibleData","above","initialMousePosX","initialMousePosY","dispose","editor","anchorRange","startColumnBoundary","hasModel","viewModel","_getViewModel","coordinatesConverter","anchorViewRange","convertModelRangeToViewRange","anchorViewRangeStart","startLineNumber","getLineMinColumn","convertViewPositionToModelPosition","column","anchorLineNumber","renderStartColumn","startColumn","forceShowAtRange","plusRange","endLineNumber","Math","max","min","getStartPosition","register","description","className","filteredMessages","isValidForHoverAnchor","FilteredHoverResult","original","preferAbove","stoleFocus","closestMouseDistance","_a","_b","_visibleData","Boolean","_contextKeyService","allowEditorOverflow","_hoverVisibleKey","hoverVisible","bindTo","_hover","onDidLayoutChange","_layout","onDidChangeConfiguration","hasChanged","_updateFont","_setVisibleData","addContentWidget","removeContentWidget","getId","ID","containerDomNode","getPosition","getContextKeyValue","Visible","affinity","secondaryPosition","preference","positionAffinity","widgetRect","getDomNodePagePosition","computeDistanceFromPointToRectangle","left","top","width","height","distance","visibleData","classList","toggle","getLayoutInfo","fontSize","lineHeight","contentsDomNode","style","maxHeight","maxWidth","codeClasses","Array","prototype","call","getElementsByClassName","forEach","applyFontInfo","textContent","paddingBottom","render","layout","layoutContentWidget","scrollDimensions","scrollbar","getScrollDimensions","hasHorizontalScrollbar","scrollWidth","extraBottomPadding","horizontalScrollbarSize","_hasContent","actionsElement","append","addAction","actionOptions","keybinding","lookupKeybinding","commandId","keybindingLabel","getLabel","element","_anchor","_shouldFocus","_source","_insistOnKeepingHoverVisible","_getLineDecorations","supportsMarkerHover","model","getModel","lineNumber","getLineCount","maxColumn","getLineMaxColumn","getLineDecorations","isWholeLine","endColumn","showIfCollapsed","computeAsync","token","EMPTY","lineDecorations","merge","map","computeSync","pointX","pointY","x","y","dx","abs","dy","sqrt"],"sources":["/Users/cadany/WebstormProjects/monaco-editor-sample/node_modules/monaco-editor/esm/vs/editor/contrib/hover/browser/contentHover.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport * as dom from '../../../../base/browser/dom.js';\nimport { HoverAction, HoverWidget } from '../../../../base/browser/ui/hover/hoverWidget.js';\nimport { coalesce } from '../../../../base/common/arrays.js';\nimport { Disposable, DisposableStore, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { ModelDecorationOptions } from '../../../common/model/textModel.js';\nimport { TokenizationRegistry } from '../../../common/languages.js';\nimport { HoverOperation } from './hoverOperation.js';\nimport { HoverParticipantRegistry, HoverRangeAnchor } from './hoverTypes.js';\nimport { IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { IKeybindingService } from '../../../../platform/keybinding/common/keybinding.js';\nimport { Context as SuggestContext } from '../../suggest/browser/suggest.js';\nimport { AsyncIterableObject } from '../../../../base/common/async.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nconst $ = dom.$;\nlet ContentHoverController = class ContentHoverController extends Disposable {\n    constructor(_editor, _instantiationService, _keybindingService) {\n        super();\n        this._editor = _editor;\n        this._instantiationService = _instantiationService;\n        this._keybindingService = _keybindingService;\n        this._widget = this._register(this._instantiationService.createInstance(ContentHoverWidget, this._editor));\n        this._currentResult = null;\n        // Instantiate participants and sort them by `hoverOrdinal` which is relevant for rendering order.\n        this._participants = [];\n        for (const participant of HoverParticipantRegistry.getAll()) {\n            this._participants.push(this._instantiationService.createInstance(participant, this._editor));\n        }\n        this._participants.sort((p1, p2) => p1.hoverOrdinal - p2.hoverOrdinal);\n        this._computer = new ContentHoverComputer(this._editor, this._participants);\n        this._hoverOperation = this._register(new HoverOperation(this._editor, this._computer));\n        this._register(this._hoverOperation.onResult((result) => {\n            if (!this._computer.anchor) {\n                // invalid state, ignore result\n                return;\n            }\n            const messages = (result.hasLoadingMessage ? this._addLoadingMessage(result.value) : result.value);\n            this._withResult(new HoverResult(this._computer.anchor, messages, result.isComplete));\n        }));\n        this._register(dom.addStandardDisposableListener(this._widget.getDomNode(), 'keydown', (e) => {\n            if (e.equals(9 /* KeyCode.Escape */)) {\n                this.hide();\n            }\n        }));\n        this._register(TokenizationRegistry.onDidChange(() => {\n            if (this._widget.position && this._currentResult) {\n                this._widget.clear();\n                this._setCurrentResult(this._currentResult); // render again\n            }\n        }));\n    }\n    /**\n     * Returns true if the hover shows now or will show.\n     */\n    maybeShowAt(mouseEvent) {\n        const anchorCandidates = [];\n        for (const participant of this._participants) {\n            if (participant.suggestHoverAnchor) {\n                const anchor = participant.suggestHoverAnchor(mouseEvent);\n                if (anchor) {\n                    anchorCandidates.push(anchor);\n                }\n            }\n        }\n        const target = mouseEvent.target;\n        if (target.type === 6 /* MouseTargetType.CONTENT_TEXT */) {\n            anchorCandidates.push(new HoverRangeAnchor(0, target.range, mouseEvent.event.posx, mouseEvent.event.posy));\n        }\n        if (target.type === 7 /* MouseTargetType.CONTENT_EMPTY */) {\n            const epsilon = this._editor.getOption(47 /* EditorOption.fontInfo */).typicalHalfwidthCharacterWidth / 2;\n            if (!target.detail.isAfterLines && typeof target.detail.horizontalDistanceToText === 'number' && target.detail.horizontalDistanceToText < epsilon) {\n                // Let hover kick in even when the mouse is technically in the empty area after a line, given the distance is small enough\n                anchorCandidates.push(new HoverRangeAnchor(0, target.range, mouseEvent.event.posx, mouseEvent.event.posy));\n            }\n        }\n        if (anchorCandidates.length === 0) {\n            return this._startShowingOrUpdateHover(null, 0 /* HoverStartMode.Delayed */, 0 /* HoverStartSource.Mouse */, false, mouseEvent);\n        }\n        anchorCandidates.sort((a, b) => b.priority - a.priority);\n        return this._startShowingOrUpdateHover(anchorCandidates[0], 0 /* HoverStartMode.Delayed */, 0 /* HoverStartSource.Mouse */, false, mouseEvent);\n    }\n    startShowingAtRange(range, mode, source, focus) {\n        this._startShowingOrUpdateHover(new HoverRangeAnchor(0, range, undefined, undefined), mode, source, focus, null);\n    }\n    /**\n     * Returns true if the hover shows now or will show.\n     */\n    _startShowingOrUpdateHover(anchor, mode, source, focus, mouseEvent) {\n        if (!this._widget.position || !this._currentResult) {\n            // The hover is not visible\n            if (anchor) {\n                this._startHoverOperationIfNecessary(anchor, mode, source, focus, false);\n                return true;\n            }\n            return false;\n        }\n        // The hover is currently visible\n        const hoverIsSticky = this._editor.getOption(57 /* EditorOption.hover */).sticky;\n        const isGettingCloser = (hoverIsSticky && mouseEvent && this._widget.isMouseGettingCloser(mouseEvent.event.posx, mouseEvent.event.posy));\n        if (isGettingCloser) {\n            // The mouse is getting closer to the hover, so we will keep the hover untouched\n            // But we will kick off a hover update at the new anchor, insisting on keeping the hover visible.\n            if (anchor) {\n                this._startHoverOperationIfNecessary(anchor, mode, source, focus, true);\n            }\n            return true;\n        }\n        if (!anchor) {\n            this._setCurrentResult(null);\n            return false;\n        }\n        if (anchor && this._currentResult.anchor.equals(anchor)) {\n            // The widget is currently showing results for the exact same anchor, so no update is needed\n            return true;\n        }\n        if (!anchor.canAdoptVisibleHover(this._currentResult.anchor, this._widget.position)) {\n            // The new anchor is not compatible with the previous anchor\n            this._setCurrentResult(null);\n            this._startHoverOperationIfNecessary(anchor, mode, source, focus, false);\n            return true;\n        }\n        // We aren't getting any closer to the hover, so we will filter existing results\n        // and keep those which also apply to the new anchor.\n        this._setCurrentResult(this._currentResult.filter(anchor));\n        this._startHoverOperationIfNecessary(anchor, mode, source, focus, false);\n        return true;\n    }\n    _startHoverOperationIfNecessary(anchor, mode, source, focus, insistOnKeepingHoverVisible) {\n        if (this._computer.anchor && this._computer.anchor.equals(anchor)) {\n            // We have to start a hover operation at the exact same anchor as before, so no work is needed\n            return;\n        }\n        this._hoverOperation.cancel();\n        this._computer.anchor = anchor;\n        this._computer.shouldFocus = focus;\n        this._computer.source = source;\n        this._computer.insistOnKeepingHoverVisible = insistOnKeepingHoverVisible;\n        this._hoverOperation.start(mode);\n    }\n    _setCurrentResult(hoverResult) {\n        if (this._currentResult === hoverResult) {\n            // avoid updating the DOM to avoid resetting the user selection\n            return;\n        }\n        if (hoverResult && hoverResult.messages.length === 0) {\n            hoverResult = null;\n        }\n        this._currentResult = hoverResult;\n        if (this._currentResult) {\n            this._renderMessages(this._currentResult.anchor, this._currentResult.messages);\n        }\n        else {\n            this._widget.hide();\n        }\n    }\n    hide() {\n        this._computer.anchor = null;\n        this._hoverOperation.cancel();\n        this._setCurrentResult(null);\n    }\n    isColorPickerVisible() {\n        return this._widget.isColorPickerVisible;\n    }\n    isVisibleFromKeyboard() {\n        return this._widget.isVisibleFromKeyboard;\n    }\n    containsNode(node) {\n        return this._widget.getDomNode().contains(node);\n    }\n    _addLoadingMessage(result) {\n        if (this._computer.anchor) {\n            for (const participant of this._participants) {\n                if (participant.createLoadingMessage) {\n                    const loadingMessage = participant.createLoadingMessage(this._computer.anchor);\n                    if (loadingMessage) {\n                        return result.slice(0).concat([loadingMessage]);\n                    }\n                }\n            }\n        }\n        return result;\n    }\n    _withResult(hoverResult) {\n        if (this._widget.position && this._currentResult && this._currentResult.isComplete) {\n            // The hover is visible with a previous complete result.\n            if (!hoverResult.isComplete) {\n                // Instead of rendering the new partial result, we wait for the result to be complete.\n                return;\n            }\n            if (this._computer.insistOnKeepingHoverVisible && hoverResult.messages.length === 0) {\n                // The hover would now hide normally, so we'll keep the previous messages\n                return;\n            }\n        }\n        this._setCurrentResult(hoverResult);\n    }\n    _renderMessages(anchor, messages) {\n        const { showAtPosition, showAtSecondaryPosition, highlightRange } = ContentHoverController.computeHoverRanges(this._editor, anchor.range, messages);\n        const disposables = new DisposableStore();\n        const statusBar = disposables.add(new EditorHoverStatusBar(this._keybindingService));\n        const fragment = document.createDocumentFragment();\n        let colorPicker = null;\n        const context = {\n            fragment,\n            statusBar,\n            setColorPicker: (widget) => colorPicker = widget,\n            onContentsChanged: () => this._widget.onContentsChanged(),\n            hide: () => this.hide()\n        };\n        for (const participant of this._participants) {\n            const hoverParts = messages.filter(msg => msg.owner === participant);\n            if (hoverParts.length > 0) {\n                disposables.add(participant.renderHoverParts(context, hoverParts));\n            }\n        }\n        const isBeforeContent = messages.some(m => m.isBeforeContent);\n        if (statusBar.hasContent) {\n            fragment.appendChild(statusBar.hoverElement);\n        }\n        if (fragment.hasChildNodes()) {\n            if (highlightRange) {\n                const highlightDecoration = this._editor.createDecorationsCollection();\n                highlightDecoration.set([{\n                        range: highlightRange,\n                        options: ContentHoverController._DECORATION_OPTIONS\n                    }]);\n                disposables.add(toDisposable(() => {\n                    highlightDecoration.clear();\n                }));\n            }\n            this._widget.showAt(fragment, new ContentHoverVisibleData(colorPicker, showAtPosition, showAtSecondaryPosition, this._editor.getOption(57 /* EditorOption.hover */).above, this._computer.shouldFocus, this._computer.source, isBeforeContent, anchor.initialMousePosX, anchor.initialMousePosY, disposables));\n        }\n        else {\n            disposables.dispose();\n        }\n    }\n    static computeHoverRanges(editor, anchorRange, messages) {\n        let startColumnBoundary = 1;\n        if (editor.hasModel()) {\n            // Ensure the range is on the current view line\n            const viewModel = editor._getViewModel();\n            const coordinatesConverter = viewModel.coordinatesConverter;\n            const anchorViewRange = coordinatesConverter.convertModelRangeToViewRange(anchorRange);\n            const anchorViewRangeStart = new Position(anchorViewRange.startLineNumber, viewModel.getLineMinColumn(anchorViewRange.startLineNumber));\n            startColumnBoundary = coordinatesConverter.convertViewPositionToModelPosition(anchorViewRangeStart).column;\n        }\n        // The anchor range is always on a single line\n        const anchorLineNumber = anchorRange.startLineNumber;\n        let renderStartColumn = anchorRange.startColumn;\n        let highlightRange = messages[0].range;\n        let forceShowAtRange = null;\n        for (const msg of messages) {\n            highlightRange = Range.plusRange(highlightRange, msg.range);\n            if (msg.range.startLineNumber === anchorLineNumber && msg.range.endLineNumber === anchorLineNumber) {\n                // this message has a range that is completely sitting on the line of the anchor\n                renderStartColumn = Math.max(Math.min(renderStartColumn, msg.range.startColumn), startColumnBoundary);\n            }\n            if (msg.forceShowAtRange) {\n                forceShowAtRange = msg.range;\n            }\n        }\n        return {\n            showAtPosition: forceShowAtRange ? forceShowAtRange.getStartPosition() : new Position(anchorLineNumber, anchorRange.startColumn),\n            showAtSecondaryPosition: forceShowAtRange ? forceShowAtRange.getStartPosition() : new Position(anchorLineNumber, renderStartColumn),\n            highlightRange\n        };\n    }\n};\nContentHoverController._DECORATION_OPTIONS = ModelDecorationOptions.register({\n    description: 'content-hover-highlight',\n    className: 'hoverHighlight'\n});\nContentHoverController = __decorate([\n    __param(1, IInstantiationService),\n    __param(2, IKeybindingService)\n], ContentHoverController);\nexport { ContentHoverController };\nclass HoverResult {\n    constructor(anchor, messages, isComplete) {\n        this.anchor = anchor;\n        this.messages = messages;\n        this.isComplete = isComplete;\n    }\n    filter(anchor) {\n        const filteredMessages = this.messages.filter((m) => m.isValidForHoverAnchor(anchor));\n        if (filteredMessages.length === this.messages.length) {\n            return this;\n        }\n        return new FilteredHoverResult(this, this.anchor, filteredMessages, this.isComplete);\n    }\n}\nclass FilteredHoverResult extends HoverResult {\n    constructor(original, anchor, messages, isComplete) {\n        super(anchor, messages, isComplete);\n        this.original = original;\n    }\n    filter(anchor) {\n        return this.original.filter(anchor);\n    }\n}\nclass ContentHoverVisibleData {\n    constructor(colorPicker, showAtPosition, showAtSecondaryPosition, preferAbove, stoleFocus, source, isBeforeContent, initialMousePosX, initialMousePosY, disposables) {\n        this.colorPicker = colorPicker;\n        this.showAtPosition = showAtPosition;\n        this.showAtSecondaryPosition = showAtSecondaryPosition;\n        this.preferAbove = preferAbove;\n        this.stoleFocus = stoleFocus;\n        this.source = source;\n        this.isBeforeContent = isBeforeContent;\n        this.initialMousePosX = initialMousePosX;\n        this.initialMousePosY = initialMousePosY;\n        this.disposables = disposables;\n        this.closestMouseDistance = undefined;\n    }\n}\nlet ContentHoverWidget = class ContentHoverWidget extends Disposable {\n    /**\n     * Returns `null` if the hover is not visible.\n     */\n    get position() {\n        var _a, _b;\n        return (_b = (_a = this._visibleData) === null || _a === void 0 ? void 0 : _a.showAtPosition) !== null && _b !== void 0 ? _b : null;\n    }\n    get isColorPickerVisible() {\n        var _a;\n        return Boolean((_a = this._visibleData) === null || _a === void 0 ? void 0 : _a.colorPicker);\n    }\n    get isVisibleFromKeyboard() {\n        var _a;\n        return (((_a = this._visibleData) === null || _a === void 0 ? void 0 : _a.source) === 1 /* HoverStartSource.Keyboard */);\n    }\n    constructor(_editor, _contextKeyService) {\n        super();\n        this._editor = _editor;\n        this._contextKeyService = _contextKeyService;\n        this.allowEditorOverflow = true;\n        this._hoverVisibleKey = EditorContextKeys.hoverVisible.bindTo(this._contextKeyService);\n        this._hover = this._register(new HoverWidget());\n        this._visibleData = null;\n        this._register(this._editor.onDidLayoutChange(() => this._layout()));\n        this._register(this._editor.onDidChangeConfiguration((e) => {\n            if (e.hasChanged(47 /* EditorOption.fontInfo */)) {\n                this._updateFont();\n            }\n        }));\n        this._setVisibleData(null);\n        this._layout();\n        this._editor.addContentWidget(this);\n    }\n    dispose() {\n        this._editor.removeContentWidget(this);\n        if (this._visibleData) {\n            this._visibleData.disposables.dispose();\n        }\n        super.dispose();\n    }\n    getId() {\n        return ContentHoverWidget.ID;\n    }\n    getDomNode() {\n        return this._hover.containerDomNode;\n    }\n    getPosition() {\n        if (!this._visibleData) {\n            return null;\n        }\n        let preferAbove = this._visibleData.preferAbove;\n        if (!preferAbove && this._contextKeyService.getContextKeyValue(SuggestContext.Visible.key)) {\n            // Prefer rendering above if the suggest widget is visible\n            preferAbove = true;\n        }\n        // :before content can align left of the text content\n        const affinity = this._visibleData.isBeforeContent ? 3 /* PositionAffinity.LeftOfInjectedText */ : undefined;\n        return {\n            position: this._visibleData.showAtPosition,\n            secondaryPosition: this._visibleData.showAtSecondaryPosition,\n            preference: (preferAbove\n                ? [1 /* ContentWidgetPositionPreference.ABOVE */, 2 /* ContentWidgetPositionPreference.BELOW */]\n                : [2 /* ContentWidgetPositionPreference.BELOW */, 1 /* ContentWidgetPositionPreference.ABOVE */]),\n            positionAffinity: affinity\n        };\n    }\n    isMouseGettingCloser(posx, posy) {\n        if (!this._visibleData) {\n            return false;\n        }\n        if (typeof this._visibleData.initialMousePosX === 'undefined' || typeof this._visibleData.initialMousePosY === 'undefined') {\n            this._visibleData.initialMousePosX = posx;\n            this._visibleData.initialMousePosY = posy;\n            return false;\n        }\n        const widgetRect = dom.getDomNodePagePosition(this.getDomNode());\n        if (typeof this._visibleData.closestMouseDistance === 'undefined') {\n            this._visibleData.closestMouseDistance = computeDistanceFromPointToRectangle(this._visibleData.initialMousePosX, this._visibleData.initialMousePosY, widgetRect.left, widgetRect.top, widgetRect.width, widgetRect.height);\n        }\n        const distance = computeDistanceFromPointToRectangle(posx, posy, widgetRect.left, widgetRect.top, widgetRect.width, widgetRect.height);\n        if (distance > this._visibleData.closestMouseDistance + 4 /* tolerance of 4 pixels */) {\n            // The mouse is getting farther away\n            return false;\n        }\n        this._visibleData.closestMouseDistance = Math.min(this._visibleData.closestMouseDistance, distance);\n        return true;\n    }\n    _setVisibleData(visibleData) {\n        if (this._visibleData) {\n            this._visibleData.disposables.dispose();\n        }\n        this._visibleData = visibleData;\n        this._hoverVisibleKey.set(!!this._visibleData);\n        this._hover.containerDomNode.classList.toggle('hidden', !this._visibleData);\n    }\n    _layout() {\n        const height = Math.max(this._editor.getLayoutInfo().height / 4, 250);\n        const { fontSize, lineHeight } = this._editor.getOption(47 /* EditorOption.fontInfo */);\n        this._hover.contentsDomNode.style.fontSize = `${fontSize}px`;\n        this._hover.contentsDomNode.style.lineHeight = `${lineHeight / fontSize}`;\n        this._hover.contentsDomNode.style.maxHeight = `${height}px`;\n        this._hover.contentsDomNode.style.maxWidth = `${Math.max(this._editor.getLayoutInfo().width * 0.66, 500)}px`;\n    }\n    _updateFont() {\n        const codeClasses = Array.prototype.slice.call(this._hover.contentsDomNode.getElementsByClassName('code'));\n        codeClasses.forEach(node => this._editor.applyFontInfo(node));\n    }\n    showAt(node, visibleData) {\n        var _a;\n        this._setVisibleData(visibleData);\n        this._hover.contentsDomNode.textContent = '';\n        this._hover.contentsDomNode.appendChild(node);\n        this._hover.contentsDomNode.style.paddingBottom = '';\n        this._updateFont();\n        this.onContentsChanged();\n        // Simply force a synchronous render on the editor\n        // such that the widget does not really render with left = '0px'\n        this._editor.render();\n        // See https://github.com/microsoft/vscode/issues/140339\n        // TODO: Doing a second layout of the hover after force rendering the editor\n        this.onContentsChanged();\n        if (visibleData.stoleFocus) {\n            this._hover.containerDomNode.focus();\n        }\n        (_a = visibleData.colorPicker) === null || _a === void 0 ? void 0 : _a.layout();\n    }\n    hide() {\n        if (this._visibleData) {\n            const stoleFocus = this._visibleData.stoleFocus;\n            this._setVisibleData(null);\n            this._editor.layoutContentWidget(this);\n            if (stoleFocus) {\n                this._editor.focus();\n            }\n        }\n    }\n    onContentsChanged() {\n        this._editor.layoutContentWidget(this);\n        this._hover.onContentsChanged();\n        const scrollDimensions = this._hover.scrollbar.getScrollDimensions();\n        const hasHorizontalScrollbar = (scrollDimensions.scrollWidth > scrollDimensions.width);\n        if (hasHorizontalScrollbar) {\n            // There is just a horizontal scrollbar\n            const extraBottomPadding = `${this._hover.scrollbar.options.horizontalScrollbarSize}px`;\n            if (this._hover.contentsDomNode.style.paddingBottom !== extraBottomPadding) {\n                this._hover.contentsDomNode.style.paddingBottom = extraBottomPadding;\n                this._editor.layoutContentWidget(this);\n                this._hover.onContentsChanged();\n            }\n        }\n    }\n    clear() {\n        this._hover.contentsDomNode.textContent = '';\n    }\n};\nContentHoverWidget.ID = 'editor.contrib.contentHoverWidget';\nContentHoverWidget = __decorate([\n    __param(1, IContextKeyService)\n], ContentHoverWidget);\nexport { ContentHoverWidget };\nlet EditorHoverStatusBar = class EditorHoverStatusBar extends Disposable {\n    get hasContent() {\n        return this._hasContent;\n    }\n    constructor(_keybindingService) {\n        super();\n        this._keybindingService = _keybindingService;\n        this._hasContent = false;\n        this.hoverElement = $('div.hover-row.status-bar');\n        this.actionsElement = dom.append(this.hoverElement, $('div.actions'));\n    }\n    addAction(actionOptions) {\n        const keybinding = this._keybindingService.lookupKeybinding(actionOptions.commandId);\n        const keybindingLabel = keybinding ? keybinding.getLabel() : null;\n        this._hasContent = true;\n        return this._register(HoverAction.render(this.actionsElement, actionOptions, keybindingLabel));\n    }\n    append(element) {\n        const result = dom.append(this.actionsElement, element);\n        this._hasContent = true;\n        return result;\n    }\n};\nEditorHoverStatusBar = __decorate([\n    __param(0, IKeybindingService)\n], EditorHoverStatusBar);\nclass ContentHoverComputer {\n    get anchor() { return this._anchor; }\n    set anchor(value) { this._anchor = value; }\n    get shouldFocus() { return this._shouldFocus; }\n    set shouldFocus(value) { this._shouldFocus = value; }\n    get source() { return this._source; }\n    set source(value) { this._source = value; }\n    get insistOnKeepingHoverVisible() { return this._insistOnKeepingHoverVisible; }\n    set insistOnKeepingHoverVisible(value) { this._insistOnKeepingHoverVisible = value; }\n    constructor(_editor, _participants) {\n        this._editor = _editor;\n        this._participants = _participants;\n        this._anchor = null;\n        this._shouldFocus = false;\n        this._source = 0 /* HoverStartSource.Mouse */;\n        this._insistOnKeepingHoverVisible = false;\n    }\n    static _getLineDecorations(editor, anchor) {\n        if (anchor.type !== 1 /* HoverAnchorType.Range */ && !anchor.supportsMarkerHover) {\n            return [];\n        }\n        const model = editor.getModel();\n        const lineNumber = anchor.range.startLineNumber;\n        if (lineNumber > model.getLineCount()) {\n            // invalid line\n            return [];\n        }\n        const maxColumn = model.getLineMaxColumn(lineNumber);\n        return editor.getLineDecorations(lineNumber).filter((d) => {\n            if (d.options.isWholeLine) {\n                return true;\n            }\n            const startColumn = (d.range.startLineNumber === lineNumber) ? d.range.startColumn : 1;\n            const endColumn = (d.range.endLineNumber === lineNumber) ? d.range.endColumn : maxColumn;\n            if (d.options.showIfCollapsed) {\n                // Relax check around `showIfCollapsed` decorations to also include +/- 1 character\n                if (startColumn > anchor.range.startColumn + 1 || anchor.range.endColumn - 1 > endColumn) {\n                    return false;\n                }\n            }\n            else {\n                if (startColumn > anchor.range.startColumn || anchor.range.endColumn > endColumn) {\n                    return false;\n                }\n            }\n            return true;\n        });\n    }\n    computeAsync(token) {\n        const anchor = this._anchor;\n        if (!this._editor.hasModel() || !anchor) {\n            return AsyncIterableObject.EMPTY;\n        }\n        const lineDecorations = ContentHoverComputer._getLineDecorations(this._editor, anchor);\n        return AsyncIterableObject.merge(this._participants.map((participant) => {\n            if (!participant.computeAsync) {\n                return AsyncIterableObject.EMPTY;\n            }\n            return participant.computeAsync(anchor, lineDecorations, token);\n        }));\n    }\n    computeSync() {\n        if (!this._editor.hasModel() || !this._anchor) {\n            return [];\n        }\n        const lineDecorations = ContentHoverComputer._getLineDecorations(this._editor, this._anchor);\n        let result = [];\n        for (const participant of this._participants) {\n            result = result.concat(participant.computeSync(this._anchor, lineDecorations));\n        }\n        return coalesce(result);\n    }\n}\nfunction computeDistanceFromPointToRectangle(pointX, pointY, left, top, width, height) {\n    const x = (left + width / 2); // x center of rectangle\n    const y = (top + height / 2); // y center of rectangle\n    const dx = Math.max(Math.abs(pointX - x) - width / 2, 0);\n    const dy = Math.max(Math.abs(pointY - y) - height / 2, 0);\n    return Math.sqrt(dx * dx + dy * dy);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}