{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../nls.js';\nimport { isFirefox } from '../../base/browser/browser.js';\nimport * as types from '../../base/common/types.js';\nimport { status } from '../../base/browser/ui/aria/aria.js';\nimport { Command, EditorCommand, registerEditorCommand, UndoCommand, RedoCommand, SelectAllCommand } from './editorExtensions.js';\nimport { ICodeEditorService } from './services/codeEditorService.js';\nimport { ColumnSelection } from '../common/cursor/cursorColumnSelection.js';\nimport { CursorState } from '../common/cursorCommon.js';\nimport { DeleteOperations } from '../common/cursor/cursorDeleteOperations.js';\nimport { CursorMove as CursorMove_, CursorMoveCommands } from '../common/cursor/cursorMoveCommands.js';\nimport { TypeOperations } from '../common/cursor/cursorTypeOperations.js';\nimport { Position } from '../common/core/position.js';\nimport { Range } from '../common/core/range.js';\nimport { EditorContextKeys } from '../common/editorContextKeys.js';\nimport { ContextKeyExpr } from '../../platform/contextkey/common/contextkey.js';\nimport { KeybindingsRegistry } from '../../platform/keybinding/common/keybindingsRegistry.js';\nconst CORE_WEIGHT = 0 /* KeybindingWeight.EditorCore */;\nexport class CoreEditorCommand extends EditorCommand {\n  runEditorCommand(accessor, editor, args) {\n    const viewModel = editor._getViewModel();\n    if (!viewModel) {\n      // the editor has no view => has no cursors\n      return;\n    }\n    this.runCoreEditorCommand(viewModel, args || {});\n  }\n}\nexport var EditorScroll_;\n(function (EditorScroll_) {\n  const isEditorScrollArgs = function (arg) {\n    if (!types.isObject(arg)) {\n      return false;\n    }\n    const scrollArg = arg;\n    if (!types.isString(scrollArg.to)) {\n      return false;\n    }\n    if (!types.isUndefined(scrollArg.by) && !types.isString(scrollArg.by)) {\n      return false;\n    }\n    if (!types.isUndefined(scrollArg.value) && !types.isNumber(scrollArg.value)) {\n      return false;\n    }\n    if (!types.isUndefined(scrollArg.revealCursor) && !types.isBoolean(scrollArg.revealCursor)) {\n      return false;\n    }\n    return true;\n  };\n  EditorScroll_.description = {\n    description: 'Scroll editor in the given direction',\n    args: [{\n      name: 'Editor scroll argument object',\n      description: `Property-value pairs that can be passed through this argument:\n\t\t\t\t\t* 'to': A mandatory direction value.\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t\t'up', 'down'\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t* 'by': Unit to move. Default is computed based on 'to' value.\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t\t'line', 'wrappedLine', 'page', 'halfPage', 'editor'\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t* 'value': Number of units to move. Default is '1'.\n\t\t\t\t\t* 'revealCursor': If 'true' reveals the cursor if it is outside view port.\n\t\t\t\t`,\n      constraint: isEditorScrollArgs,\n      schema: {\n        'type': 'object',\n        'required': ['to'],\n        'properties': {\n          'to': {\n            'type': 'string',\n            'enum': ['up', 'down']\n          },\n          'by': {\n            'type': 'string',\n            'enum': ['line', 'wrappedLine', 'page', 'halfPage', 'editor']\n          },\n          'value': {\n            'type': 'number',\n            'default': 1\n          },\n          'revealCursor': {\n            'type': 'boolean'\n          }\n        }\n      }\n    }]\n  };\n  /**\n   * Directions in the view for editor scroll command.\n   */\n  EditorScroll_.RawDirection = {\n    Up: 'up',\n    Right: 'right',\n    Down: 'down',\n    Left: 'left'\n  };\n  /**\n   * Units for editor scroll 'by' argument\n   */\n  EditorScroll_.RawUnit = {\n    Line: 'line',\n    WrappedLine: 'wrappedLine',\n    Page: 'page',\n    HalfPage: 'halfPage',\n    Editor: 'editor',\n    Column: 'column'\n  };\n  function parse(args) {\n    let direction;\n    switch (args.to) {\n      case EditorScroll_.RawDirection.Up:\n        direction = 1 /* Direction.Up */;\n        break;\n      case EditorScroll_.RawDirection.Right:\n        direction = 2 /* Direction.Right */;\n        break;\n      case EditorScroll_.RawDirection.Down:\n        direction = 3 /* Direction.Down */;\n        break;\n      case EditorScroll_.RawDirection.Left:\n        direction = 4 /* Direction.Left */;\n        break;\n      default:\n        // Illegal arguments\n        return null;\n    }\n    let unit;\n    switch (args.by) {\n      case EditorScroll_.RawUnit.Line:\n        unit = 1 /* Unit.Line */;\n        break;\n      case EditorScroll_.RawUnit.WrappedLine:\n        unit = 2 /* Unit.WrappedLine */;\n        break;\n      case EditorScroll_.RawUnit.Page:\n        unit = 3 /* Unit.Page */;\n        break;\n      case EditorScroll_.RawUnit.HalfPage:\n        unit = 4 /* Unit.HalfPage */;\n        break;\n      case EditorScroll_.RawUnit.Editor:\n        unit = 5 /* Unit.Editor */;\n        break;\n      case EditorScroll_.RawUnit.Column:\n        unit = 6 /* Unit.Column */;\n        break;\n      default:\n        unit = 2 /* Unit.WrappedLine */;\n    }\n\n    const value = Math.floor(args.value || 1);\n    const revealCursor = !!args.revealCursor;\n    return {\n      direction: direction,\n      unit: unit,\n      value: value,\n      revealCursor: revealCursor,\n      select: !!args.select\n    };\n  }\n  EditorScroll_.parse = parse;\n})(EditorScroll_ || (EditorScroll_ = {}));\nexport var RevealLine_;\n(function (RevealLine_) {\n  const isRevealLineArgs = function (arg) {\n    if (!types.isObject(arg)) {\n      return false;\n    }\n    const reveaLineArg = arg;\n    if (!types.isNumber(reveaLineArg.lineNumber) && !types.isString(reveaLineArg.lineNumber)) {\n      return false;\n    }\n    if (!types.isUndefined(reveaLineArg.at) && !types.isString(reveaLineArg.at)) {\n      return false;\n    }\n    return true;\n  };\n  RevealLine_.description = {\n    description: 'Reveal the given line at the given logical position',\n    args: [{\n      name: 'Reveal line argument object',\n      description: `Property-value pairs that can be passed through this argument:\n\t\t\t\t\t* 'lineNumber': A mandatory line number value.\n\t\t\t\t\t* 'at': Logical position at which line has to be revealed.\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t\t'top', 'center', 'bottom'\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t`,\n      constraint: isRevealLineArgs,\n      schema: {\n        'type': 'object',\n        'required': ['lineNumber'],\n        'properties': {\n          'lineNumber': {\n            'type': ['number', 'string']\n          },\n          'at': {\n            'type': 'string',\n            'enum': ['top', 'center', 'bottom']\n          }\n        }\n      }\n    }]\n  };\n  /**\n   * Values for reveal line 'at' argument\n   */\n  RevealLine_.RawAtArgument = {\n    Top: 'top',\n    Center: 'center',\n    Bottom: 'bottom'\n  };\n})(RevealLine_ || (RevealLine_ = {}));\nclass EditorOrNativeTextInputCommand {\n  constructor(target) {\n    // 1. handle case when focus is in editor.\n    target.addImplementation(10000, 'code-editor', (accessor, args) => {\n      // Only if editor text focus (i.e. not if editor has widget focus).\n      const focusedEditor = accessor.get(ICodeEditorService).getFocusedCodeEditor();\n      if (focusedEditor && focusedEditor.hasTextFocus()) {\n        return this._runEditorCommand(accessor, focusedEditor, args);\n      }\n      return false;\n    });\n    // 2. handle case when focus is in some other `input` / `textarea`.\n    target.addImplementation(1000, 'generic-dom-input-textarea', (accessor, args) => {\n      // Only if focused on an element that allows for entering text\n      const activeElement = document.activeElement;\n      if (activeElement && ['input', 'textarea'].indexOf(activeElement.tagName.toLowerCase()) >= 0) {\n        this.runDOMCommand();\n        return true;\n      }\n      return false;\n    });\n    // 3. (default) handle case when focus is somewhere else.\n    target.addImplementation(0, 'generic-dom', (accessor, args) => {\n      // Redirecting to active editor\n      const activeEditor = accessor.get(ICodeEditorService).getActiveCodeEditor();\n      if (activeEditor) {\n        activeEditor.focus();\n        return this._runEditorCommand(accessor, activeEditor, args);\n      }\n      return false;\n    });\n  }\n  _runEditorCommand(accessor, editor, args) {\n    const result = this.runEditorCommand(accessor, editor, args);\n    if (result) {\n      return result;\n    }\n    return true;\n  }\n}\nexport var CoreNavigationCommands;\n(function (CoreNavigationCommands) {\n  class BaseMoveToCommand extends CoreEditorCommand {\n    constructor(opts) {\n      super(opts);\n      this._inSelectionMode = opts.inSelectionMode;\n    }\n    runCoreEditorCommand(viewModel, args) {\n      if (!args.position) {\n        return;\n      }\n      viewModel.model.pushStackElement();\n      const cursorStateChanged = viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, [CursorMoveCommands.moveTo(viewModel, viewModel.getPrimaryCursorState(), this._inSelectionMode, args.position, args.viewPosition)]);\n      if (cursorStateChanged && args.revealType !== 2 /* NavigationCommandRevealType.None */) {\n        viewModel.revealPrimaryCursor(args.source, true, true);\n      }\n    }\n  }\n  CoreNavigationCommands.MoveTo = registerEditorCommand(new BaseMoveToCommand({\n    id: '_moveTo',\n    inSelectionMode: false,\n    precondition: undefined\n  }));\n  CoreNavigationCommands.MoveToSelect = registerEditorCommand(new BaseMoveToCommand({\n    id: '_moveToSelect',\n    inSelectionMode: true,\n    precondition: undefined\n  }));\n  class ColumnSelectCommand extends CoreEditorCommand {\n    runCoreEditorCommand(viewModel, args) {\n      viewModel.model.pushStackElement();\n      const result = this._getColumnSelectResult(viewModel, viewModel.getPrimaryCursorState(), viewModel.getCursorColumnSelectData(), args);\n      if (result === null) {\n        // invalid arguments\n        return;\n      }\n      viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, result.viewStates.map(viewState => CursorState.fromViewState(viewState)));\n      viewModel.setCursorColumnSelectData({\n        isReal: true,\n        fromViewLineNumber: result.fromLineNumber,\n        fromViewVisualColumn: result.fromVisualColumn,\n        toViewLineNumber: result.toLineNumber,\n        toViewVisualColumn: result.toVisualColumn\n      });\n      if (result.reversed) {\n        viewModel.revealTopMostCursor(args.source);\n      } else {\n        viewModel.revealBottomMostCursor(args.source);\n      }\n    }\n  }\n  CoreNavigationCommands.ColumnSelect = registerEditorCommand(new class extends ColumnSelectCommand {\n    constructor() {\n      super({\n        id: 'columnSelect',\n        precondition: undefined\n      });\n    }\n    _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\n      if (typeof args.position === 'undefined' || typeof args.viewPosition === 'undefined' || typeof args.mouseColumn === 'undefined') {\n        return null;\n      }\n      // validate `args`\n      const validatedPosition = viewModel.model.validatePosition(args.position);\n      const validatedViewPosition = viewModel.coordinatesConverter.validateViewPosition(new Position(args.viewPosition.lineNumber, args.viewPosition.column), validatedPosition);\n      const fromViewLineNumber = args.doColumnSelect ? prevColumnSelectData.fromViewLineNumber : validatedViewPosition.lineNumber;\n      const fromViewVisualColumn = args.doColumnSelect ? prevColumnSelectData.fromViewVisualColumn : args.mouseColumn - 1;\n      return ColumnSelection.columnSelect(viewModel.cursorConfig, viewModel, fromViewLineNumber, fromViewVisualColumn, validatedViewPosition.lineNumber, args.mouseColumn - 1);\n    }\n  }());\n  CoreNavigationCommands.CursorColumnSelectLeft = registerEditorCommand(new class extends ColumnSelectCommand {\n    constructor() {\n      super({\n        id: 'cursorColumnSelectLeft',\n        precondition: undefined,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 15 /* KeyCode.LeftArrow */,\n          linux: {\n            primary: 0\n          }\n        }\n      });\n    }\n    _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\n      return ColumnSelection.columnSelectLeft(viewModel.cursorConfig, viewModel, prevColumnSelectData);\n    }\n  }());\n  CoreNavigationCommands.CursorColumnSelectRight = registerEditorCommand(new class extends ColumnSelectCommand {\n    constructor() {\n      super({\n        id: 'cursorColumnSelectRight',\n        precondition: undefined,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 17 /* KeyCode.RightArrow */,\n          linux: {\n            primary: 0\n          }\n        }\n      });\n    }\n    _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\n      return ColumnSelection.columnSelectRight(viewModel.cursorConfig, viewModel, prevColumnSelectData);\n    }\n  }());\n  class ColumnSelectUpCommand extends ColumnSelectCommand {\n    constructor(opts) {\n      super(opts);\n      this._isPaged = opts.isPaged;\n    }\n    _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\n      return ColumnSelection.columnSelectUp(viewModel.cursorConfig, viewModel, prevColumnSelectData, this._isPaged);\n    }\n  }\n  CoreNavigationCommands.CursorColumnSelectUp = registerEditorCommand(new ColumnSelectUpCommand({\n    isPaged: false,\n    id: 'cursorColumnSelectUp',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 16 /* KeyCode.UpArrow */,\n      linux: {\n        primary: 0\n      }\n    }\n  }));\n  CoreNavigationCommands.CursorColumnSelectPageUp = registerEditorCommand(new ColumnSelectUpCommand({\n    isPaged: true,\n    id: 'cursorColumnSelectPageUp',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 11 /* KeyCode.PageUp */,\n      linux: {\n        primary: 0\n      }\n    }\n  }));\n  class ColumnSelectDownCommand extends ColumnSelectCommand {\n    constructor(opts) {\n      super(opts);\n      this._isPaged = opts.isPaged;\n    }\n    _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\n      return ColumnSelection.columnSelectDown(viewModel.cursorConfig, viewModel, prevColumnSelectData, this._isPaged);\n    }\n  }\n  CoreNavigationCommands.CursorColumnSelectDown = registerEditorCommand(new ColumnSelectDownCommand({\n    isPaged: false,\n    id: 'cursorColumnSelectDown',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 18 /* KeyCode.DownArrow */,\n      linux: {\n        primary: 0\n      }\n    }\n  }));\n  CoreNavigationCommands.CursorColumnSelectPageDown = registerEditorCommand(new ColumnSelectDownCommand({\n    isPaged: true,\n    id: 'cursorColumnSelectPageDown',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 12 /* KeyCode.PageDown */,\n      linux: {\n        primary: 0\n      }\n    }\n  }));\n  class CursorMoveImpl extends CoreEditorCommand {\n    constructor() {\n      super({\n        id: 'cursorMove',\n        precondition: undefined,\n        description: CursorMove_.description\n      });\n    }\n    runCoreEditorCommand(viewModel, args) {\n      const parsed = CursorMove_.parse(args);\n      if (!parsed) {\n        // illegal arguments\n        return;\n      }\n      this._runCursorMove(viewModel, args.source, parsed);\n    }\n    _runCursorMove(viewModel, source, args) {\n      viewModel.model.pushStackElement();\n      viewModel.setCursorStates(source, 3 /* CursorChangeReason.Explicit */, CursorMoveImpl._move(viewModel, viewModel.getCursorStates(), args));\n      viewModel.revealPrimaryCursor(source, true);\n    }\n    static _move(viewModel, cursors, args) {\n      const inSelectionMode = args.select;\n      const value = args.value;\n      switch (args.direction) {\n        case 0 /* CursorMove_.Direction.Left */:\n        case 1 /* CursorMove_.Direction.Right */:\n        case 2 /* CursorMove_.Direction.Up */:\n        case 3 /* CursorMove_.Direction.Down */:\n        case 4 /* CursorMove_.Direction.PrevBlankLine */:\n        case 5 /* CursorMove_.Direction.NextBlankLine */:\n        case 6 /* CursorMove_.Direction.WrappedLineStart */:\n        case 7 /* CursorMove_.Direction.WrappedLineFirstNonWhitespaceCharacter */:\n        case 8 /* CursorMove_.Direction.WrappedLineColumnCenter */:\n        case 9 /* CursorMove_.Direction.WrappedLineEnd */:\n        case 10 /* CursorMove_.Direction.WrappedLineLastNonWhitespaceCharacter */:\n          return CursorMoveCommands.simpleMove(viewModel, cursors, args.direction, inSelectionMode, value, args.unit);\n        case 11 /* CursorMove_.Direction.ViewPortTop */:\n        case 13 /* CursorMove_.Direction.ViewPortBottom */:\n        case 12 /* CursorMove_.Direction.ViewPortCenter */:\n        case 14 /* CursorMove_.Direction.ViewPortIfOutside */:\n          return CursorMoveCommands.viewportMove(viewModel, cursors, args.direction, inSelectionMode, value);\n        default:\n          return null;\n      }\n    }\n  }\n  CoreNavigationCommands.CursorMoveImpl = CursorMoveImpl;\n  CoreNavigationCommands.CursorMove = registerEditorCommand(new CursorMoveImpl());\n  class CursorMoveBasedCommand extends CoreEditorCommand {\n    constructor(opts) {\n      super(opts);\n      this._staticArgs = opts.args;\n    }\n    runCoreEditorCommand(viewModel, dynamicArgs) {\n      let args = this._staticArgs;\n      if (this._staticArgs.value === -1 /* Constants.PAGE_SIZE_MARKER */) {\n        // -1 is a marker for page size\n        args = {\n          direction: this._staticArgs.direction,\n          unit: this._staticArgs.unit,\n          select: this._staticArgs.select,\n          value: dynamicArgs.pageSize || viewModel.cursorConfig.pageSize\n        };\n      }\n      viewModel.model.pushStackElement();\n      viewModel.setCursorStates(dynamicArgs.source, 3 /* CursorChangeReason.Explicit */, CursorMoveCommands.simpleMove(viewModel, viewModel.getCursorStates(), args.direction, args.select, args.value, args.unit));\n      viewModel.revealPrimaryCursor(dynamicArgs.source, true);\n    }\n  }\n  CoreNavigationCommands.CursorLeft = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 0 /* CursorMove_.Direction.Left */,\n      unit: 0 /* CursorMove_.Unit.None */,\n      select: false,\n      value: 1\n    },\n    id: 'cursorLeft',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 15 /* KeyCode.LeftArrow */,\n      mac: {\n        primary: 15 /* KeyCode.LeftArrow */,\n        secondary: [256 /* KeyMod.WinCtrl */ | 32 /* KeyCode.KeyB */]\n      }\n    }\n  }));\n\n  CoreNavigationCommands.CursorLeftSelect = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 0 /* CursorMove_.Direction.Left */,\n      unit: 0 /* CursorMove_.Unit.None */,\n      select: true,\n      value: 1\n    },\n    id: 'cursorLeftSelect',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 1024 /* KeyMod.Shift */ | 15 /* KeyCode.LeftArrow */\n    }\n  }));\n\n  CoreNavigationCommands.CursorRight = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 1 /* CursorMove_.Direction.Right */,\n      unit: 0 /* CursorMove_.Unit.None */,\n      select: false,\n      value: 1\n    },\n    id: 'cursorRight',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 17 /* KeyCode.RightArrow */,\n      mac: {\n        primary: 17 /* KeyCode.RightArrow */,\n        secondary: [256 /* KeyMod.WinCtrl */ | 36 /* KeyCode.KeyF */]\n      }\n    }\n  }));\n\n  CoreNavigationCommands.CursorRightSelect = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 1 /* CursorMove_.Direction.Right */,\n      unit: 0 /* CursorMove_.Unit.None */,\n      select: true,\n      value: 1\n    },\n    id: 'cursorRightSelect',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 1024 /* KeyMod.Shift */ | 17 /* KeyCode.RightArrow */\n    }\n  }));\n\n  CoreNavigationCommands.CursorUp = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 2 /* CursorMove_.Direction.Up */,\n      unit: 2 /* CursorMove_.Unit.WrappedLine */,\n      select: false,\n      value: 1\n    },\n    id: 'cursorUp',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 16 /* KeyCode.UpArrow */,\n      mac: {\n        primary: 16 /* KeyCode.UpArrow */,\n        secondary: [256 /* KeyMod.WinCtrl */ | 46 /* KeyCode.KeyP */]\n      }\n    }\n  }));\n\n  CoreNavigationCommands.CursorUpSelect = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 2 /* CursorMove_.Direction.Up */,\n      unit: 2 /* CursorMove_.Unit.WrappedLine */,\n      select: true,\n      value: 1\n    },\n    id: 'cursorUpSelect',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */,\n      secondary: [2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */],\n      mac: {\n        primary: 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */\n      },\n      linux: {\n        primary: 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */\n      }\n    }\n  }));\n\n  CoreNavigationCommands.CursorPageUp = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 2 /* CursorMove_.Direction.Up */,\n      unit: 2 /* CursorMove_.Unit.WrappedLine */,\n      select: false,\n      value: -1 /* Constants.PAGE_SIZE_MARKER */\n    },\n\n    id: 'cursorPageUp',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 11 /* KeyCode.PageUp */\n    }\n  }));\n\n  CoreNavigationCommands.CursorPageUpSelect = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 2 /* CursorMove_.Direction.Up */,\n      unit: 2 /* CursorMove_.Unit.WrappedLine */,\n      select: true,\n      value: -1 /* Constants.PAGE_SIZE_MARKER */\n    },\n\n    id: 'cursorPageUpSelect',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 1024 /* KeyMod.Shift */ | 11 /* KeyCode.PageUp */\n    }\n  }));\n\n  CoreNavigationCommands.CursorDown = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 3 /* CursorMove_.Direction.Down */,\n      unit: 2 /* CursorMove_.Unit.WrappedLine */,\n      select: false,\n      value: 1\n    },\n    id: 'cursorDown',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 18 /* KeyCode.DownArrow */,\n      mac: {\n        primary: 18 /* KeyCode.DownArrow */,\n        secondary: [256 /* KeyMod.WinCtrl */ | 44 /* KeyCode.KeyN */]\n      }\n    }\n  }));\n\n  CoreNavigationCommands.CursorDownSelect = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 3 /* CursorMove_.Direction.Down */,\n      unit: 2 /* CursorMove_.Unit.WrappedLine */,\n      select: true,\n      value: 1\n    },\n    id: 'cursorDownSelect',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */,\n      secondary: [2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */],\n      mac: {\n        primary: 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */\n      },\n      linux: {\n        primary: 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */\n      }\n    }\n  }));\n\n  CoreNavigationCommands.CursorPageDown = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 3 /* CursorMove_.Direction.Down */,\n      unit: 2 /* CursorMove_.Unit.WrappedLine */,\n      select: false,\n      value: -1 /* Constants.PAGE_SIZE_MARKER */\n    },\n\n    id: 'cursorPageDown',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 12 /* KeyCode.PageDown */\n    }\n  }));\n\n  CoreNavigationCommands.CursorPageDownSelect = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 3 /* CursorMove_.Direction.Down */,\n      unit: 2 /* CursorMove_.Unit.WrappedLine */,\n      select: true,\n      value: -1 /* Constants.PAGE_SIZE_MARKER */\n    },\n\n    id: 'cursorPageDownSelect',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 1024 /* KeyMod.Shift */ | 12 /* KeyCode.PageDown */\n    }\n  }));\n\n  CoreNavigationCommands.CreateCursor = registerEditorCommand(new class extends CoreEditorCommand {\n    constructor() {\n      super({\n        id: 'createCursor',\n        precondition: undefined\n      });\n    }\n    runCoreEditorCommand(viewModel, args) {\n      if (!args.position) {\n        return;\n      }\n      let newState;\n      if (args.wholeLine) {\n        newState = CursorMoveCommands.line(viewModel, viewModel.getPrimaryCursorState(), false, args.position, args.viewPosition);\n      } else {\n        newState = CursorMoveCommands.moveTo(viewModel, viewModel.getPrimaryCursorState(), false, args.position, args.viewPosition);\n      }\n      const states = viewModel.getCursorStates();\n      // Check if we should remove a cursor (sort of like a toggle)\n      if (states.length > 1) {\n        const newModelPosition = newState.modelState ? newState.modelState.position : null;\n        const newViewPosition = newState.viewState ? newState.viewState.position : null;\n        for (let i = 0, len = states.length; i < len; i++) {\n          const state = states[i];\n          if (newModelPosition && !state.modelState.selection.containsPosition(newModelPosition)) {\n            continue;\n          }\n          if (newViewPosition && !state.viewState.selection.containsPosition(newViewPosition)) {\n            continue;\n          }\n          // => Remove the cursor\n          states.splice(i, 1);\n          viewModel.model.pushStackElement();\n          viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, states);\n          return;\n        }\n      }\n      // => Add the new cursor\n      states.push(newState);\n      viewModel.model.pushStackElement();\n      viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, states);\n    }\n  }());\n  CoreNavigationCommands.LastCursorMoveToSelect = registerEditorCommand(new class extends CoreEditorCommand {\n    constructor() {\n      super({\n        id: '_lastCursorMoveToSelect',\n        precondition: undefined\n      });\n    }\n    runCoreEditorCommand(viewModel, args) {\n      if (!args.position) {\n        return;\n      }\n      const lastAddedCursorIndex = viewModel.getLastAddedCursorIndex();\n      const states = viewModel.getCursorStates();\n      const newStates = states.slice(0);\n      newStates[lastAddedCursorIndex] = CursorMoveCommands.moveTo(viewModel, states[lastAddedCursorIndex], true, args.position, args.viewPosition);\n      viewModel.model.pushStackElement();\n      viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, newStates);\n    }\n  }());\n  class HomeCommand extends CoreEditorCommand {\n    constructor(opts) {\n      super(opts);\n      this._inSelectionMode = opts.inSelectionMode;\n    }\n    runCoreEditorCommand(viewModel, args) {\n      viewModel.model.pushStackElement();\n      viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, CursorMoveCommands.moveToBeginningOfLine(viewModel, viewModel.getCursorStates(), this._inSelectionMode));\n      viewModel.revealPrimaryCursor(args.source, true);\n    }\n  }\n  CoreNavigationCommands.CursorHome = registerEditorCommand(new HomeCommand({\n    inSelectionMode: false,\n    id: 'cursorHome',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 14 /* KeyCode.Home */,\n      mac: {\n        primary: 14 /* KeyCode.Home */,\n        secondary: [2048 /* KeyMod.CtrlCmd */ | 15 /* KeyCode.LeftArrow */]\n      }\n    }\n  }));\n\n  CoreNavigationCommands.CursorHomeSelect = registerEditorCommand(new HomeCommand({\n    inSelectionMode: true,\n    id: 'cursorHomeSelect',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 1024 /* KeyMod.Shift */ | 14 /* KeyCode.Home */,\n      mac: {\n        primary: 1024 /* KeyMod.Shift */ | 14 /* KeyCode.Home */,\n        secondary: [2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 15 /* KeyCode.LeftArrow */]\n      }\n    }\n  }));\n\n  class LineStartCommand extends CoreEditorCommand {\n    constructor(opts) {\n      super(opts);\n      this._inSelectionMode = opts.inSelectionMode;\n    }\n    runCoreEditorCommand(viewModel, args) {\n      viewModel.model.pushStackElement();\n      viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, this._exec(viewModel.getCursorStates()));\n      viewModel.revealPrimaryCursor(args.source, true);\n    }\n    _exec(cursors) {\n      const result = [];\n      for (let i = 0, len = cursors.length; i < len; i++) {\n        const cursor = cursors[i];\n        const lineNumber = cursor.modelState.position.lineNumber;\n        result[i] = CursorState.fromModelState(cursor.modelState.move(this._inSelectionMode, lineNumber, 1, 0));\n      }\n      return result;\n    }\n  }\n  CoreNavigationCommands.CursorLineStart = registerEditorCommand(new LineStartCommand({\n    inSelectionMode: false,\n    id: 'cursorLineStart',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 0,\n      mac: {\n        primary: 256 /* KeyMod.WinCtrl */ | 31 /* KeyCode.KeyA */\n      }\n    }\n  }));\n\n  CoreNavigationCommands.CursorLineStartSelect = registerEditorCommand(new LineStartCommand({\n    inSelectionMode: true,\n    id: 'cursorLineStartSelect',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 0,\n      mac: {\n        primary: 256 /* KeyMod.WinCtrl */ | 1024 /* KeyMod.Shift */ | 31 /* KeyCode.KeyA */\n      }\n    }\n  }));\n\n  class EndCommand extends CoreEditorCommand {\n    constructor(opts) {\n      super(opts);\n      this._inSelectionMode = opts.inSelectionMode;\n    }\n    runCoreEditorCommand(viewModel, args) {\n      viewModel.model.pushStackElement();\n      viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, CursorMoveCommands.moveToEndOfLine(viewModel, viewModel.getCursorStates(), this._inSelectionMode, args.sticky || false));\n      viewModel.revealPrimaryCursor(args.source, true);\n    }\n  }\n  CoreNavigationCommands.CursorEnd = registerEditorCommand(new EndCommand({\n    inSelectionMode: false,\n    id: 'cursorEnd',\n    precondition: undefined,\n    kbOpts: {\n      args: {\n        sticky: false\n      },\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 13 /* KeyCode.End */,\n      mac: {\n        primary: 13 /* KeyCode.End */,\n        secondary: [2048 /* KeyMod.CtrlCmd */ | 17 /* KeyCode.RightArrow */]\n      }\n    },\n\n    description: {\n      description: `Go to End`,\n      args: [{\n        name: 'args',\n        schema: {\n          type: 'object',\n          properties: {\n            'sticky': {\n              description: nls.localize('stickydesc', \"Stick to the end even when going to longer lines\"),\n              type: 'boolean',\n              default: false\n            }\n          }\n        }\n      }]\n    }\n  }));\n  CoreNavigationCommands.CursorEndSelect = registerEditorCommand(new EndCommand({\n    inSelectionMode: true,\n    id: 'cursorEndSelect',\n    precondition: undefined,\n    kbOpts: {\n      args: {\n        sticky: false\n      },\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 1024 /* KeyMod.Shift */ | 13 /* KeyCode.End */,\n      mac: {\n        primary: 1024 /* KeyMod.Shift */ | 13 /* KeyCode.End */,\n        secondary: [2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 17 /* KeyCode.RightArrow */]\n      }\n    },\n\n    description: {\n      description: `Select to End`,\n      args: [{\n        name: 'args',\n        schema: {\n          type: 'object',\n          properties: {\n            'sticky': {\n              description: nls.localize('stickydesc', \"Stick to the end even when going to longer lines\"),\n              type: 'boolean',\n              default: false\n            }\n          }\n        }\n      }]\n    }\n  }));\n  class LineEndCommand extends CoreEditorCommand {\n    constructor(opts) {\n      super(opts);\n      this._inSelectionMode = opts.inSelectionMode;\n    }\n    runCoreEditorCommand(viewModel, args) {\n      viewModel.model.pushStackElement();\n      viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, this._exec(viewModel, viewModel.getCursorStates()));\n      viewModel.revealPrimaryCursor(args.source, true);\n    }\n    _exec(viewModel, cursors) {\n      const result = [];\n      for (let i = 0, len = cursors.length; i < len; i++) {\n        const cursor = cursors[i];\n        const lineNumber = cursor.modelState.position.lineNumber;\n        const maxColumn = viewModel.model.getLineMaxColumn(lineNumber);\n        result[i] = CursorState.fromModelState(cursor.modelState.move(this._inSelectionMode, lineNumber, maxColumn, 0));\n      }\n      return result;\n    }\n  }\n  CoreNavigationCommands.CursorLineEnd = registerEditorCommand(new LineEndCommand({\n    inSelectionMode: false,\n    id: 'cursorLineEnd',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 0,\n      mac: {\n        primary: 256 /* KeyMod.WinCtrl */ | 35 /* KeyCode.KeyE */\n      }\n    }\n  }));\n\n  CoreNavigationCommands.CursorLineEndSelect = registerEditorCommand(new LineEndCommand({\n    inSelectionMode: true,\n    id: 'cursorLineEndSelect',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 0,\n      mac: {\n        primary: 256 /* KeyMod.WinCtrl */ | 1024 /* KeyMod.Shift */ | 35 /* KeyCode.KeyE */\n      }\n    }\n  }));\n\n  class TopCommand extends CoreEditorCommand {\n    constructor(opts) {\n      super(opts);\n      this._inSelectionMode = opts.inSelectionMode;\n    }\n    runCoreEditorCommand(viewModel, args) {\n      viewModel.model.pushStackElement();\n      viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, CursorMoveCommands.moveToBeginningOfBuffer(viewModel, viewModel.getCursorStates(), this._inSelectionMode));\n      viewModel.revealPrimaryCursor(args.source, true);\n    }\n  }\n  CoreNavigationCommands.CursorTop = registerEditorCommand(new TopCommand({\n    inSelectionMode: false,\n    id: 'cursorTop',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 2048 /* KeyMod.CtrlCmd */ | 14 /* KeyCode.Home */,\n      mac: {\n        primary: 2048 /* KeyMod.CtrlCmd */ | 16 /* KeyCode.UpArrow */\n      }\n    }\n  }));\n\n  CoreNavigationCommands.CursorTopSelect = registerEditorCommand(new TopCommand({\n    inSelectionMode: true,\n    id: 'cursorTopSelect',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 14 /* KeyCode.Home */,\n      mac: {\n        primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */\n      }\n    }\n  }));\n\n  class BottomCommand extends CoreEditorCommand {\n    constructor(opts) {\n      super(opts);\n      this._inSelectionMode = opts.inSelectionMode;\n    }\n    runCoreEditorCommand(viewModel, args) {\n      viewModel.model.pushStackElement();\n      viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, CursorMoveCommands.moveToEndOfBuffer(viewModel, viewModel.getCursorStates(), this._inSelectionMode));\n      viewModel.revealPrimaryCursor(args.source, true);\n    }\n  }\n  CoreNavigationCommands.CursorBottom = registerEditorCommand(new BottomCommand({\n    inSelectionMode: false,\n    id: 'cursorBottom',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 2048 /* KeyMod.CtrlCmd */ | 13 /* KeyCode.End */,\n      mac: {\n        primary: 2048 /* KeyMod.CtrlCmd */ | 18 /* KeyCode.DownArrow */\n      }\n    }\n  }));\n\n  CoreNavigationCommands.CursorBottomSelect = registerEditorCommand(new BottomCommand({\n    inSelectionMode: true,\n    id: 'cursorBottomSelect',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 13 /* KeyCode.End */,\n      mac: {\n        primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */\n      }\n    }\n  }));\n\n  class EditorScrollImpl extends CoreEditorCommand {\n    constructor() {\n      super({\n        id: 'editorScroll',\n        precondition: undefined,\n        description: EditorScroll_.description\n      });\n    }\n    determineScrollMethod(args) {\n      const horizontalUnits = [6 /* EditorScroll_.Unit.Column */];\n      const verticalUnits = [1 /* EditorScroll_.Unit.Line */, 2 /* EditorScroll_.Unit.WrappedLine */, 3 /* EditorScroll_.Unit.Page */, 4 /* EditorScroll_.Unit.HalfPage */, 5 /* EditorScroll_.Unit.Editor */, 6 /* EditorScroll_.Unit.Column */];\n\n      const horizontalDirections = [4 /* EditorScroll_.Direction.Left */, 2 /* EditorScroll_.Direction.Right */];\n      const verticalDirections = [1 /* EditorScroll_.Direction.Up */, 3 /* EditorScroll_.Direction.Down */];\n      if (horizontalUnits.includes(args.unit) && horizontalDirections.includes(args.direction)) {\n        return this._runHorizontalEditorScroll.bind(this);\n      }\n      if (verticalUnits.includes(args.unit) && verticalDirections.includes(args.direction)) {\n        return this._runVerticalEditorScroll.bind(this);\n      }\n      return null;\n    }\n    runCoreEditorCommand(viewModel, args) {\n      const parsed = EditorScroll_.parse(args);\n      if (!parsed) {\n        // illegal arguments\n        return;\n      }\n      const runEditorScroll = this.determineScrollMethod(parsed);\n      if (!runEditorScroll) {\n        // Incompatible unit and direction\n        return;\n      }\n      runEditorScroll(viewModel, args.source, parsed);\n    }\n    _runVerticalEditorScroll(viewModel, source, args) {\n      const desiredScrollTop = this._computeDesiredScrollTop(viewModel, args);\n      if (args.revealCursor) {\n        // must ensure cursor is in new visible range\n        const desiredVisibleViewRange = viewModel.getCompletelyVisibleViewRangeAtScrollTop(desiredScrollTop);\n        viewModel.setCursorStates(source, 3 /* CursorChangeReason.Explicit */, [CursorMoveCommands.findPositionInViewportIfOutside(viewModel, viewModel.getPrimaryCursorState(), desiredVisibleViewRange, args.select)]);\n      }\n      viewModel.viewLayout.setScrollPosition({\n        scrollTop: desiredScrollTop\n      }, 0 /* ScrollType.Smooth */);\n    }\n\n    _computeDesiredScrollTop(viewModel, args) {\n      if (args.unit === 1 /* EditorScroll_.Unit.Line */) {\n        // scrolling by model lines\n        const futureViewport = viewModel.viewLayout.getFutureViewport();\n        const visibleViewRange = viewModel.getCompletelyVisibleViewRangeAtScrollTop(futureViewport.top);\n        const visibleModelRange = viewModel.coordinatesConverter.convertViewRangeToModelRange(visibleViewRange);\n        let desiredTopModelLineNumber;\n        if (args.direction === 1 /* EditorScroll_.Direction.Up */) {\n          // must go x model lines up\n          desiredTopModelLineNumber = Math.max(1, visibleModelRange.startLineNumber - args.value);\n        } else {\n          // must go x model lines down\n          desiredTopModelLineNumber = Math.min(viewModel.model.getLineCount(), visibleModelRange.startLineNumber + args.value);\n        }\n        const viewPosition = viewModel.coordinatesConverter.convertModelPositionToViewPosition(new Position(desiredTopModelLineNumber, 1));\n        return viewModel.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber);\n      }\n      if (args.unit === 5 /* EditorScroll_.Unit.Editor */) {\n        let desiredTopModelLineNumber = 0;\n        if (args.direction === 3 /* EditorScroll_.Direction.Down */) {\n          desiredTopModelLineNumber = viewModel.model.getLineCount() - viewModel.cursorConfig.pageSize;\n        }\n        return viewModel.viewLayout.getVerticalOffsetForLineNumber(desiredTopModelLineNumber);\n      }\n      let noOfLines;\n      if (args.unit === 3 /* EditorScroll_.Unit.Page */) {\n        noOfLines = viewModel.cursorConfig.pageSize * args.value;\n      } else if (args.unit === 4 /* EditorScroll_.Unit.HalfPage */) {\n        noOfLines = Math.round(viewModel.cursorConfig.pageSize / 2) * args.value;\n      } else {\n        noOfLines = args.value;\n      }\n      const deltaLines = (args.direction === 1 /* EditorScroll_.Direction.Up */ ? -1 : 1) * noOfLines;\n      return viewModel.viewLayout.getCurrentScrollTop() + deltaLines * viewModel.cursorConfig.lineHeight;\n    }\n    _runHorizontalEditorScroll(viewModel, source, args) {\n      const desiredScrollLeft = this._computeDesiredScrollLeft(viewModel, args);\n      viewModel.viewLayout.setScrollPosition({\n        scrollLeft: desiredScrollLeft\n      }, 0 /* ScrollType.Smooth */);\n    }\n\n    _computeDesiredScrollLeft(viewModel, args) {\n      const deltaColumns = (args.direction === 4 /* EditorScroll_.Direction.Left */ ? -1 : 1) * args.value;\n      return viewModel.viewLayout.getCurrentScrollLeft() + deltaColumns * viewModel.cursorConfig.typicalHalfwidthCharacterWidth;\n    }\n  }\n  CoreNavigationCommands.EditorScrollImpl = EditorScrollImpl;\n  CoreNavigationCommands.EditorScroll = registerEditorCommand(new EditorScrollImpl());\n  CoreNavigationCommands.ScrollLineUp = registerEditorCommand(new class extends CoreEditorCommand {\n    constructor() {\n      super({\n        id: 'scrollLineUp',\n        precondition: undefined,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 2048 /* KeyMod.CtrlCmd */ | 16 /* KeyCode.UpArrow */,\n          mac: {\n            primary: 256 /* KeyMod.WinCtrl */ | 11 /* KeyCode.PageUp */\n          }\n        }\n      });\n    }\n\n    runCoreEditorCommand(viewModel, args) {\n      CoreNavigationCommands.EditorScroll.runCoreEditorCommand(viewModel, {\n        to: EditorScroll_.RawDirection.Up,\n        by: EditorScroll_.RawUnit.WrappedLine,\n        value: 1,\n        revealCursor: false,\n        select: false,\n        source: args.source\n      });\n    }\n  }());\n  CoreNavigationCommands.ScrollPageUp = registerEditorCommand(new class extends CoreEditorCommand {\n    constructor() {\n      super({\n        id: 'scrollPageUp',\n        precondition: undefined,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 2048 /* KeyMod.CtrlCmd */ | 11 /* KeyCode.PageUp */,\n          win: {\n            primary: 512 /* KeyMod.Alt */ | 11 /* KeyCode.PageUp */\n          },\n          linux: {\n            primary: 512 /* KeyMod.Alt */ | 11 /* KeyCode.PageUp */\n          }\n        }\n      });\n    }\n\n    runCoreEditorCommand(viewModel, args) {\n      CoreNavigationCommands.EditorScroll.runCoreEditorCommand(viewModel, {\n        to: EditorScroll_.RawDirection.Up,\n        by: EditorScroll_.RawUnit.Page,\n        value: 1,\n        revealCursor: false,\n        select: false,\n        source: args.source\n      });\n    }\n  }());\n  CoreNavigationCommands.ScrollEditorTop = registerEditorCommand(new class extends CoreEditorCommand {\n    constructor() {\n      super({\n        id: 'scrollEditorTop',\n        precondition: undefined,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus\n        }\n      });\n    }\n    runCoreEditorCommand(viewModel, args) {\n      CoreNavigationCommands.EditorScroll.runCoreEditorCommand(viewModel, {\n        to: EditorScroll_.RawDirection.Up,\n        by: EditorScroll_.RawUnit.Editor,\n        value: 1,\n        revealCursor: false,\n        select: false,\n        source: args.source\n      });\n    }\n  }());\n  CoreNavigationCommands.ScrollLineDown = registerEditorCommand(new class extends CoreEditorCommand {\n    constructor() {\n      super({\n        id: 'scrollLineDown',\n        precondition: undefined,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 2048 /* KeyMod.CtrlCmd */ | 18 /* KeyCode.DownArrow */,\n          mac: {\n            primary: 256 /* KeyMod.WinCtrl */ | 12 /* KeyCode.PageDown */\n          }\n        }\n      });\n    }\n\n    runCoreEditorCommand(viewModel, args) {\n      CoreNavigationCommands.EditorScroll.runCoreEditorCommand(viewModel, {\n        to: EditorScroll_.RawDirection.Down,\n        by: EditorScroll_.RawUnit.WrappedLine,\n        value: 1,\n        revealCursor: false,\n        select: false,\n        source: args.source\n      });\n    }\n  }());\n  CoreNavigationCommands.ScrollPageDown = registerEditorCommand(new class extends CoreEditorCommand {\n    constructor() {\n      super({\n        id: 'scrollPageDown',\n        precondition: undefined,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 2048 /* KeyMod.CtrlCmd */ | 12 /* KeyCode.PageDown */,\n          win: {\n            primary: 512 /* KeyMod.Alt */ | 12 /* KeyCode.PageDown */\n          },\n          linux: {\n            primary: 512 /* KeyMod.Alt */ | 12 /* KeyCode.PageDown */\n          }\n        }\n      });\n    }\n\n    runCoreEditorCommand(viewModel, args) {\n      CoreNavigationCommands.EditorScroll.runCoreEditorCommand(viewModel, {\n        to: EditorScroll_.RawDirection.Down,\n        by: EditorScroll_.RawUnit.Page,\n        value: 1,\n        revealCursor: false,\n        select: false,\n        source: args.source\n      });\n    }\n  }());\n  CoreNavigationCommands.ScrollEditorBottom = registerEditorCommand(new class extends CoreEditorCommand {\n    constructor() {\n      super({\n        id: 'scrollEditorBottom',\n        precondition: undefined,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus\n        }\n      });\n    }\n    runCoreEditorCommand(viewModel, args) {\n      CoreNavigationCommands.EditorScroll.runCoreEditorCommand(viewModel, {\n        to: EditorScroll_.RawDirection.Down,\n        by: EditorScroll_.RawUnit.Editor,\n        value: 1,\n        revealCursor: false,\n        select: false,\n        source: args.source\n      });\n    }\n  }());\n  CoreNavigationCommands.ScrollLeft = registerEditorCommand(new class extends CoreEditorCommand {\n    constructor() {\n      super({\n        id: 'scrollLeft',\n        precondition: undefined,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus\n        }\n      });\n    }\n    runCoreEditorCommand(viewModel, args) {\n      CoreNavigationCommands.EditorScroll.runCoreEditorCommand(viewModel, {\n        to: EditorScroll_.RawDirection.Left,\n        by: EditorScroll_.RawUnit.Column,\n        value: 2,\n        revealCursor: false,\n        select: false,\n        source: args.source\n      });\n    }\n  }());\n  CoreNavigationCommands.ScrollRight = registerEditorCommand(new class extends CoreEditorCommand {\n    constructor() {\n      super({\n        id: 'scrollRight',\n        precondition: undefined,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus\n        }\n      });\n    }\n    runCoreEditorCommand(viewModel, args) {\n      CoreNavigationCommands.EditorScroll.runCoreEditorCommand(viewModel, {\n        to: EditorScroll_.RawDirection.Right,\n        by: EditorScroll_.RawUnit.Column,\n        value: 2,\n        revealCursor: false,\n        select: false,\n        source: args.source\n      });\n    }\n  }());\n  class WordCommand extends CoreEditorCommand {\n    constructor(opts) {\n      super(opts);\n      this._inSelectionMode = opts.inSelectionMode;\n    }\n    runCoreEditorCommand(viewModel, args) {\n      if (!args.position) {\n        return;\n      }\n      viewModel.model.pushStackElement();\n      viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, [CursorMoveCommands.word(viewModel, viewModel.getPrimaryCursorState(), this._inSelectionMode, args.position)]);\n      if (args.revealType !== 2 /* NavigationCommandRevealType.None */) {\n        viewModel.revealPrimaryCursor(args.source, true, true);\n      }\n    }\n  }\n  CoreNavigationCommands.WordSelect = registerEditorCommand(new WordCommand({\n    inSelectionMode: false,\n    id: '_wordSelect',\n    precondition: undefined\n  }));\n  CoreNavigationCommands.WordSelectDrag = registerEditorCommand(new WordCommand({\n    inSelectionMode: true,\n    id: '_wordSelectDrag',\n    precondition: undefined\n  }));\n  CoreNavigationCommands.LastCursorWordSelect = registerEditorCommand(new class extends CoreEditorCommand {\n    constructor() {\n      super({\n        id: 'lastCursorWordSelect',\n        precondition: undefined\n      });\n    }\n    runCoreEditorCommand(viewModel, args) {\n      if (!args.position) {\n        return;\n      }\n      const lastAddedCursorIndex = viewModel.getLastAddedCursorIndex();\n      const states = viewModel.getCursorStates();\n      const newStates = states.slice(0);\n      const lastAddedState = states[lastAddedCursorIndex];\n      newStates[lastAddedCursorIndex] = CursorMoveCommands.word(viewModel, lastAddedState, lastAddedState.modelState.hasSelection(), args.position);\n      viewModel.model.pushStackElement();\n      viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, newStates);\n    }\n  }());\n  class LineCommand extends CoreEditorCommand {\n    constructor(opts) {\n      super(opts);\n      this._inSelectionMode = opts.inSelectionMode;\n    }\n    runCoreEditorCommand(viewModel, args) {\n      if (!args.position) {\n        return;\n      }\n      viewModel.model.pushStackElement();\n      viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, [CursorMoveCommands.line(viewModel, viewModel.getPrimaryCursorState(), this._inSelectionMode, args.position, args.viewPosition)]);\n      if (args.revealType !== 2 /* NavigationCommandRevealType.None */) {\n        viewModel.revealPrimaryCursor(args.source, false, true);\n      }\n    }\n  }\n  CoreNavigationCommands.LineSelect = registerEditorCommand(new LineCommand({\n    inSelectionMode: false,\n    id: '_lineSelect',\n    precondition: undefined\n  }));\n  CoreNavigationCommands.LineSelectDrag = registerEditorCommand(new LineCommand({\n    inSelectionMode: true,\n    id: '_lineSelectDrag',\n    precondition: undefined\n  }));\n  class LastCursorLineCommand extends CoreEditorCommand {\n    constructor(opts) {\n      super(opts);\n      this._inSelectionMode = opts.inSelectionMode;\n    }\n    runCoreEditorCommand(viewModel, args) {\n      if (!args.position) {\n        return;\n      }\n      const lastAddedCursorIndex = viewModel.getLastAddedCursorIndex();\n      const states = viewModel.getCursorStates();\n      const newStates = states.slice(0);\n      newStates[lastAddedCursorIndex] = CursorMoveCommands.line(viewModel, states[lastAddedCursorIndex], this._inSelectionMode, args.position, args.viewPosition);\n      viewModel.model.pushStackElement();\n      viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, newStates);\n    }\n  }\n  CoreNavigationCommands.LastCursorLineSelect = registerEditorCommand(new LastCursorLineCommand({\n    inSelectionMode: false,\n    id: 'lastCursorLineSelect',\n    precondition: undefined\n  }));\n  CoreNavigationCommands.LastCursorLineSelectDrag = registerEditorCommand(new LastCursorLineCommand({\n    inSelectionMode: true,\n    id: 'lastCursorLineSelectDrag',\n    precondition: undefined\n  }));\n  CoreNavigationCommands.CancelSelection = registerEditorCommand(new class extends CoreEditorCommand {\n    constructor() {\n      super({\n        id: 'cancelSelection',\n        precondition: EditorContextKeys.hasNonEmptySelection,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 9 /* KeyCode.Escape */,\n          secondary: [1024 /* KeyMod.Shift */ | 9 /* KeyCode.Escape */]\n        }\n      });\n    }\n\n    runCoreEditorCommand(viewModel, args) {\n      viewModel.model.pushStackElement();\n      viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, [CursorMoveCommands.cancelSelection(viewModel, viewModel.getPrimaryCursorState())]);\n      viewModel.revealPrimaryCursor(args.source, true);\n    }\n  }());\n  CoreNavigationCommands.RemoveSecondaryCursors = registerEditorCommand(new class extends CoreEditorCommand {\n    constructor() {\n      super({\n        id: 'removeSecondaryCursors',\n        precondition: EditorContextKeys.hasMultipleSelections,\n        kbOpts: {\n          weight: CORE_WEIGHT + 1,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 9 /* KeyCode.Escape */,\n          secondary: [1024 /* KeyMod.Shift */ | 9 /* KeyCode.Escape */]\n        }\n      });\n    }\n\n    runCoreEditorCommand(viewModel, args) {\n      viewModel.model.pushStackElement();\n      viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, [viewModel.getPrimaryCursorState()]);\n      viewModel.revealPrimaryCursor(args.source, true);\n      status(nls.localize('removedCursor', \"Removed secondary cursors\"));\n    }\n  }());\n  CoreNavigationCommands.RevealLine = registerEditorCommand(new class extends CoreEditorCommand {\n    constructor() {\n      super({\n        id: 'revealLine',\n        precondition: undefined,\n        description: RevealLine_.description\n      });\n    }\n    runCoreEditorCommand(viewModel, args) {\n      const revealLineArg = args;\n      const lineNumberArg = revealLineArg.lineNumber || 0;\n      let lineNumber = typeof lineNumberArg === 'number' ? lineNumberArg + 1 : parseInt(lineNumberArg) + 1;\n      if (lineNumber < 1) {\n        lineNumber = 1;\n      }\n      const lineCount = viewModel.model.getLineCount();\n      if (lineNumber > lineCount) {\n        lineNumber = lineCount;\n      }\n      const range = new Range(lineNumber, 1, lineNumber, viewModel.model.getLineMaxColumn(lineNumber));\n      let revealAt = 0 /* VerticalRevealType.Simple */;\n      if (revealLineArg.at) {\n        switch (revealLineArg.at) {\n          case RevealLine_.RawAtArgument.Top:\n            revealAt = 3 /* VerticalRevealType.Top */;\n            break;\n          case RevealLine_.RawAtArgument.Center:\n            revealAt = 1 /* VerticalRevealType.Center */;\n            break;\n          case RevealLine_.RawAtArgument.Bottom:\n            revealAt = 4 /* VerticalRevealType.Bottom */;\n            break;\n          default:\n            break;\n        }\n      }\n      const viewRange = viewModel.coordinatesConverter.convertModelRangeToViewRange(range);\n      viewModel.revealRange(args.source, false, viewRange, revealAt, 0 /* ScrollType.Smooth */);\n    }\n  }());\n\n  CoreNavigationCommands.SelectAll = new class extends EditorOrNativeTextInputCommand {\n    constructor() {\n      super(SelectAllCommand);\n    }\n    runDOMCommand() {\n      if (isFirefox) {\n        document.activeElement.focus();\n        document.activeElement.select();\n      }\n      document.execCommand('selectAll');\n    }\n    runEditorCommand(accessor, editor, args) {\n      const viewModel = editor._getViewModel();\n      if (!viewModel) {\n        // the editor has no view => has no cursors\n        return;\n      }\n      this.runCoreEditorCommand(viewModel, args);\n    }\n    runCoreEditorCommand(viewModel, args) {\n      viewModel.model.pushStackElement();\n      viewModel.setCursorStates('keyboard', 3 /* CursorChangeReason.Explicit */, [CursorMoveCommands.selectAll(viewModel, viewModel.getPrimaryCursorState())]);\n    }\n  }();\n  CoreNavigationCommands.SetSelection = registerEditorCommand(new class extends CoreEditorCommand {\n    constructor() {\n      super({\n        id: 'setSelection',\n        precondition: undefined\n      });\n    }\n    runCoreEditorCommand(viewModel, args) {\n      if (!args.selection) {\n        return;\n      }\n      viewModel.model.pushStackElement();\n      viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, [CursorState.fromModelSelection(args.selection)]);\n    }\n  }());\n})(CoreNavigationCommands || (CoreNavigationCommands = {}));\nconst columnSelectionCondition = ContextKeyExpr.and(EditorContextKeys.textInputFocus, EditorContextKeys.columnSelection);\nfunction registerColumnSelection(id, keybinding) {\n  KeybindingsRegistry.registerKeybindingRule({\n    id: id,\n    primary: keybinding,\n    when: columnSelectionCondition,\n    weight: CORE_WEIGHT + 1\n  });\n}\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectLeft.id, 1024 /* KeyMod.Shift */ | 15 /* KeyCode.LeftArrow */);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectRight.id, 1024 /* KeyMod.Shift */ | 17 /* KeyCode.RightArrow */);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectUp.id, 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectPageUp.id, 1024 /* KeyMod.Shift */ | 11 /* KeyCode.PageUp */);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectDown.id, 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectPageDown.id, 1024 /* KeyMod.Shift */ | 12 /* KeyCode.PageDown */);\nfunction registerCommand(command) {\n  command.register();\n  return command;\n}\nexport var CoreEditingCommands;\n(function (CoreEditingCommands) {\n  class CoreEditingCommand extends EditorCommand {\n    runEditorCommand(accessor, editor, args) {\n      const viewModel = editor._getViewModel();\n      if (!viewModel) {\n        // the editor has no view => has no cursors\n        return;\n      }\n      this.runCoreEditingCommand(editor, viewModel, args || {});\n    }\n  }\n  CoreEditingCommands.CoreEditingCommand = CoreEditingCommand;\n  CoreEditingCommands.LineBreakInsert = registerEditorCommand(new class extends CoreEditingCommand {\n    constructor() {\n      super({\n        id: 'lineBreakInsert',\n        precondition: EditorContextKeys.writable,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 0,\n          mac: {\n            primary: 256 /* KeyMod.WinCtrl */ | 45 /* KeyCode.KeyO */\n          }\n        }\n      });\n    }\n\n    runCoreEditingCommand(editor, viewModel, args) {\n      editor.pushUndoStop();\n      editor.executeCommands(this.id, TypeOperations.lineBreakInsert(viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection)));\n    }\n  }());\n  CoreEditingCommands.Outdent = registerEditorCommand(new class extends CoreEditingCommand {\n    constructor() {\n      super({\n        id: 'outdent',\n        precondition: EditorContextKeys.writable,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: ContextKeyExpr.and(EditorContextKeys.editorTextFocus, EditorContextKeys.tabDoesNotMoveFocus),\n          primary: 1024 /* KeyMod.Shift */ | 2 /* KeyCode.Tab */\n        }\n      });\n    }\n\n    runCoreEditingCommand(editor, viewModel, args) {\n      editor.pushUndoStop();\n      editor.executeCommands(this.id, TypeOperations.outdent(viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection)));\n      editor.pushUndoStop();\n    }\n  }());\n  CoreEditingCommands.Tab = registerEditorCommand(new class extends CoreEditingCommand {\n    constructor() {\n      super({\n        id: 'tab',\n        precondition: EditorContextKeys.writable,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: ContextKeyExpr.and(EditorContextKeys.editorTextFocus, EditorContextKeys.tabDoesNotMoveFocus),\n          primary: 2 /* KeyCode.Tab */\n        }\n      });\n    }\n\n    runCoreEditingCommand(editor, viewModel, args) {\n      editor.pushUndoStop();\n      editor.executeCommands(this.id, TypeOperations.tab(viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection)));\n      editor.pushUndoStop();\n    }\n  }());\n  CoreEditingCommands.DeleteLeft = registerEditorCommand(new class extends CoreEditingCommand {\n    constructor() {\n      super({\n        id: 'deleteLeft',\n        precondition: undefined,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 1 /* KeyCode.Backspace */,\n          secondary: [1024 /* KeyMod.Shift */ | 1 /* KeyCode.Backspace */],\n          mac: {\n            primary: 1 /* KeyCode.Backspace */,\n            secondary: [1024 /* KeyMod.Shift */ | 1 /* KeyCode.Backspace */, 256 /* KeyMod.WinCtrl */ | 38 /* KeyCode.KeyH */, 256 /* KeyMod.WinCtrl */ | 1 /* KeyCode.Backspace */]\n          }\n        }\n      });\n    }\n\n    runCoreEditingCommand(editor, viewModel, args) {\n      const [shouldPushStackElementBefore, commands] = DeleteOperations.deleteLeft(viewModel.getPrevEditOperationType(), viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection), viewModel.getCursorAutoClosedCharacters());\n      if (shouldPushStackElementBefore) {\n        editor.pushUndoStop();\n      }\n      editor.executeCommands(this.id, commands);\n      viewModel.setPrevEditOperationType(2 /* EditOperationType.DeletingLeft */);\n    }\n  }());\n\n  CoreEditingCommands.DeleteRight = registerEditorCommand(new class extends CoreEditingCommand {\n    constructor() {\n      super({\n        id: 'deleteRight',\n        precondition: undefined,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 20 /* KeyCode.Delete */,\n          mac: {\n            primary: 20 /* KeyCode.Delete */,\n            secondary: [256 /* KeyMod.WinCtrl */ | 34 /* KeyCode.KeyD */, 256 /* KeyMod.WinCtrl */ | 20 /* KeyCode.Delete */]\n          }\n        }\n      });\n    }\n\n    runCoreEditingCommand(editor, viewModel, args) {\n      const [shouldPushStackElementBefore, commands] = DeleteOperations.deleteRight(viewModel.getPrevEditOperationType(), viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection));\n      if (shouldPushStackElementBefore) {\n        editor.pushUndoStop();\n      }\n      editor.executeCommands(this.id, commands);\n      viewModel.setPrevEditOperationType(3 /* EditOperationType.DeletingRight */);\n    }\n  }());\n\n  CoreEditingCommands.Undo = new class extends EditorOrNativeTextInputCommand {\n    constructor() {\n      super(UndoCommand);\n    }\n    runDOMCommand() {\n      document.execCommand('undo');\n    }\n    runEditorCommand(accessor, editor, args) {\n      if (!editor.hasModel() || editor.getOption(86 /* EditorOption.readOnly */) === true) {\n        return;\n      }\n      return editor.getModel().undo();\n    }\n  }();\n  CoreEditingCommands.Redo = new class extends EditorOrNativeTextInputCommand {\n    constructor() {\n      super(RedoCommand);\n    }\n    runDOMCommand() {\n      document.execCommand('redo');\n    }\n    runEditorCommand(accessor, editor, args) {\n      if (!editor.hasModel() || editor.getOption(86 /* EditorOption.readOnly */) === true) {\n        return;\n      }\n      return editor.getModel().redo();\n    }\n  }();\n})(CoreEditingCommands || (CoreEditingCommands = {}));\n/**\n * A command that will invoke a command on the focused editor.\n */\nclass EditorHandlerCommand extends Command {\n  constructor(id, handlerId, description) {\n    super({\n      id: id,\n      precondition: undefined,\n      description: description\n    });\n    this._handlerId = handlerId;\n  }\n  runCommand(accessor, args) {\n    const editor = accessor.get(ICodeEditorService).getFocusedCodeEditor();\n    if (!editor) {\n      return;\n    }\n    editor.trigger('keyboard', this._handlerId, args);\n  }\n}\nfunction registerOverwritableCommand(handlerId, description) {\n  registerCommand(new EditorHandlerCommand('default:' + handlerId, handlerId));\n  registerCommand(new EditorHandlerCommand(handlerId, handlerId, description));\n}\nregisterOverwritableCommand(\"type\" /* Handler.Type */, {\n  description: `Type`,\n  args: [{\n    name: 'args',\n    schema: {\n      'type': 'object',\n      'required': ['text'],\n      'properties': {\n        'text': {\n          'type': 'string'\n        }\n      }\n    }\n  }]\n});\nregisterOverwritableCommand(\"replacePreviousChar\" /* Handler.ReplacePreviousChar */);\nregisterOverwritableCommand(\"compositionType\" /* Handler.CompositionType */);\nregisterOverwritableCommand(\"compositionStart\" /* Handler.CompositionStart */);\nregisterOverwritableCommand(\"compositionEnd\" /* Handler.CompositionEnd */);\nregisterOverwritableCommand(\"paste\" /* Handler.Paste */);\nregisterOverwritableCommand(\"cut\" /* Handler.Cut */);","map":{"version":3,"names":["nls","isFirefox","types","status","Command","EditorCommand","registerEditorCommand","UndoCommand","RedoCommand","SelectAllCommand","ICodeEditorService","ColumnSelection","CursorState","DeleteOperations","CursorMove","CursorMove_","CursorMoveCommands","TypeOperations","Position","Range","EditorContextKeys","ContextKeyExpr","KeybindingsRegistry","CORE_WEIGHT","CoreEditorCommand","runEditorCommand","accessor","editor","args","viewModel","_getViewModel","runCoreEditorCommand","EditorScroll_","isEditorScrollArgs","arg","isObject","scrollArg","isString","to","isUndefined","by","value","isNumber","revealCursor","isBoolean","description","name","constraint","schema","RawDirection","Up","Right","Down","Left","RawUnit","Line","WrappedLine","Page","HalfPage","Editor","Column","parse","direction","unit","Math","floor","select","RevealLine_","isRevealLineArgs","reveaLineArg","lineNumber","at","RawAtArgument","Top","Center","Bottom","EditorOrNativeTextInputCommand","constructor","target","addImplementation","focusedEditor","get","getFocusedCodeEditor","hasTextFocus","_runEditorCommand","activeElement","document","indexOf","tagName","toLowerCase","runDOMCommand","activeEditor","getActiveCodeEditor","focus","result","CoreNavigationCommands","BaseMoveToCommand","opts","_inSelectionMode","inSelectionMode","position","model","pushStackElement","cursorStateChanged","setCursorStates","source","moveTo","getPrimaryCursorState","viewPosition","revealType","revealPrimaryCursor","MoveTo","id","precondition","undefined","MoveToSelect","ColumnSelectCommand","_getColumnSelectResult","getCursorColumnSelectData","viewStates","map","viewState","fromViewState","setCursorColumnSelectData","isReal","fromViewLineNumber","fromLineNumber","fromViewVisualColumn","fromVisualColumn","toViewLineNumber","toLineNumber","toViewVisualColumn","toVisualColumn","reversed","revealTopMostCursor","revealBottomMostCursor","ColumnSelect","primary","prevColumnSelectData","mouseColumn","validatedPosition","validatePosition","validatedViewPosition","coordinatesConverter","validateViewPosition","column","doColumnSelect","columnSelect","cursorConfig","CursorColumnSelectLeft","kbOpts","weight","kbExpr","textInputFocus","linux","columnSelectLeft","CursorColumnSelectRight","columnSelectRight","ColumnSelectUpCommand","_isPaged","isPaged","columnSelectUp","CursorColumnSelectUp","CursorColumnSelectPageUp","ColumnSelectDownCommand","columnSelectDown","CursorColumnSelectDown","CursorColumnSelectPageDown","CursorMoveImpl","parsed","_runCursorMove","_move","getCursorStates","cursors","simpleMove","viewportMove","CursorMoveBasedCommand","_staticArgs","dynamicArgs","pageSize","CursorLeft","mac","secondary","CursorLeftSelect","CursorRight","CursorRightSelect","CursorUp","CursorUpSelect","CursorPageUp","CursorPageUpSelect","CursorDown","CursorDownSelect","CursorPageDown","CursorPageDownSelect","CreateCursor","newState","wholeLine","line","states","length","newModelPosition","modelState","newViewPosition","i","len","state","selection","containsPosition","splice","push","LastCursorMoveToSelect","lastAddedCursorIndex","getLastAddedCursorIndex","newStates","slice","HomeCommand","moveToBeginningOfLine","CursorHome","CursorHomeSelect","LineStartCommand","_exec","cursor","fromModelState","move","CursorLineStart","CursorLineStartSelect","EndCommand","moveToEndOfLine","sticky","CursorEnd","type","properties","localize","default","CursorEndSelect","LineEndCommand","maxColumn","getLineMaxColumn","CursorLineEnd","CursorLineEndSelect","TopCommand","moveToBeginningOfBuffer","CursorTop","CursorTopSelect","BottomCommand","moveToEndOfBuffer","CursorBottom","CursorBottomSelect","EditorScrollImpl","determineScrollMethod","horizontalUnits","verticalUnits","horizontalDirections","verticalDirections","includes","_runHorizontalEditorScroll","bind","_runVerticalEditorScroll","runEditorScroll","desiredScrollTop","_computeDesiredScrollTop","desiredVisibleViewRange","getCompletelyVisibleViewRangeAtScrollTop","findPositionInViewportIfOutside","viewLayout","setScrollPosition","scrollTop","futureViewport","getFutureViewport","visibleViewRange","top","visibleModelRange","convertViewRangeToModelRange","desiredTopModelLineNumber","max","startLineNumber","min","getLineCount","convertModelPositionToViewPosition","getVerticalOffsetForLineNumber","noOfLines","round","deltaLines","getCurrentScrollTop","lineHeight","desiredScrollLeft","_computeDesiredScrollLeft","scrollLeft","deltaColumns","getCurrentScrollLeft","typicalHalfwidthCharacterWidth","EditorScroll","ScrollLineUp","ScrollPageUp","win","ScrollEditorTop","ScrollLineDown","ScrollPageDown","ScrollEditorBottom","ScrollLeft","ScrollRight","WordCommand","word","WordSelect","WordSelectDrag","LastCursorWordSelect","lastAddedState","hasSelection","LineCommand","LineSelect","LineSelectDrag","LastCursorLineCommand","LastCursorLineSelect","LastCursorLineSelectDrag","CancelSelection","hasNonEmptySelection","cancelSelection","RemoveSecondaryCursors","hasMultipleSelections","RevealLine","revealLineArg","lineNumberArg","parseInt","lineCount","range","revealAt","viewRange","convertModelRangeToViewRange","revealRange","SelectAll","execCommand","selectAll","SetSelection","fromModelSelection","columnSelectionCondition","and","columnSelection","registerColumnSelection","keybinding","registerKeybindingRule","when","registerCommand","command","register","CoreEditingCommands","CoreEditingCommand","runCoreEditingCommand","LineBreakInsert","writable","pushUndoStop","executeCommands","lineBreakInsert","s","Outdent","editorTextFocus","tabDoesNotMoveFocus","outdent","Tab","tab","DeleteLeft","shouldPushStackElementBefore","commands","deleteLeft","getPrevEditOperationType","getCursorAutoClosedCharacters","setPrevEditOperationType","DeleteRight","deleteRight","Undo","hasModel","getOption","getModel","undo","Redo","redo","EditorHandlerCommand","handlerId","_handlerId","runCommand","trigger","registerOverwritableCommand"],"sources":["/Users/cadany/WebstormProjects/monaco/node_modules/monaco-editor/esm/vs/editor/browser/coreCommands.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../nls.js';\nimport { isFirefox } from '../../base/browser/browser.js';\nimport * as types from '../../base/common/types.js';\nimport { status } from '../../base/browser/ui/aria/aria.js';\nimport { Command, EditorCommand, registerEditorCommand, UndoCommand, RedoCommand, SelectAllCommand } from './editorExtensions.js';\nimport { ICodeEditorService } from './services/codeEditorService.js';\nimport { ColumnSelection } from '../common/cursor/cursorColumnSelection.js';\nimport { CursorState } from '../common/cursorCommon.js';\nimport { DeleteOperations } from '../common/cursor/cursorDeleteOperations.js';\nimport { CursorMove as CursorMove_, CursorMoveCommands } from '../common/cursor/cursorMoveCommands.js';\nimport { TypeOperations } from '../common/cursor/cursorTypeOperations.js';\nimport { Position } from '../common/core/position.js';\nimport { Range } from '../common/core/range.js';\nimport { EditorContextKeys } from '../common/editorContextKeys.js';\nimport { ContextKeyExpr } from '../../platform/contextkey/common/contextkey.js';\nimport { KeybindingsRegistry } from '../../platform/keybinding/common/keybindingsRegistry.js';\nconst CORE_WEIGHT = 0 /* KeybindingWeight.EditorCore */;\nexport class CoreEditorCommand extends EditorCommand {\n    runEditorCommand(accessor, editor, args) {\n        const viewModel = editor._getViewModel();\n        if (!viewModel) {\n            // the editor has no view => has no cursors\n            return;\n        }\n        this.runCoreEditorCommand(viewModel, args || {});\n    }\n}\nexport var EditorScroll_;\n(function (EditorScroll_) {\n    const isEditorScrollArgs = function (arg) {\n        if (!types.isObject(arg)) {\n            return false;\n        }\n        const scrollArg = arg;\n        if (!types.isString(scrollArg.to)) {\n            return false;\n        }\n        if (!types.isUndefined(scrollArg.by) && !types.isString(scrollArg.by)) {\n            return false;\n        }\n        if (!types.isUndefined(scrollArg.value) && !types.isNumber(scrollArg.value)) {\n            return false;\n        }\n        if (!types.isUndefined(scrollArg.revealCursor) && !types.isBoolean(scrollArg.revealCursor)) {\n            return false;\n        }\n        return true;\n    };\n    EditorScroll_.description = {\n        description: 'Scroll editor in the given direction',\n        args: [\n            {\n                name: 'Editor scroll argument object',\n                description: `Property-value pairs that can be passed through this argument:\n\t\t\t\t\t* 'to': A mandatory direction value.\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t\t'up', 'down'\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t* 'by': Unit to move. Default is computed based on 'to' value.\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t\t'line', 'wrappedLine', 'page', 'halfPage', 'editor'\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t* 'value': Number of units to move. Default is '1'.\n\t\t\t\t\t* 'revealCursor': If 'true' reveals the cursor if it is outside view port.\n\t\t\t\t`,\n                constraint: isEditorScrollArgs,\n                schema: {\n                    'type': 'object',\n                    'required': ['to'],\n                    'properties': {\n                        'to': {\n                            'type': 'string',\n                            'enum': ['up', 'down']\n                        },\n                        'by': {\n                            'type': 'string',\n                            'enum': ['line', 'wrappedLine', 'page', 'halfPage', 'editor']\n                        },\n                        'value': {\n                            'type': 'number',\n                            'default': 1\n                        },\n                        'revealCursor': {\n                            'type': 'boolean',\n                        }\n                    }\n                }\n            }\n        ]\n    };\n    /**\n     * Directions in the view for editor scroll command.\n     */\n    EditorScroll_.RawDirection = {\n        Up: 'up',\n        Right: 'right',\n        Down: 'down',\n        Left: 'left'\n    };\n    /**\n     * Units for editor scroll 'by' argument\n     */\n    EditorScroll_.RawUnit = {\n        Line: 'line',\n        WrappedLine: 'wrappedLine',\n        Page: 'page',\n        HalfPage: 'halfPage',\n        Editor: 'editor',\n        Column: 'column'\n    };\n    function parse(args) {\n        let direction;\n        switch (args.to) {\n            case EditorScroll_.RawDirection.Up:\n                direction = 1 /* Direction.Up */;\n                break;\n            case EditorScroll_.RawDirection.Right:\n                direction = 2 /* Direction.Right */;\n                break;\n            case EditorScroll_.RawDirection.Down:\n                direction = 3 /* Direction.Down */;\n                break;\n            case EditorScroll_.RawDirection.Left:\n                direction = 4 /* Direction.Left */;\n                break;\n            default:\n                // Illegal arguments\n                return null;\n        }\n        let unit;\n        switch (args.by) {\n            case EditorScroll_.RawUnit.Line:\n                unit = 1 /* Unit.Line */;\n                break;\n            case EditorScroll_.RawUnit.WrappedLine:\n                unit = 2 /* Unit.WrappedLine */;\n                break;\n            case EditorScroll_.RawUnit.Page:\n                unit = 3 /* Unit.Page */;\n                break;\n            case EditorScroll_.RawUnit.HalfPage:\n                unit = 4 /* Unit.HalfPage */;\n                break;\n            case EditorScroll_.RawUnit.Editor:\n                unit = 5 /* Unit.Editor */;\n                break;\n            case EditorScroll_.RawUnit.Column:\n                unit = 6 /* Unit.Column */;\n                break;\n            default:\n                unit = 2 /* Unit.WrappedLine */;\n        }\n        const value = Math.floor(args.value || 1);\n        const revealCursor = !!args.revealCursor;\n        return {\n            direction: direction,\n            unit: unit,\n            value: value,\n            revealCursor: revealCursor,\n            select: (!!args.select)\n        };\n    }\n    EditorScroll_.parse = parse;\n})(EditorScroll_ || (EditorScroll_ = {}));\nexport var RevealLine_;\n(function (RevealLine_) {\n    const isRevealLineArgs = function (arg) {\n        if (!types.isObject(arg)) {\n            return false;\n        }\n        const reveaLineArg = arg;\n        if (!types.isNumber(reveaLineArg.lineNumber) && !types.isString(reveaLineArg.lineNumber)) {\n            return false;\n        }\n        if (!types.isUndefined(reveaLineArg.at) && !types.isString(reveaLineArg.at)) {\n            return false;\n        }\n        return true;\n    };\n    RevealLine_.description = {\n        description: 'Reveal the given line at the given logical position',\n        args: [\n            {\n                name: 'Reveal line argument object',\n                description: `Property-value pairs that can be passed through this argument:\n\t\t\t\t\t* 'lineNumber': A mandatory line number value.\n\t\t\t\t\t* 'at': Logical position at which line has to be revealed.\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t\t\t'top', 'center', 'bottom'\n\t\t\t\t\t\t\\`\\`\\`\n\t\t\t\t`,\n                constraint: isRevealLineArgs,\n                schema: {\n                    'type': 'object',\n                    'required': ['lineNumber'],\n                    'properties': {\n                        'lineNumber': {\n                            'type': ['number', 'string'],\n                        },\n                        'at': {\n                            'type': 'string',\n                            'enum': ['top', 'center', 'bottom']\n                        }\n                    }\n                }\n            }\n        ]\n    };\n    /**\n     * Values for reveal line 'at' argument\n     */\n    RevealLine_.RawAtArgument = {\n        Top: 'top',\n        Center: 'center',\n        Bottom: 'bottom'\n    };\n})(RevealLine_ || (RevealLine_ = {}));\nclass EditorOrNativeTextInputCommand {\n    constructor(target) {\n        // 1. handle case when focus is in editor.\n        target.addImplementation(10000, 'code-editor', (accessor, args) => {\n            // Only if editor text focus (i.e. not if editor has widget focus).\n            const focusedEditor = accessor.get(ICodeEditorService).getFocusedCodeEditor();\n            if (focusedEditor && focusedEditor.hasTextFocus()) {\n                return this._runEditorCommand(accessor, focusedEditor, args);\n            }\n            return false;\n        });\n        // 2. handle case when focus is in some other `input` / `textarea`.\n        target.addImplementation(1000, 'generic-dom-input-textarea', (accessor, args) => {\n            // Only if focused on an element that allows for entering text\n            const activeElement = document.activeElement;\n            if (activeElement && ['input', 'textarea'].indexOf(activeElement.tagName.toLowerCase()) >= 0) {\n                this.runDOMCommand();\n                return true;\n            }\n            return false;\n        });\n        // 3. (default) handle case when focus is somewhere else.\n        target.addImplementation(0, 'generic-dom', (accessor, args) => {\n            // Redirecting to active editor\n            const activeEditor = accessor.get(ICodeEditorService).getActiveCodeEditor();\n            if (activeEditor) {\n                activeEditor.focus();\n                return this._runEditorCommand(accessor, activeEditor, args);\n            }\n            return false;\n        });\n    }\n    _runEditorCommand(accessor, editor, args) {\n        const result = this.runEditorCommand(accessor, editor, args);\n        if (result) {\n            return result;\n        }\n        return true;\n    }\n}\nexport var CoreNavigationCommands;\n(function (CoreNavigationCommands) {\n    class BaseMoveToCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            if (!args.position) {\n                return;\n            }\n            viewModel.model.pushStackElement();\n            const cursorStateChanged = viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, [\n                CursorMoveCommands.moveTo(viewModel, viewModel.getPrimaryCursorState(), this._inSelectionMode, args.position, args.viewPosition)\n            ]);\n            if (cursorStateChanged && args.revealType !== 2 /* NavigationCommandRevealType.None */) {\n                viewModel.revealPrimaryCursor(args.source, true, true);\n            }\n        }\n    }\n    CoreNavigationCommands.MoveTo = registerEditorCommand(new BaseMoveToCommand({\n        id: '_moveTo',\n        inSelectionMode: false,\n        precondition: undefined\n    }));\n    CoreNavigationCommands.MoveToSelect = registerEditorCommand(new BaseMoveToCommand({\n        id: '_moveToSelect',\n        inSelectionMode: true,\n        precondition: undefined\n    }));\n    class ColumnSelectCommand extends CoreEditorCommand {\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            const result = this._getColumnSelectResult(viewModel, viewModel.getPrimaryCursorState(), viewModel.getCursorColumnSelectData(), args);\n            if (result === null) {\n                // invalid arguments\n                return;\n            }\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, result.viewStates.map((viewState) => CursorState.fromViewState(viewState)));\n            viewModel.setCursorColumnSelectData({\n                isReal: true,\n                fromViewLineNumber: result.fromLineNumber,\n                fromViewVisualColumn: result.fromVisualColumn,\n                toViewLineNumber: result.toLineNumber,\n                toViewVisualColumn: result.toVisualColumn\n            });\n            if (result.reversed) {\n                viewModel.revealTopMostCursor(args.source);\n            }\n            else {\n                viewModel.revealBottomMostCursor(args.source);\n            }\n        }\n    }\n    CoreNavigationCommands.ColumnSelect = registerEditorCommand(new class extends ColumnSelectCommand {\n        constructor() {\n            super({\n                id: 'columnSelect',\n                precondition: undefined\n            });\n        }\n        _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\n            if (typeof args.position === 'undefined' || typeof args.viewPosition === 'undefined' || typeof args.mouseColumn === 'undefined') {\n                return null;\n            }\n            // validate `args`\n            const validatedPosition = viewModel.model.validatePosition(args.position);\n            const validatedViewPosition = viewModel.coordinatesConverter.validateViewPosition(new Position(args.viewPosition.lineNumber, args.viewPosition.column), validatedPosition);\n            const fromViewLineNumber = args.doColumnSelect ? prevColumnSelectData.fromViewLineNumber : validatedViewPosition.lineNumber;\n            const fromViewVisualColumn = args.doColumnSelect ? prevColumnSelectData.fromViewVisualColumn : args.mouseColumn - 1;\n            return ColumnSelection.columnSelect(viewModel.cursorConfig, viewModel, fromViewLineNumber, fromViewVisualColumn, validatedViewPosition.lineNumber, args.mouseColumn - 1);\n        }\n    });\n    CoreNavigationCommands.CursorColumnSelectLeft = registerEditorCommand(new class extends ColumnSelectCommand {\n        constructor() {\n            super({\n                id: 'cursorColumnSelectLeft',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 15 /* KeyCode.LeftArrow */,\n                    linux: { primary: 0 }\n                }\n            });\n        }\n        _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\n            return ColumnSelection.columnSelectLeft(viewModel.cursorConfig, viewModel, prevColumnSelectData);\n        }\n    });\n    CoreNavigationCommands.CursorColumnSelectRight = registerEditorCommand(new class extends ColumnSelectCommand {\n        constructor() {\n            super({\n                id: 'cursorColumnSelectRight',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 17 /* KeyCode.RightArrow */,\n                    linux: { primary: 0 }\n                }\n            });\n        }\n        _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\n            return ColumnSelection.columnSelectRight(viewModel.cursorConfig, viewModel, prevColumnSelectData);\n        }\n    });\n    class ColumnSelectUpCommand extends ColumnSelectCommand {\n        constructor(opts) {\n            super(opts);\n            this._isPaged = opts.isPaged;\n        }\n        _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\n            return ColumnSelection.columnSelectUp(viewModel.cursorConfig, viewModel, prevColumnSelectData, this._isPaged);\n        }\n    }\n    CoreNavigationCommands.CursorColumnSelectUp = registerEditorCommand(new ColumnSelectUpCommand({\n        isPaged: false,\n        id: 'cursorColumnSelectUp',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 16 /* KeyCode.UpArrow */,\n            linux: { primary: 0 }\n        }\n    }));\n    CoreNavigationCommands.CursorColumnSelectPageUp = registerEditorCommand(new ColumnSelectUpCommand({\n        isPaged: true,\n        id: 'cursorColumnSelectPageUp',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 11 /* KeyCode.PageUp */,\n            linux: { primary: 0 }\n        }\n    }));\n    class ColumnSelectDownCommand extends ColumnSelectCommand {\n        constructor(opts) {\n            super(opts);\n            this._isPaged = opts.isPaged;\n        }\n        _getColumnSelectResult(viewModel, primary, prevColumnSelectData, args) {\n            return ColumnSelection.columnSelectDown(viewModel.cursorConfig, viewModel, prevColumnSelectData, this._isPaged);\n        }\n    }\n    CoreNavigationCommands.CursorColumnSelectDown = registerEditorCommand(new ColumnSelectDownCommand({\n        isPaged: false,\n        id: 'cursorColumnSelectDown',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 18 /* KeyCode.DownArrow */,\n            linux: { primary: 0 }\n        }\n    }));\n    CoreNavigationCommands.CursorColumnSelectPageDown = registerEditorCommand(new ColumnSelectDownCommand({\n        isPaged: true,\n        id: 'cursorColumnSelectPageDown',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 512 /* KeyMod.Alt */ | 12 /* KeyCode.PageDown */,\n            linux: { primary: 0 }\n        }\n    }));\n    class CursorMoveImpl extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'cursorMove',\n                precondition: undefined,\n                description: CursorMove_.description\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            const parsed = CursorMove_.parse(args);\n            if (!parsed) {\n                // illegal arguments\n                return;\n            }\n            this._runCursorMove(viewModel, args.source, parsed);\n        }\n        _runCursorMove(viewModel, source, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(source, 3 /* CursorChangeReason.Explicit */, CursorMoveImpl._move(viewModel, viewModel.getCursorStates(), args));\n            viewModel.revealPrimaryCursor(source, true);\n        }\n        static _move(viewModel, cursors, args) {\n            const inSelectionMode = args.select;\n            const value = args.value;\n            switch (args.direction) {\n                case 0 /* CursorMove_.Direction.Left */:\n                case 1 /* CursorMove_.Direction.Right */:\n                case 2 /* CursorMove_.Direction.Up */:\n                case 3 /* CursorMove_.Direction.Down */:\n                case 4 /* CursorMove_.Direction.PrevBlankLine */:\n                case 5 /* CursorMove_.Direction.NextBlankLine */:\n                case 6 /* CursorMove_.Direction.WrappedLineStart */:\n                case 7 /* CursorMove_.Direction.WrappedLineFirstNonWhitespaceCharacter */:\n                case 8 /* CursorMove_.Direction.WrappedLineColumnCenter */:\n                case 9 /* CursorMove_.Direction.WrappedLineEnd */:\n                case 10 /* CursorMove_.Direction.WrappedLineLastNonWhitespaceCharacter */:\n                    return CursorMoveCommands.simpleMove(viewModel, cursors, args.direction, inSelectionMode, value, args.unit);\n                case 11 /* CursorMove_.Direction.ViewPortTop */:\n                case 13 /* CursorMove_.Direction.ViewPortBottom */:\n                case 12 /* CursorMove_.Direction.ViewPortCenter */:\n                case 14 /* CursorMove_.Direction.ViewPortIfOutside */:\n                    return CursorMoveCommands.viewportMove(viewModel, cursors, args.direction, inSelectionMode, value);\n                default:\n                    return null;\n            }\n        }\n    }\n    CoreNavigationCommands.CursorMoveImpl = CursorMoveImpl;\n    CoreNavigationCommands.CursorMove = registerEditorCommand(new CursorMoveImpl());\n    class CursorMoveBasedCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._staticArgs = opts.args;\n        }\n        runCoreEditorCommand(viewModel, dynamicArgs) {\n            let args = this._staticArgs;\n            if (this._staticArgs.value === -1 /* Constants.PAGE_SIZE_MARKER */) {\n                // -1 is a marker for page size\n                args = {\n                    direction: this._staticArgs.direction,\n                    unit: this._staticArgs.unit,\n                    select: this._staticArgs.select,\n                    value: dynamicArgs.pageSize || viewModel.cursorConfig.pageSize\n                };\n            }\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(dynamicArgs.source, 3 /* CursorChangeReason.Explicit */, CursorMoveCommands.simpleMove(viewModel, viewModel.getCursorStates(), args.direction, args.select, args.value, args.unit));\n            viewModel.revealPrimaryCursor(dynamicArgs.source, true);\n        }\n    }\n    CoreNavigationCommands.CursorLeft = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 0 /* CursorMove_.Direction.Left */,\n            unit: 0 /* CursorMove_.Unit.None */,\n            select: false,\n            value: 1\n        },\n        id: 'cursorLeft',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 15 /* KeyCode.LeftArrow */,\n            mac: { primary: 15 /* KeyCode.LeftArrow */, secondary: [256 /* KeyMod.WinCtrl */ | 32 /* KeyCode.KeyB */] }\n        }\n    }));\n    CoreNavigationCommands.CursorLeftSelect = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 0 /* CursorMove_.Direction.Left */,\n            unit: 0 /* CursorMove_.Unit.None */,\n            select: true,\n            value: 1\n        },\n        id: 'cursorLeftSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 1024 /* KeyMod.Shift */ | 15 /* KeyCode.LeftArrow */\n        }\n    }));\n    CoreNavigationCommands.CursorRight = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 1 /* CursorMove_.Direction.Right */,\n            unit: 0 /* CursorMove_.Unit.None */,\n            select: false,\n            value: 1\n        },\n        id: 'cursorRight',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 17 /* KeyCode.RightArrow */,\n            mac: { primary: 17 /* KeyCode.RightArrow */, secondary: [256 /* KeyMod.WinCtrl */ | 36 /* KeyCode.KeyF */] }\n        }\n    }));\n    CoreNavigationCommands.CursorRightSelect = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 1 /* CursorMove_.Direction.Right */,\n            unit: 0 /* CursorMove_.Unit.None */,\n            select: true,\n            value: 1\n        },\n        id: 'cursorRightSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 1024 /* KeyMod.Shift */ | 17 /* KeyCode.RightArrow */\n        }\n    }));\n    CoreNavigationCommands.CursorUp = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 2 /* CursorMove_.Direction.Up */,\n            unit: 2 /* CursorMove_.Unit.WrappedLine */,\n            select: false,\n            value: 1\n        },\n        id: 'cursorUp',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 16 /* KeyCode.UpArrow */,\n            mac: { primary: 16 /* KeyCode.UpArrow */, secondary: [256 /* KeyMod.WinCtrl */ | 46 /* KeyCode.KeyP */] }\n        }\n    }));\n    CoreNavigationCommands.CursorUpSelect = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 2 /* CursorMove_.Direction.Up */,\n            unit: 2 /* CursorMove_.Unit.WrappedLine */,\n            select: true,\n            value: 1\n        },\n        id: 'cursorUpSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */,\n            secondary: [2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */],\n            mac: { primary: 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */ },\n            linux: { primary: 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */ }\n        }\n    }));\n    CoreNavigationCommands.CursorPageUp = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 2 /* CursorMove_.Direction.Up */,\n            unit: 2 /* CursorMove_.Unit.WrappedLine */,\n            select: false,\n            value: -1 /* Constants.PAGE_SIZE_MARKER */\n        },\n        id: 'cursorPageUp',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 11 /* KeyCode.PageUp */\n        }\n    }));\n    CoreNavigationCommands.CursorPageUpSelect = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 2 /* CursorMove_.Direction.Up */,\n            unit: 2 /* CursorMove_.Unit.WrappedLine */,\n            select: true,\n            value: -1 /* Constants.PAGE_SIZE_MARKER */\n        },\n        id: 'cursorPageUpSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 1024 /* KeyMod.Shift */ | 11 /* KeyCode.PageUp */\n        }\n    }));\n    CoreNavigationCommands.CursorDown = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 3 /* CursorMove_.Direction.Down */,\n            unit: 2 /* CursorMove_.Unit.WrappedLine */,\n            select: false,\n            value: 1\n        },\n        id: 'cursorDown',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 18 /* KeyCode.DownArrow */,\n            mac: { primary: 18 /* KeyCode.DownArrow */, secondary: [256 /* KeyMod.WinCtrl */ | 44 /* KeyCode.KeyN */] }\n        }\n    }));\n    CoreNavigationCommands.CursorDownSelect = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 3 /* CursorMove_.Direction.Down */,\n            unit: 2 /* CursorMove_.Unit.WrappedLine */,\n            select: true,\n            value: 1\n        },\n        id: 'cursorDownSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */,\n            secondary: [2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */],\n            mac: { primary: 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */ },\n            linux: { primary: 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */ }\n        }\n    }));\n    CoreNavigationCommands.CursorPageDown = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 3 /* CursorMove_.Direction.Down */,\n            unit: 2 /* CursorMove_.Unit.WrappedLine */,\n            select: false,\n            value: -1 /* Constants.PAGE_SIZE_MARKER */\n        },\n        id: 'cursorPageDown',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 12 /* KeyCode.PageDown */\n        }\n    }));\n    CoreNavigationCommands.CursorPageDownSelect = registerEditorCommand(new CursorMoveBasedCommand({\n        args: {\n            direction: 3 /* CursorMove_.Direction.Down */,\n            unit: 2 /* CursorMove_.Unit.WrappedLine */,\n            select: true,\n            value: -1 /* Constants.PAGE_SIZE_MARKER */\n        },\n        id: 'cursorPageDownSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 1024 /* KeyMod.Shift */ | 12 /* KeyCode.PageDown */\n        }\n    }));\n    CoreNavigationCommands.CreateCursor = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'createCursor',\n                precondition: undefined\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            if (!args.position) {\n                return;\n            }\n            let newState;\n            if (args.wholeLine) {\n                newState = CursorMoveCommands.line(viewModel, viewModel.getPrimaryCursorState(), false, args.position, args.viewPosition);\n            }\n            else {\n                newState = CursorMoveCommands.moveTo(viewModel, viewModel.getPrimaryCursorState(), false, args.position, args.viewPosition);\n            }\n            const states = viewModel.getCursorStates();\n            // Check if we should remove a cursor (sort of like a toggle)\n            if (states.length > 1) {\n                const newModelPosition = (newState.modelState ? newState.modelState.position : null);\n                const newViewPosition = (newState.viewState ? newState.viewState.position : null);\n                for (let i = 0, len = states.length; i < len; i++) {\n                    const state = states[i];\n                    if (newModelPosition && !state.modelState.selection.containsPosition(newModelPosition)) {\n                        continue;\n                    }\n                    if (newViewPosition && !state.viewState.selection.containsPosition(newViewPosition)) {\n                        continue;\n                    }\n                    // => Remove the cursor\n                    states.splice(i, 1);\n                    viewModel.model.pushStackElement();\n                    viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, states);\n                    return;\n                }\n            }\n            // => Add the new cursor\n            states.push(newState);\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, states);\n        }\n    });\n    CoreNavigationCommands.LastCursorMoveToSelect = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: '_lastCursorMoveToSelect',\n                precondition: undefined\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            if (!args.position) {\n                return;\n            }\n            const lastAddedCursorIndex = viewModel.getLastAddedCursorIndex();\n            const states = viewModel.getCursorStates();\n            const newStates = states.slice(0);\n            newStates[lastAddedCursorIndex] = CursorMoveCommands.moveTo(viewModel, states[lastAddedCursorIndex], true, args.position, args.viewPosition);\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, newStates);\n        }\n    });\n    class HomeCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, CursorMoveCommands.moveToBeginningOfLine(viewModel, viewModel.getCursorStates(), this._inSelectionMode));\n            viewModel.revealPrimaryCursor(args.source, true);\n        }\n    }\n    CoreNavigationCommands.CursorHome = registerEditorCommand(new HomeCommand({\n        inSelectionMode: false,\n        id: 'cursorHome',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 14 /* KeyCode.Home */,\n            mac: { primary: 14 /* KeyCode.Home */, secondary: [2048 /* KeyMod.CtrlCmd */ | 15 /* KeyCode.LeftArrow */] }\n        }\n    }));\n    CoreNavigationCommands.CursorHomeSelect = registerEditorCommand(new HomeCommand({\n        inSelectionMode: true,\n        id: 'cursorHomeSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 1024 /* KeyMod.Shift */ | 14 /* KeyCode.Home */,\n            mac: { primary: 1024 /* KeyMod.Shift */ | 14 /* KeyCode.Home */, secondary: [2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 15 /* KeyCode.LeftArrow */] }\n        }\n    }));\n    class LineStartCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, this._exec(viewModel.getCursorStates()));\n            viewModel.revealPrimaryCursor(args.source, true);\n        }\n        _exec(cursors) {\n            const result = [];\n            for (let i = 0, len = cursors.length; i < len; i++) {\n                const cursor = cursors[i];\n                const lineNumber = cursor.modelState.position.lineNumber;\n                result[i] = CursorState.fromModelState(cursor.modelState.move(this._inSelectionMode, lineNumber, 1, 0));\n            }\n            return result;\n        }\n    }\n    CoreNavigationCommands.CursorLineStart = registerEditorCommand(new LineStartCommand({\n        inSelectionMode: false,\n        id: 'cursorLineStart',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 0,\n            mac: { primary: 256 /* KeyMod.WinCtrl */ | 31 /* KeyCode.KeyA */ }\n        }\n    }));\n    CoreNavigationCommands.CursorLineStartSelect = registerEditorCommand(new LineStartCommand({\n        inSelectionMode: true,\n        id: 'cursorLineStartSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 0,\n            mac: { primary: 256 /* KeyMod.WinCtrl */ | 1024 /* KeyMod.Shift */ | 31 /* KeyCode.KeyA */ }\n        }\n    }));\n    class EndCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, CursorMoveCommands.moveToEndOfLine(viewModel, viewModel.getCursorStates(), this._inSelectionMode, args.sticky || false));\n            viewModel.revealPrimaryCursor(args.source, true);\n        }\n    }\n    CoreNavigationCommands.CursorEnd = registerEditorCommand(new EndCommand({\n        inSelectionMode: false,\n        id: 'cursorEnd',\n        precondition: undefined,\n        kbOpts: {\n            args: { sticky: false },\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 13 /* KeyCode.End */,\n            mac: { primary: 13 /* KeyCode.End */, secondary: [2048 /* KeyMod.CtrlCmd */ | 17 /* KeyCode.RightArrow */] }\n        },\n        description: {\n            description: `Go to End`,\n            args: [{\n                    name: 'args',\n                    schema: {\n                        type: 'object',\n                        properties: {\n                            'sticky': {\n                                description: nls.localize('stickydesc', \"Stick to the end even when going to longer lines\"),\n                                type: 'boolean',\n                                default: false\n                            }\n                        }\n                    }\n                }]\n        }\n    }));\n    CoreNavigationCommands.CursorEndSelect = registerEditorCommand(new EndCommand({\n        inSelectionMode: true,\n        id: 'cursorEndSelect',\n        precondition: undefined,\n        kbOpts: {\n            args: { sticky: false },\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 1024 /* KeyMod.Shift */ | 13 /* KeyCode.End */,\n            mac: { primary: 1024 /* KeyMod.Shift */ | 13 /* KeyCode.End */, secondary: [2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 17 /* KeyCode.RightArrow */] }\n        },\n        description: {\n            description: `Select to End`,\n            args: [{\n                    name: 'args',\n                    schema: {\n                        type: 'object',\n                        properties: {\n                            'sticky': {\n                                description: nls.localize('stickydesc', \"Stick to the end even when going to longer lines\"),\n                                type: 'boolean',\n                                default: false\n                            }\n                        }\n                    }\n                }]\n        }\n    }));\n    class LineEndCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, this._exec(viewModel, viewModel.getCursorStates()));\n            viewModel.revealPrimaryCursor(args.source, true);\n        }\n        _exec(viewModel, cursors) {\n            const result = [];\n            for (let i = 0, len = cursors.length; i < len; i++) {\n                const cursor = cursors[i];\n                const lineNumber = cursor.modelState.position.lineNumber;\n                const maxColumn = viewModel.model.getLineMaxColumn(lineNumber);\n                result[i] = CursorState.fromModelState(cursor.modelState.move(this._inSelectionMode, lineNumber, maxColumn, 0));\n            }\n            return result;\n        }\n    }\n    CoreNavigationCommands.CursorLineEnd = registerEditorCommand(new LineEndCommand({\n        inSelectionMode: false,\n        id: 'cursorLineEnd',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 0,\n            mac: { primary: 256 /* KeyMod.WinCtrl */ | 35 /* KeyCode.KeyE */ }\n        }\n    }));\n    CoreNavigationCommands.CursorLineEndSelect = registerEditorCommand(new LineEndCommand({\n        inSelectionMode: true,\n        id: 'cursorLineEndSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 0,\n            mac: { primary: 256 /* KeyMod.WinCtrl */ | 1024 /* KeyMod.Shift */ | 35 /* KeyCode.KeyE */ }\n        }\n    }));\n    class TopCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, CursorMoveCommands.moveToBeginningOfBuffer(viewModel, viewModel.getCursorStates(), this._inSelectionMode));\n            viewModel.revealPrimaryCursor(args.source, true);\n        }\n    }\n    CoreNavigationCommands.CursorTop = registerEditorCommand(new TopCommand({\n        inSelectionMode: false,\n        id: 'cursorTop',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 2048 /* KeyMod.CtrlCmd */ | 14 /* KeyCode.Home */,\n            mac: { primary: 2048 /* KeyMod.CtrlCmd */ | 16 /* KeyCode.UpArrow */ }\n        }\n    }));\n    CoreNavigationCommands.CursorTopSelect = registerEditorCommand(new TopCommand({\n        inSelectionMode: true,\n        id: 'cursorTopSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 14 /* KeyCode.Home */,\n            mac: { primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */ }\n        }\n    }));\n    class BottomCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, CursorMoveCommands.moveToEndOfBuffer(viewModel, viewModel.getCursorStates(), this._inSelectionMode));\n            viewModel.revealPrimaryCursor(args.source, true);\n        }\n    }\n    CoreNavigationCommands.CursorBottom = registerEditorCommand(new BottomCommand({\n        inSelectionMode: false,\n        id: 'cursorBottom',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 2048 /* KeyMod.CtrlCmd */ | 13 /* KeyCode.End */,\n            mac: { primary: 2048 /* KeyMod.CtrlCmd */ | 18 /* KeyCode.DownArrow */ }\n        }\n    }));\n    CoreNavigationCommands.CursorBottomSelect = registerEditorCommand(new BottomCommand({\n        inSelectionMode: true,\n        id: 'cursorBottomSelect',\n        precondition: undefined,\n        kbOpts: {\n            weight: CORE_WEIGHT,\n            kbExpr: EditorContextKeys.textInputFocus,\n            primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 13 /* KeyCode.End */,\n            mac: { primary: 2048 /* KeyMod.CtrlCmd */ | 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */ }\n        }\n    }));\n    class EditorScrollImpl extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'editorScroll',\n                precondition: undefined,\n                description: EditorScroll_.description\n            });\n        }\n        determineScrollMethod(args) {\n            const horizontalUnits = [6 /* EditorScroll_.Unit.Column */];\n            const verticalUnits = [\n                1 /* EditorScroll_.Unit.Line */,\n                2 /* EditorScroll_.Unit.WrappedLine */,\n                3 /* EditorScroll_.Unit.Page */,\n                4 /* EditorScroll_.Unit.HalfPage */,\n                5 /* EditorScroll_.Unit.Editor */,\n                6 /* EditorScroll_.Unit.Column */\n            ];\n            const horizontalDirections = [4 /* EditorScroll_.Direction.Left */, 2 /* EditorScroll_.Direction.Right */];\n            const verticalDirections = [1 /* EditorScroll_.Direction.Up */, 3 /* EditorScroll_.Direction.Down */];\n            if (horizontalUnits.includes(args.unit) && horizontalDirections.includes(args.direction)) {\n                return this._runHorizontalEditorScroll.bind(this);\n            }\n            if (verticalUnits.includes(args.unit) && verticalDirections.includes(args.direction)) {\n                return this._runVerticalEditorScroll.bind(this);\n            }\n            return null;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            const parsed = EditorScroll_.parse(args);\n            if (!parsed) {\n                // illegal arguments\n                return;\n            }\n            const runEditorScroll = this.determineScrollMethod(parsed);\n            if (!runEditorScroll) {\n                // Incompatible unit and direction\n                return;\n            }\n            runEditorScroll(viewModel, args.source, parsed);\n        }\n        _runVerticalEditorScroll(viewModel, source, args) {\n            const desiredScrollTop = this._computeDesiredScrollTop(viewModel, args);\n            if (args.revealCursor) {\n                // must ensure cursor is in new visible range\n                const desiredVisibleViewRange = viewModel.getCompletelyVisibleViewRangeAtScrollTop(desiredScrollTop);\n                viewModel.setCursorStates(source, 3 /* CursorChangeReason.Explicit */, [\n                    CursorMoveCommands.findPositionInViewportIfOutside(viewModel, viewModel.getPrimaryCursorState(), desiredVisibleViewRange, args.select)\n                ]);\n            }\n            viewModel.viewLayout.setScrollPosition({ scrollTop: desiredScrollTop }, 0 /* ScrollType.Smooth */);\n        }\n        _computeDesiredScrollTop(viewModel, args) {\n            if (args.unit === 1 /* EditorScroll_.Unit.Line */) {\n                // scrolling by model lines\n                const futureViewport = viewModel.viewLayout.getFutureViewport();\n                const visibleViewRange = viewModel.getCompletelyVisibleViewRangeAtScrollTop(futureViewport.top);\n                const visibleModelRange = viewModel.coordinatesConverter.convertViewRangeToModelRange(visibleViewRange);\n                let desiredTopModelLineNumber;\n                if (args.direction === 1 /* EditorScroll_.Direction.Up */) {\n                    // must go x model lines up\n                    desiredTopModelLineNumber = Math.max(1, visibleModelRange.startLineNumber - args.value);\n                }\n                else {\n                    // must go x model lines down\n                    desiredTopModelLineNumber = Math.min(viewModel.model.getLineCount(), visibleModelRange.startLineNumber + args.value);\n                }\n                const viewPosition = viewModel.coordinatesConverter.convertModelPositionToViewPosition(new Position(desiredTopModelLineNumber, 1));\n                return viewModel.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber);\n            }\n            if (args.unit === 5 /* EditorScroll_.Unit.Editor */) {\n                let desiredTopModelLineNumber = 0;\n                if (args.direction === 3 /* EditorScroll_.Direction.Down */) {\n                    desiredTopModelLineNumber = viewModel.model.getLineCount() - viewModel.cursorConfig.pageSize;\n                }\n                return viewModel.viewLayout.getVerticalOffsetForLineNumber(desiredTopModelLineNumber);\n            }\n            let noOfLines;\n            if (args.unit === 3 /* EditorScroll_.Unit.Page */) {\n                noOfLines = viewModel.cursorConfig.pageSize * args.value;\n            }\n            else if (args.unit === 4 /* EditorScroll_.Unit.HalfPage */) {\n                noOfLines = Math.round(viewModel.cursorConfig.pageSize / 2) * args.value;\n            }\n            else {\n                noOfLines = args.value;\n            }\n            const deltaLines = (args.direction === 1 /* EditorScroll_.Direction.Up */ ? -1 : 1) * noOfLines;\n            return viewModel.viewLayout.getCurrentScrollTop() + deltaLines * viewModel.cursorConfig.lineHeight;\n        }\n        _runHorizontalEditorScroll(viewModel, source, args) {\n            const desiredScrollLeft = this._computeDesiredScrollLeft(viewModel, args);\n            viewModel.viewLayout.setScrollPosition({ scrollLeft: desiredScrollLeft }, 0 /* ScrollType.Smooth */);\n        }\n        _computeDesiredScrollLeft(viewModel, args) {\n            const deltaColumns = (args.direction === 4 /* EditorScroll_.Direction.Left */ ? -1 : 1) * args.value;\n            return viewModel.viewLayout.getCurrentScrollLeft() + deltaColumns * viewModel.cursorConfig.typicalHalfwidthCharacterWidth;\n        }\n    }\n    CoreNavigationCommands.EditorScrollImpl = EditorScrollImpl;\n    CoreNavigationCommands.EditorScroll = registerEditorCommand(new EditorScrollImpl());\n    CoreNavigationCommands.ScrollLineUp = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'scrollLineUp',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 2048 /* KeyMod.CtrlCmd */ | 16 /* KeyCode.UpArrow */,\n                    mac: { primary: 256 /* KeyMod.WinCtrl */ | 11 /* KeyCode.PageUp */ }\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            CoreNavigationCommands.EditorScroll.runCoreEditorCommand(viewModel, {\n                to: EditorScroll_.RawDirection.Up,\n                by: EditorScroll_.RawUnit.WrappedLine,\n                value: 1,\n                revealCursor: false,\n                select: false,\n                source: args.source\n            });\n        }\n    });\n    CoreNavigationCommands.ScrollPageUp = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'scrollPageUp',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 2048 /* KeyMod.CtrlCmd */ | 11 /* KeyCode.PageUp */,\n                    win: { primary: 512 /* KeyMod.Alt */ | 11 /* KeyCode.PageUp */ },\n                    linux: { primary: 512 /* KeyMod.Alt */ | 11 /* KeyCode.PageUp */ }\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            CoreNavigationCommands.EditorScroll.runCoreEditorCommand(viewModel, {\n                to: EditorScroll_.RawDirection.Up,\n                by: EditorScroll_.RawUnit.Page,\n                value: 1,\n                revealCursor: false,\n                select: false,\n                source: args.source\n            });\n        }\n    });\n    CoreNavigationCommands.ScrollEditorTop = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'scrollEditorTop',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            CoreNavigationCommands.EditorScroll.runCoreEditorCommand(viewModel, {\n                to: EditorScroll_.RawDirection.Up,\n                by: EditorScroll_.RawUnit.Editor,\n                value: 1,\n                revealCursor: false,\n                select: false,\n                source: args.source\n            });\n        }\n    });\n    CoreNavigationCommands.ScrollLineDown = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'scrollLineDown',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 2048 /* KeyMod.CtrlCmd */ | 18 /* KeyCode.DownArrow */,\n                    mac: { primary: 256 /* KeyMod.WinCtrl */ | 12 /* KeyCode.PageDown */ }\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            CoreNavigationCommands.EditorScroll.runCoreEditorCommand(viewModel, {\n                to: EditorScroll_.RawDirection.Down,\n                by: EditorScroll_.RawUnit.WrappedLine,\n                value: 1,\n                revealCursor: false,\n                select: false,\n                source: args.source\n            });\n        }\n    });\n    CoreNavigationCommands.ScrollPageDown = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'scrollPageDown',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 2048 /* KeyMod.CtrlCmd */ | 12 /* KeyCode.PageDown */,\n                    win: { primary: 512 /* KeyMod.Alt */ | 12 /* KeyCode.PageDown */ },\n                    linux: { primary: 512 /* KeyMod.Alt */ | 12 /* KeyCode.PageDown */ }\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            CoreNavigationCommands.EditorScroll.runCoreEditorCommand(viewModel, {\n                to: EditorScroll_.RawDirection.Down,\n                by: EditorScroll_.RawUnit.Page,\n                value: 1,\n                revealCursor: false,\n                select: false,\n                source: args.source\n            });\n        }\n    });\n    CoreNavigationCommands.ScrollEditorBottom = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'scrollEditorBottom',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            CoreNavigationCommands.EditorScroll.runCoreEditorCommand(viewModel, {\n                to: EditorScroll_.RawDirection.Down,\n                by: EditorScroll_.RawUnit.Editor,\n                value: 1,\n                revealCursor: false,\n                select: false,\n                source: args.source\n            });\n        }\n    });\n    CoreNavigationCommands.ScrollLeft = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'scrollLeft',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            CoreNavigationCommands.EditorScroll.runCoreEditorCommand(viewModel, {\n                to: EditorScroll_.RawDirection.Left,\n                by: EditorScroll_.RawUnit.Column,\n                value: 2,\n                revealCursor: false,\n                select: false,\n                source: args.source\n            });\n        }\n    });\n    CoreNavigationCommands.ScrollRight = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'scrollRight',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            CoreNavigationCommands.EditorScroll.runCoreEditorCommand(viewModel, {\n                to: EditorScroll_.RawDirection.Right,\n                by: EditorScroll_.RawUnit.Column,\n                value: 2,\n                revealCursor: false,\n                select: false,\n                source: args.source\n            });\n        }\n    });\n    class WordCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            if (!args.position) {\n                return;\n            }\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, [\n                CursorMoveCommands.word(viewModel, viewModel.getPrimaryCursorState(), this._inSelectionMode, args.position)\n            ]);\n            if (args.revealType !== 2 /* NavigationCommandRevealType.None */) {\n                viewModel.revealPrimaryCursor(args.source, true, true);\n            }\n        }\n    }\n    CoreNavigationCommands.WordSelect = registerEditorCommand(new WordCommand({\n        inSelectionMode: false,\n        id: '_wordSelect',\n        precondition: undefined\n    }));\n    CoreNavigationCommands.WordSelectDrag = registerEditorCommand(new WordCommand({\n        inSelectionMode: true,\n        id: '_wordSelectDrag',\n        precondition: undefined\n    }));\n    CoreNavigationCommands.LastCursorWordSelect = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'lastCursorWordSelect',\n                precondition: undefined\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            if (!args.position) {\n                return;\n            }\n            const lastAddedCursorIndex = viewModel.getLastAddedCursorIndex();\n            const states = viewModel.getCursorStates();\n            const newStates = states.slice(0);\n            const lastAddedState = states[lastAddedCursorIndex];\n            newStates[lastAddedCursorIndex] = CursorMoveCommands.word(viewModel, lastAddedState, lastAddedState.modelState.hasSelection(), args.position);\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, newStates);\n        }\n    });\n    class LineCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            if (!args.position) {\n                return;\n            }\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, [\n                CursorMoveCommands.line(viewModel, viewModel.getPrimaryCursorState(), this._inSelectionMode, args.position, args.viewPosition)\n            ]);\n            if (args.revealType !== 2 /* NavigationCommandRevealType.None */) {\n                viewModel.revealPrimaryCursor(args.source, false, true);\n            }\n        }\n    }\n    CoreNavigationCommands.LineSelect = registerEditorCommand(new LineCommand({\n        inSelectionMode: false,\n        id: '_lineSelect',\n        precondition: undefined\n    }));\n    CoreNavigationCommands.LineSelectDrag = registerEditorCommand(new LineCommand({\n        inSelectionMode: true,\n        id: '_lineSelectDrag',\n        precondition: undefined\n    }));\n    class LastCursorLineCommand extends CoreEditorCommand {\n        constructor(opts) {\n            super(opts);\n            this._inSelectionMode = opts.inSelectionMode;\n        }\n        runCoreEditorCommand(viewModel, args) {\n            if (!args.position) {\n                return;\n            }\n            const lastAddedCursorIndex = viewModel.getLastAddedCursorIndex();\n            const states = viewModel.getCursorStates();\n            const newStates = states.slice(0);\n            newStates[lastAddedCursorIndex] = CursorMoveCommands.line(viewModel, states[lastAddedCursorIndex], this._inSelectionMode, args.position, args.viewPosition);\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, newStates);\n        }\n    }\n    CoreNavigationCommands.LastCursorLineSelect = registerEditorCommand(new LastCursorLineCommand({\n        inSelectionMode: false,\n        id: 'lastCursorLineSelect',\n        precondition: undefined\n    }));\n    CoreNavigationCommands.LastCursorLineSelectDrag = registerEditorCommand(new LastCursorLineCommand({\n        inSelectionMode: true,\n        id: 'lastCursorLineSelectDrag',\n        precondition: undefined\n    }));\n    CoreNavigationCommands.CancelSelection = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'cancelSelection',\n                precondition: EditorContextKeys.hasNonEmptySelection,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 9 /* KeyCode.Escape */,\n                    secondary: [1024 /* KeyMod.Shift */ | 9 /* KeyCode.Escape */]\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, [\n                CursorMoveCommands.cancelSelection(viewModel, viewModel.getPrimaryCursorState())\n            ]);\n            viewModel.revealPrimaryCursor(args.source, true);\n        }\n    });\n    CoreNavigationCommands.RemoveSecondaryCursors = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'removeSecondaryCursors',\n                precondition: EditorContextKeys.hasMultipleSelections,\n                kbOpts: {\n                    weight: CORE_WEIGHT + 1,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 9 /* KeyCode.Escape */,\n                    secondary: [1024 /* KeyMod.Shift */ | 9 /* KeyCode.Escape */]\n                }\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, [\n                viewModel.getPrimaryCursorState()\n            ]);\n            viewModel.revealPrimaryCursor(args.source, true);\n            status(nls.localize('removedCursor', \"Removed secondary cursors\"));\n        }\n    });\n    CoreNavigationCommands.RevealLine = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'revealLine',\n                precondition: undefined,\n                description: RevealLine_.description\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            const revealLineArg = args;\n            const lineNumberArg = revealLineArg.lineNumber || 0;\n            let lineNumber = typeof lineNumberArg === 'number' ? (lineNumberArg + 1) : (parseInt(lineNumberArg) + 1);\n            if (lineNumber < 1) {\n                lineNumber = 1;\n            }\n            const lineCount = viewModel.model.getLineCount();\n            if (lineNumber > lineCount) {\n                lineNumber = lineCount;\n            }\n            const range = new Range(lineNumber, 1, lineNumber, viewModel.model.getLineMaxColumn(lineNumber));\n            let revealAt = 0 /* VerticalRevealType.Simple */;\n            if (revealLineArg.at) {\n                switch (revealLineArg.at) {\n                    case RevealLine_.RawAtArgument.Top:\n                        revealAt = 3 /* VerticalRevealType.Top */;\n                        break;\n                    case RevealLine_.RawAtArgument.Center:\n                        revealAt = 1 /* VerticalRevealType.Center */;\n                        break;\n                    case RevealLine_.RawAtArgument.Bottom:\n                        revealAt = 4 /* VerticalRevealType.Bottom */;\n                        break;\n                    default:\n                        break;\n                }\n            }\n            const viewRange = viewModel.coordinatesConverter.convertModelRangeToViewRange(range);\n            viewModel.revealRange(args.source, false, viewRange, revealAt, 0 /* ScrollType.Smooth */);\n        }\n    });\n    CoreNavigationCommands.SelectAll = new class extends EditorOrNativeTextInputCommand {\n        constructor() {\n            super(SelectAllCommand);\n        }\n        runDOMCommand() {\n            if (isFirefox) {\n                document.activeElement.focus();\n                document.activeElement.select();\n            }\n            document.execCommand('selectAll');\n        }\n        runEditorCommand(accessor, editor, args) {\n            const viewModel = editor._getViewModel();\n            if (!viewModel) {\n                // the editor has no view => has no cursors\n                return;\n            }\n            this.runCoreEditorCommand(viewModel, args);\n        }\n        runCoreEditorCommand(viewModel, args) {\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates('keyboard', 3 /* CursorChangeReason.Explicit */, [\n                CursorMoveCommands.selectAll(viewModel, viewModel.getPrimaryCursorState())\n            ]);\n        }\n    }();\n    CoreNavigationCommands.SetSelection = registerEditorCommand(new class extends CoreEditorCommand {\n        constructor() {\n            super({\n                id: 'setSelection',\n                precondition: undefined\n            });\n        }\n        runCoreEditorCommand(viewModel, args) {\n            if (!args.selection) {\n                return;\n            }\n            viewModel.model.pushStackElement();\n            viewModel.setCursorStates(args.source, 3 /* CursorChangeReason.Explicit */, [\n                CursorState.fromModelSelection(args.selection)\n            ]);\n        }\n    });\n})(CoreNavigationCommands || (CoreNavigationCommands = {}));\nconst columnSelectionCondition = ContextKeyExpr.and(EditorContextKeys.textInputFocus, EditorContextKeys.columnSelection);\nfunction registerColumnSelection(id, keybinding) {\n    KeybindingsRegistry.registerKeybindingRule({\n        id: id,\n        primary: keybinding,\n        when: columnSelectionCondition,\n        weight: CORE_WEIGHT + 1\n    });\n}\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectLeft.id, 1024 /* KeyMod.Shift */ | 15 /* KeyCode.LeftArrow */);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectRight.id, 1024 /* KeyMod.Shift */ | 17 /* KeyCode.RightArrow */);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectUp.id, 1024 /* KeyMod.Shift */ | 16 /* KeyCode.UpArrow */);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectPageUp.id, 1024 /* KeyMod.Shift */ | 11 /* KeyCode.PageUp */);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectDown.id, 1024 /* KeyMod.Shift */ | 18 /* KeyCode.DownArrow */);\nregisterColumnSelection(CoreNavigationCommands.CursorColumnSelectPageDown.id, 1024 /* KeyMod.Shift */ | 12 /* KeyCode.PageDown */);\nfunction registerCommand(command) {\n    command.register();\n    return command;\n}\nexport var CoreEditingCommands;\n(function (CoreEditingCommands) {\n    class CoreEditingCommand extends EditorCommand {\n        runEditorCommand(accessor, editor, args) {\n            const viewModel = editor._getViewModel();\n            if (!viewModel) {\n                // the editor has no view => has no cursors\n                return;\n            }\n            this.runCoreEditingCommand(editor, viewModel, args || {});\n        }\n    }\n    CoreEditingCommands.CoreEditingCommand = CoreEditingCommand;\n    CoreEditingCommands.LineBreakInsert = registerEditorCommand(new class extends CoreEditingCommand {\n        constructor() {\n            super({\n                id: 'lineBreakInsert',\n                precondition: EditorContextKeys.writable,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 0,\n                    mac: { primary: 256 /* KeyMod.WinCtrl */ | 45 /* KeyCode.KeyO */ }\n                }\n            });\n        }\n        runCoreEditingCommand(editor, viewModel, args) {\n            editor.pushUndoStop();\n            editor.executeCommands(this.id, TypeOperations.lineBreakInsert(viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection)));\n        }\n    });\n    CoreEditingCommands.Outdent = registerEditorCommand(new class extends CoreEditingCommand {\n        constructor() {\n            super({\n                id: 'outdent',\n                precondition: EditorContextKeys.writable,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: ContextKeyExpr.and(EditorContextKeys.editorTextFocus, EditorContextKeys.tabDoesNotMoveFocus),\n                    primary: 1024 /* KeyMod.Shift */ | 2 /* KeyCode.Tab */\n                }\n            });\n        }\n        runCoreEditingCommand(editor, viewModel, args) {\n            editor.pushUndoStop();\n            editor.executeCommands(this.id, TypeOperations.outdent(viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection)));\n            editor.pushUndoStop();\n        }\n    });\n    CoreEditingCommands.Tab = registerEditorCommand(new class extends CoreEditingCommand {\n        constructor() {\n            super({\n                id: 'tab',\n                precondition: EditorContextKeys.writable,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: ContextKeyExpr.and(EditorContextKeys.editorTextFocus, EditorContextKeys.tabDoesNotMoveFocus),\n                    primary: 2 /* KeyCode.Tab */\n                }\n            });\n        }\n        runCoreEditingCommand(editor, viewModel, args) {\n            editor.pushUndoStop();\n            editor.executeCommands(this.id, TypeOperations.tab(viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection)));\n            editor.pushUndoStop();\n        }\n    });\n    CoreEditingCommands.DeleteLeft = registerEditorCommand(new class extends CoreEditingCommand {\n        constructor() {\n            super({\n                id: 'deleteLeft',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 1 /* KeyCode.Backspace */,\n                    secondary: [1024 /* KeyMod.Shift */ | 1 /* KeyCode.Backspace */],\n                    mac: { primary: 1 /* KeyCode.Backspace */, secondary: [1024 /* KeyMod.Shift */ | 1 /* KeyCode.Backspace */, 256 /* KeyMod.WinCtrl */ | 38 /* KeyCode.KeyH */, 256 /* KeyMod.WinCtrl */ | 1 /* KeyCode.Backspace */] }\n                }\n            });\n        }\n        runCoreEditingCommand(editor, viewModel, args) {\n            const [shouldPushStackElementBefore, commands] = DeleteOperations.deleteLeft(viewModel.getPrevEditOperationType(), viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection), viewModel.getCursorAutoClosedCharacters());\n            if (shouldPushStackElementBefore) {\n                editor.pushUndoStop();\n            }\n            editor.executeCommands(this.id, commands);\n            viewModel.setPrevEditOperationType(2 /* EditOperationType.DeletingLeft */);\n        }\n    });\n    CoreEditingCommands.DeleteRight = registerEditorCommand(new class extends CoreEditingCommand {\n        constructor() {\n            super({\n                id: 'deleteRight',\n                precondition: undefined,\n                kbOpts: {\n                    weight: CORE_WEIGHT,\n                    kbExpr: EditorContextKeys.textInputFocus,\n                    primary: 20 /* KeyCode.Delete */,\n                    mac: { primary: 20 /* KeyCode.Delete */, secondary: [256 /* KeyMod.WinCtrl */ | 34 /* KeyCode.KeyD */, 256 /* KeyMod.WinCtrl */ | 20 /* KeyCode.Delete */] }\n                }\n            });\n        }\n        runCoreEditingCommand(editor, viewModel, args) {\n            const [shouldPushStackElementBefore, commands] = DeleteOperations.deleteRight(viewModel.getPrevEditOperationType(), viewModel.cursorConfig, viewModel.model, viewModel.getCursorStates().map(s => s.modelState.selection));\n            if (shouldPushStackElementBefore) {\n                editor.pushUndoStop();\n            }\n            editor.executeCommands(this.id, commands);\n            viewModel.setPrevEditOperationType(3 /* EditOperationType.DeletingRight */);\n        }\n    });\n    CoreEditingCommands.Undo = new class extends EditorOrNativeTextInputCommand {\n        constructor() {\n            super(UndoCommand);\n        }\n        runDOMCommand() {\n            document.execCommand('undo');\n        }\n        runEditorCommand(accessor, editor, args) {\n            if (!editor.hasModel() || editor.getOption(86 /* EditorOption.readOnly */) === true) {\n                return;\n            }\n            return editor.getModel().undo();\n        }\n    }();\n    CoreEditingCommands.Redo = new class extends EditorOrNativeTextInputCommand {\n        constructor() {\n            super(RedoCommand);\n        }\n        runDOMCommand() {\n            document.execCommand('redo');\n        }\n        runEditorCommand(accessor, editor, args) {\n            if (!editor.hasModel() || editor.getOption(86 /* EditorOption.readOnly */) === true) {\n                return;\n            }\n            return editor.getModel().redo();\n        }\n    }();\n})(CoreEditingCommands || (CoreEditingCommands = {}));\n/**\n * A command that will invoke a command on the focused editor.\n */\nclass EditorHandlerCommand extends Command {\n    constructor(id, handlerId, description) {\n        super({\n            id: id,\n            precondition: undefined,\n            description: description\n        });\n        this._handlerId = handlerId;\n    }\n    runCommand(accessor, args) {\n        const editor = accessor.get(ICodeEditorService).getFocusedCodeEditor();\n        if (!editor) {\n            return;\n        }\n        editor.trigger('keyboard', this._handlerId, args);\n    }\n}\nfunction registerOverwritableCommand(handlerId, description) {\n    registerCommand(new EditorHandlerCommand('default:' + handlerId, handlerId));\n    registerCommand(new EditorHandlerCommand(handlerId, handlerId, description));\n}\nregisterOverwritableCommand(\"type\" /* Handler.Type */, {\n    description: `Type`,\n    args: [{\n            name: 'args',\n            schema: {\n                'type': 'object',\n                'required': ['text'],\n                'properties': {\n                    'text': {\n                        'type': 'string'\n                    }\n                },\n            }\n        }]\n});\nregisterOverwritableCommand(\"replacePreviousChar\" /* Handler.ReplacePreviousChar */);\nregisterOverwritableCommand(\"compositionType\" /* Handler.CompositionType */);\nregisterOverwritableCommand(\"compositionStart\" /* Handler.CompositionStart */);\nregisterOverwritableCommand(\"compositionEnd\" /* Handler.CompositionEnd */);\nregisterOverwritableCommand(\"paste\" /* Handler.Paste */);\nregisterOverwritableCommand(\"cut\" /* Handler.Cut */);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}