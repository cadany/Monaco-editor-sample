{"ast":null,"code":"import { language as sqlLanguage } from 'monaco-editor/esm/vs/basic-languages/sql/sql';\nimport { language as mysqlLanguage } from 'monaco-editor/esm/vs/basic-languages/mysql/mysql';\nimport { language as redisLanguage } from 'monaco-editor/esm/vs/basic-languages/redis/redis';\nimport * as monaco from \"monaco-editor\";\nfunction _registerAutoCompletionLanguage(languageSelector, language, customAutoCompletion) {\n  const register = monaco.languages.registerCompletionItemProvider(languageSelector, {\n    provideCompletionItems: (model, position) => {\n      let suggestions = [];\n      const {\n        lineNumber,\n        column\n      } = position;\n      const textBeforePointer = model.getValueInRange({\n        startLineNumber: lineNumber,\n        startColumn: 0,\n        endLineNumber: lineNumber,\n        endColumn: column\n      });\n      const contents = textBeforePointer.trim().split(/\\s+/);\n      const lastContents = contents[(contents === null || contents === void 0 ? void 0 : contents.length) - 1]; // 获取最后一段非空字符串\n      if (lastContents) {\n        const configKey = ['builtinFunctions', 'keywords', 'operators'];\n        configKey.forEach(key => {\n          let kind = 0;\n          switch (key) {\n            case 'builtinFunctions':\n              kind = monaco.languages.CompletionItemKind.Function;\n              break;\n            case 'keywords':\n              kind = monaco.languages.CompletionItemKind.Keyword;\n              break;\n            default:\n              kind = monaco.languages.CompletionItemKind.Operator;\n          }\n          language[key].forEach(item => {\n            suggestions.push({\n              label: item,\n              // 显示的提示内容;默认情况下，这也是选择完成时插入的文本。\n              insertText: item,\n              // 选择此完成时应插入到文档中的字符串或片段\n              kind: kind // 编辑器根据图标的种类选择图标\n            });\n          });\n        });\n        //自定义提示\n        // customAutoCompletion.forEach((item)=>{\n        //     suggestions.push({\n        //         label: item, // 显示的提示内容;默认情况下，这也是选择完成时插入的文本。\n        //         insertText: item, // 选择此完成时应插入到文档中的字符串或片段\n        //         kind: item, // 编辑器根据图标的种类选择图标\n        //     });\n        // });\n        suggestions.push({\n          label: \"item\",\n          // 显示的提示内容;默认情况下，这也是选择完成时插入的文本。\n          insertText: \"item\",\n          // 选择此完成时应插入到文档中的字符串或片段\n          detail: \"table.collumn\",\n          kind: monaco.languages.CompletionItemKind.Operator // 编辑器根据图标的种类选择图标\n        });\n      }\n\n      return {\n        suggestions\n      };\n    }\n  });\n  return register;\n}\nfunction registerAutoCompletionLanguage(languageSelector, customAutoCompletion) {\n  switch (languageSelector) {\n    case \"mysql\":\n      return _registerAutoCompletionLanguage(languageSelector, mysqlLanguage, customAutoCompletion);\n    case \"redis\":\n      return _registerAutoCompletionLanguage(languageSelector, redisLanguage, customAutoCompletion);\n    default:\n      return _registerAutoCompletionLanguage(languageSelector, sqlLanguage, customAutoCompletion);\n  }\n}\nexport { registerAutoCompletionLanguage };","map":{"version":3,"names":["language","sqlLanguage","mysqlLanguage","redisLanguage","monaco","_registerAutoCompletionLanguage","languageSelector","customAutoCompletion","register","languages","registerCompletionItemProvider","provideCompletionItems","model","position","suggestions","lineNumber","column","textBeforePointer","getValueInRange","startLineNumber","startColumn","endLineNumber","endColumn","contents","trim","split","lastContents","length","configKey","forEach","key","kind","CompletionItemKind","Function","Keyword","Operator","item","push","label","insertText","detail","registerAutoCompletionLanguage"],"sources":["/Users/cadany/WebstormProjects/monaco/src/proxy.js"],"sourcesContent":["import { language as sqlLanguage } from 'monaco-editor/esm/vs/basic-languages/sql/sql';\nimport { language as mysqlLanguage } from 'monaco-editor/esm/vs/basic-languages/mysql/mysql';\nimport { language as redisLanguage } from 'monaco-editor/esm/vs/basic-languages/redis/redis';\n\nimport * as monaco from \"monaco-editor\";\n\nfunction _registerAutoCompletionLanguage(languageSelector, language, customAutoCompletion) {\n    const register = monaco.languages.registerCompletionItemProvider(languageSelector, {\n        provideCompletionItems: (\n            model,\n            position,\n        ) => {\n            let suggestions = [];\n            const { lineNumber, column } = position;\n            const textBeforePointer = model.getValueInRange({\n                startLineNumber: lineNumber,\n                startColumn: 0,\n                endLineNumber: lineNumber,\n                endColumn: column,\n            });\n            const contents = textBeforePointer.trim().split(/\\s+/);\n            const lastContents = contents[contents?.length - 1]; // 获取最后一段非空字符串\n            if (lastContents) {\n                const configKey = ['builtinFunctions', 'keywords', 'operators'];\n                configKey.forEach(key => {\n                    let kind = 0;\n                    switch (key) {\n                        case 'builtinFunctions': kind = monaco.languages.CompletionItemKind.Function;break;\n                        case 'keywords': kind = monaco.languages.CompletionItemKind.Keyword;break;\n                        default: kind = monaco.languages.CompletionItemKind.Operator;\n                    }\n                    language[key].forEach((item) => {\n                        suggestions.push(\n                            {\n                                label: item, // 显示的提示内容;默认情况下，这也是选择完成时插入的文本。\n                                insertText: item, // 选择此完成时应插入到文档中的字符串或片段\n                                kind: kind, // 编辑器根据图标的种类选择图标\n                            }\n                        );\n                    });\n                });\n                //自定义提示\n                // customAutoCompletion.forEach((item)=>{\n                //     suggestions.push({\n                //         label: item, // 显示的提示内容;默认情况下，这也是选择完成时插入的文本。\n                //         insertText: item, // 选择此完成时应插入到文档中的字符串或片段\n                //         kind: item, // 编辑器根据图标的种类选择图标\n                //     });\n                // });\n                suggestions.push({\n                    label: \"item\", // 显示的提示内容;默认情况下，这也是选择完成时插入的文本。\n                    insertText: \"item\", // 选择此完成时应插入到文档中的字符串或片段\n                    detail:\"table.collumn\",\n                    kind: monaco.languages.CompletionItemKind.Operator, // 编辑器根据图标的种类选择图标\n                });\n\n            }\n            return {\n                suggestions,\n            }\n        }\n    });\n    return register;\n}\n\nfunction registerAutoCompletionLanguage(languageSelector,customAutoCompletion){\n    switch (languageSelector) {\n        case \"mysql\": return _registerAutoCompletionLanguage(languageSelector, mysqlLanguage, customAutoCompletion);\n        case \"redis\": return _registerAutoCompletionLanguage(languageSelector, redisLanguage, customAutoCompletion);\n        default: return _registerAutoCompletionLanguage(languageSelector, sqlLanguage, customAutoCompletion);\n    }\n}\n\nexport {registerAutoCompletionLanguage}"],"mappings":"AAAA,SAASA,QAAQ,IAAIC,WAAW,QAAQ,8CAA8C;AACtF,SAASD,QAAQ,IAAIE,aAAa,QAAQ,kDAAkD;AAC5F,SAASF,QAAQ,IAAIG,aAAa,QAAQ,kDAAkD;AAE5F,OAAO,KAAKC,MAAM,MAAM,eAAe;AAEvC,SAASC,+BAA+BA,CAACC,gBAAgB,EAAEN,QAAQ,EAAEO,oBAAoB,EAAE;EACvF,MAAMC,QAAQ,GAAGJ,MAAM,CAACK,SAAS,CAACC,8BAA8B,CAACJ,gBAAgB,EAAE;IAC/EK,sBAAsB,EAAEA,CACpBC,KAAK,EACLC,QAAQ,KACP;MACD,IAAIC,WAAW,GAAG,EAAE;MACpB,MAAM;QAAEC,UAAU;QAAEC;MAAO,CAAC,GAAGH,QAAQ;MACvC,MAAMI,iBAAiB,GAAGL,KAAK,CAACM,eAAe,CAAC;QAC5CC,eAAe,EAAEJ,UAAU;QAC3BK,WAAW,EAAE,CAAC;QACdC,aAAa,EAAEN,UAAU;QACzBO,SAAS,EAAEN;MACf,CAAC,CAAC;MACF,MAAMO,QAAQ,GAAGN,iBAAiB,CAACO,IAAI,EAAE,CAACC,KAAK,CAAC,KAAK,CAAC;MACtD,MAAMC,YAAY,GAAGH,QAAQ,CAAC,CAAAA,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEI,MAAM,IAAG,CAAC,CAAC,CAAC,CAAC;MACrD,IAAID,YAAY,EAAE;QACd,MAAME,SAAS,GAAG,CAAC,kBAAkB,EAAE,UAAU,EAAE,WAAW,CAAC;QAC/DA,SAAS,CAACC,OAAO,CAACC,GAAG,IAAI;UACrB,IAAIC,IAAI,GAAG,CAAC;UACZ,QAAQD,GAAG;YACP,KAAK,kBAAkB;cAAEC,IAAI,GAAG3B,MAAM,CAACK,SAAS,CAACuB,kBAAkB,CAACC,QAAQ;cAAC;YAC7E,KAAK,UAAU;cAAEF,IAAI,GAAG3B,MAAM,CAACK,SAAS,CAACuB,kBAAkB,CAACE,OAAO;cAAC;YACpE;cAASH,IAAI,GAAG3B,MAAM,CAACK,SAAS,CAACuB,kBAAkB,CAACG,QAAQ;UAAC;UAEjEnC,QAAQ,CAAC8B,GAAG,CAAC,CAACD,OAAO,CAAEO,IAAI,IAAK;YAC5BtB,WAAW,CAACuB,IAAI,CACZ;cACIC,KAAK,EAAEF,IAAI;cAAE;cACbG,UAAU,EAAEH,IAAI;cAAE;cAClBL,IAAI,EAAEA,IAAI,CAAE;YAChB,CAAC,CACJ;UACL,CAAC,CAAC;QACN,CAAC,CAAC;QACF;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACAjB,WAAW,CAACuB,IAAI,CAAC;UACbC,KAAK,EAAE,MAAM;UAAE;UACfC,UAAU,EAAE,MAAM;UAAE;UACpBC,MAAM,EAAC,eAAe;UACtBT,IAAI,EAAE3B,MAAM,CAACK,SAAS,CAACuB,kBAAkB,CAACG,QAAQ,CAAE;QACxD,CAAC,CAAC;MAEN;;MACA,OAAO;QACHrB;MACJ,CAAC;IACL;EACJ,CAAC,CAAC;EACF,OAAON,QAAQ;AACnB;AAEA,SAASiC,8BAA8BA,CAACnC,gBAAgB,EAACC,oBAAoB,EAAC;EAC1E,QAAQD,gBAAgB;IACpB,KAAK,OAAO;MAAE,OAAOD,+BAA+B,CAACC,gBAAgB,EAAEJ,aAAa,EAAEK,oBAAoB,CAAC;IAC3G,KAAK,OAAO;MAAE,OAAOF,+BAA+B,CAACC,gBAAgB,EAAEH,aAAa,EAAEI,oBAAoB,CAAC;IAC3G;MAAS,OAAOF,+BAA+B,CAACC,gBAAgB,EAAEL,WAAW,EAAEM,oBAAoB,CAAC;EAAC;AAE7G;AAEA,SAAQkC,8BAA8B"},"metadata":{},"sourceType":"module","externalDependencies":[]}