{"ast":null,"code":"import { language as sqlLanguage } from 'monaco-editor/esm/vs/basic-languages/sql/sql';\nimport { language as redisLanguage } from 'monaco-editor/esm/vs/basic-languages/redis/redis';\nimport * as monaco from \"monaco-editor\";\nfunction _registerAutoCompletionLanguage(languageSelector, language) {\n  const register = monaco.languages.registerCompletionItemProvider('sql', {\n    provideCompletionItems: (model, position) => {\n      let suggestions = [];\n      const {\n        lineNumber,\n        column\n      } = position;\n      const textBeforePointer = model.getValueInRange({\n        startLineNumber: lineNumber,\n        startColumn: 0,\n        endLineNumber: lineNumber,\n        endColumn: column\n      });\n      const contents = textBeforePointer.trim().split(/\\s+/);\n      const lastContents = contents[(contents === null || contents === void 0 ? void 0 : contents.length) - 1]; // 获取最后一段非空字符串\n      if (lastContents) {\n        const sqlConfigKey = []; //['builtinFunctions', 'keywords', 'operators']\n        sqlConfigKey.forEach(key => {\n          language[key].forEach(sql => {\n            suggestions.push({\n              label: sql,\n              // 显示的提示内容;默认情况下，这也是选择完成时插入的文本。\n              insertText: sql,\n              // 选择此完成时应插入到文档中的字符串或片段\n              kind: monaco.languages.CompletionItemKind['Function'] // 此完成项的种类。编辑器根据图标的种类选择图标。\n            });\n          });\n        });\n      }\n\n      return {\n        suggestions\n      };\n    }\n  });\n  return register;\n}\nfunction registerAutoCompletionLanguage(lan) {\n  switch (lan) {\n    case \"sql\":\n      return _registerAutoCompletionLanguage(sqlLanguage);\n      break;\n    case \"redis\":\n      return _registerAutoCompletionLanguage(redisLanguage);\n      break;\n    default:\n      return null;\n  }\n  ;\n}\nexport { registerAutoCompletionLanguage };","map":{"version":3,"names":["language","sqlLanguage","redisLanguage","monaco","_registerAutoCompletionLanguage","languageSelector","register","languages","registerCompletionItemProvider","provideCompletionItems","model","position","suggestions","lineNumber","column","textBeforePointer","getValueInRange","startLineNumber","startColumn","endLineNumber","endColumn","contents","trim","split","lastContents","length","sqlConfigKey","forEach","key","sql","push","label","insertText","kind","CompletionItemKind","registerAutoCompletionLanguage","lan"],"sources":["/Users/cadany/WebstormProjects/monaco/src/proxy.js"],"sourcesContent":["import { language as sqlLanguage } from 'monaco-editor/esm/vs/basic-languages/sql/sql';\nimport { language as redisLanguage } from 'monaco-editor/esm/vs/basic-languages/redis/redis';\n\nimport * as monaco from \"monaco-editor\";\n\nfunction _registerAutoCompletionLanguage(languageSelector, language) {\n    const register = monaco.languages.registerCompletionItemProvider('sql', {\n        provideCompletionItems: (\n            model,\n            position,\n        ) => {\n            let suggestions = [];\n            const { lineNumber, column } = position\n            const textBeforePointer = model.getValueInRange({\n                startLineNumber: lineNumber,\n                startColumn: 0,\n                endLineNumber: lineNumber,\n                endColumn: column,\n            })\n            const contents = textBeforePointer.trim().split(/\\s+/)\n            const lastContents = contents[contents?.length - 1] // 获取最后一段非空字符串\n            if (lastContents) {\n                const sqlConfigKey = [];//['builtinFunctions', 'keywords', 'operators']\n                sqlConfigKey.forEach(key => {\n                    language[key].forEach((sql) => {\n                        suggestions.push(\n                            {\n                                label: sql, // 显示的提示内容;默认情况下，这也是选择完成时插入的文本。\n                                insertText: sql, // 选择此完成时应插入到文档中的字符串或片段\n                                kind: monaco.languages.CompletionItemKind['Function'], // 此完成项的种类。编辑器根据图标的种类选择图标。\n                            }\n                        )\n                    })\n\n                })\n            }\n            return {\n                suggestions,\n            }\n        }\n    });\n    return register;\n}\n\nfunction registerAutoCompletionLanguage(lan){\n    switch (lan) {\n        case \"sql\": return _registerAutoCompletionLanguage(sqlLanguage); break;\n        case \"redis\": return _registerAutoCompletionLanguage(redisLanguage); break;\n        default: return null;\n    };\n}\n\nexport {registerAutoCompletionLanguage}"],"mappings":"AAAA,SAASA,QAAQ,IAAIC,WAAW,QAAQ,8CAA8C;AACtF,SAASD,QAAQ,IAAIE,aAAa,QAAQ,kDAAkD;AAE5F,OAAO,KAAKC,MAAM,MAAM,eAAe;AAEvC,SAASC,+BAA+BA,CAACC,gBAAgB,EAAEL,QAAQ,EAAE;EACjE,MAAMM,QAAQ,GAAGH,MAAM,CAACI,SAAS,CAACC,8BAA8B,CAAC,KAAK,EAAE;IACpEC,sBAAsB,EAAEA,CACpBC,KAAK,EACLC,QAAQ,KACP;MACD,IAAIC,WAAW,GAAG,EAAE;MACpB,MAAM;QAAEC,UAAU;QAAEC;MAAO,CAAC,GAAGH,QAAQ;MACvC,MAAMI,iBAAiB,GAAGL,KAAK,CAACM,eAAe,CAAC;QAC5CC,eAAe,EAAEJ,UAAU;QAC3BK,WAAW,EAAE,CAAC;QACdC,aAAa,EAAEN,UAAU;QACzBO,SAAS,EAAEN;MACf,CAAC,CAAC;MACF,MAAMO,QAAQ,GAAGN,iBAAiB,CAACO,IAAI,EAAE,CAACC,KAAK,CAAC,KAAK,CAAC;MACtD,MAAMC,YAAY,GAAGH,QAAQ,CAAC,CAAAA,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEI,MAAM,IAAG,CAAC,CAAC,EAAC;MACpD,IAAID,YAAY,EAAE;QACd,MAAME,YAAY,GAAG,EAAE,CAAC;QACxBA,YAAY,CAACC,OAAO,CAACC,GAAG,IAAI;UACxB5B,QAAQ,CAAC4B,GAAG,CAAC,CAACD,OAAO,CAAEE,GAAG,IAAK;YAC3BjB,WAAW,CAACkB,IAAI,CACZ;cACIC,KAAK,EAAEF,GAAG;cAAE;cACZG,UAAU,EAAEH,GAAG;cAAE;cACjBI,IAAI,EAAE9B,MAAM,CAACI,SAAS,CAAC2B,kBAAkB,CAAC,UAAU,CAAC,CAAE;YAC3D,CAAC,CACJ;UACL,CAAC,CAAC;QAEN,CAAC,CAAC;MACN;;MACA,OAAO;QACHtB;MACJ,CAAC;IACL;EACJ,CAAC,CAAC;EACF,OAAON,QAAQ;AACnB;AAEA,SAAS6B,8BAA8BA,CAACC,GAAG,EAAC;EACxC,QAAQA,GAAG;IACP,KAAK,KAAK;MAAE,OAAOhC,+BAA+B,CAACH,WAAW,CAAC;MAAE;IACjE,KAAK,OAAO;MAAE,OAAOG,+BAA+B,CAACF,aAAa,CAAC;MAAE;IACrE;MAAS,OAAO,IAAI;EAAC;EACxB;AACL;AAEA,SAAQiC,8BAA8B"},"metadata":{},"sourceType":"module","externalDependencies":[]}