{"ast":null,"code":"var _jsxFileName = \"/Users/cadany/WebstormProjects/monaco/src/CodeEditor.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport * as monaco from 'monaco-editor';\nimport { registerAutoCompletionLanguage } from \"./proxy\";\nimport { editor } from \"monaco-editor\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar IStandaloneEditorConstructionOptions = editor.IStandaloneEditorConstructionOptions;\nvar ITextModel = editor.ITextModel;\nvar IEditorViewState = editor.IEditorViewState;\nvar ICodeEditorViewState = editor.ICodeEditorViewState; // window.MonacoEnvironment = {\n//     getWorker: function (_moduleId: any, label: string) {\n//         // console.log(metadata.languages);\n//         switch (label) {\n//             case 'editorWorkerService':\n//                 return new Worker(new URL('monaco-editor/esm/vs/editor/editor.worker', import.meta.url));\n//             case 'css':\n//             case 'less':\n//             case 'scss':\n//                 return new Worker(new URL('monaco-editor/esm/vs/language/css/css.worker', import.meta.url));\n//             case 'handlebars':\n//             case 'html':\n//             case 'razor':\n//                 return new Worker(\n//                     new URL('monaco-editor/esm/vs/language/html/html.worker', import.meta.url),\n//                 );\n//             case 'json':\n//                 return new Worker(\n//                     new URL('monaco-editor/esm/vs/language/json/json.worker', import.meta.url),\n//                 );\n//             case 'javascript':\n//             case 'typescript':\n//                 return new Worker(\n//                     new URL('monaco-editor/esm/vs/language/typescript/ts.worker', import.meta.url),\n//                 );\n//             default:\n//                 throw new Error(`Unknown label ${label}`);\n//         }\n//     }\n// };\nexport const CodeEditor = (props, context) => {\n  _s();\n  const container = useRef(null);\n  let editor;\n  let autoCompletion;\n\n  //自定义提示\n  let customAutoCompletion = [{\n    label: \"item11\",\n    insertText: \"item text\",\n    kind: \"6\",\n    detail: \"TABLE.COLLUMN\"\n  }];\n  useEffect(() => {\n    console.log(\"props.viewstate effect\");\n  }, [props.viewstate]);\n  useEffect(() => {\n    console.log(\"props.standaloneEditorConstructionOptions effect\");\n    if (container.current) {\n      var _props$standaloneEdit;\n      // editor = monaco.editor.create(container.current);\n      if ((_props$standaloneEdit = props.standaloneEditorConstructionOptions) !== null && _props$standaloneEdit !== void 0 && _props$standaloneEdit.model) {\n        var _props$standaloneEdit2, _props$standaloneEdit3;\n        console.log(\"set model\");\n        //让父级保存view状态\n        props.onViewStateChange && props.onViewStateChange(editor.saveViewState());\n        //切换成新的内容\n        editor.setModel((_props$standaloneEdit2 = props.standaloneEditorConstructionOptions) === null || _props$standaloneEdit2 === void 0 ? void 0 : _props$standaloneEdit2.model);\n        autoCompletion = registerAutoCompletionLanguage((_props$standaloneEdit3 = props.standaloneEditorConstructionOptions) === null || _props$standaloneEdit3 === void 0 ? void 0 : _props$standaloneEdit3.model.getLanguageId(), customAutoCompletion);\n        editor.focus();\n        //切换成父级传进来的view状态\n        if (props.viewstate) {\n          editor.restoreViewState(props.viewstate);\n          editor.setScrollPosition({\n            scrollTop: props.viewstate.viewState.scrollTop,\n            scrollLeft: props.viewstate.viewState.scrollLeft\n          });\n        }\n      }\n      return () => {\n        var _autoCompletion, _editor;\n        // if (autoCompletion)\n        (_autoCompletion = autoCompletion) === null || _autoCompletion === void 0 ? void 0 : _autoCompletion.dispose(); //防止自动提示重复\n        // if(editor)\n        (_editor = editor) === null || _editor === void 0 ? void 0 : _editor.dispose();\n      };\n    }\n  }, [props]);\n  useEffect(() => {\n    if (container.current) {\n      //         console.log(\"didMount ==> \"+props.standaloneEditorConstructionOptions?.language);\n      //         //didMount/didUpdateMount\n      editor = monaco.editor.create(container.current);\n      //         if(props.standaloneEditorConstructionOptions?.model) {\n      //             console.log(\"set model\");\n      //             editor.setModel(props.standaloneEditorConstructionOptions?.model)\n      //             autoCompletion = registerAutoCompletionLanguage(props.standaloneEditorConstructionOptions?.model.getLanguageId(), customAutoCompletion);\n      //             editor.focus();\n      //         }\n      return () => {\n        //didUnmount\n        if (autoCompletion) autoCompletion.dispose(); //防止自动提示重复\n        editor.dispose();\n      };\n    }\n  }, []);\n\n  // let sqlstate: IModelState = {model: monaco.editor.createModel(\"select * from table\", \"mysql\"), viewstate: null};\n  // let redisstate: IModelState = {model: monaco.editor.createModel(\"INFO \", \"redis\"), viewstate: null};\n\n  // function changeModel(type: number) {\n  //     if (autoCompletion) autoCompletion.dispose();\n  //     //保存状态\n  //     if (currentModel) {\n  //         currentModel.viewstate = editor.saveViewState();\n  //     }\n  //     //切换\n  //     switch (type) {\n  //         case 1:\n  //             currentModel = sqlstate;\n  //             editor.setModel(currentModel.model);\n  //             autoCompletion = registerAutoCompletionLanguage(\"mysql\", customAutoCompletion);\n  //             editor.focus();\n  //             break;\n  //         default:\n  //             currentModel = redisstate;\n  //             editor.setModel(currentModel.model);\n  //             autoCompletion = registerAutoCompletionLanguage(\"redis\", customAutoCompletion);\n  //             editor.focus();\n  //     }\n  //     //恢复状态\n  //     if (currentModel.viewstate) {\n  //         editor.restoreViewState(currentModel.viewstate);\n  //         editor.setScrollPosition({\n  //             scrollTop: currentModel.viewstate.viewState.scrollTop,\n  //             scrollLeft: currentModel.viewstate.viewState.scrollLeft\n  //         });\n  //     }\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: \"calc(100%)\",\n      width: \"calc(100%)\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Editor\",\n      ref: container,\n      style: {\n        height: \"calc(90%)\",\n        width: \"calc(100%)\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 12\n  }, this);\n};\n_s(CodeEditor, \"VOZpK/SzBrrDM0bw8HofLHiU9qg=\");\n_c = CodeEditor;\nvar _c;\n$RefreshReg$(_c, \"CodeEditor\");","map":{"version":3,"names":["React","useRef","useEffect","monaco","registerAutoCompletionLanguage","editor","jsxDEV","_jsxDEV","IStandaloneEditorConstructionOptions","ITextModel","IEditorViewState","ICodeEditorViewState","CodeEditor","props","context","_s","container","autoCompletion","customAutoCompletion","label","insertText","kind","detail","console","log","viewstate","current","_props$standaloneEdit","standaloneEditorConstructionOptions","model","_props$standaloneEdit2","_props$standaloneEdit3","onViewStateChange","saveViewState","setModel","getLanguageId","focus","restoreViewState","setScrollPosition","scrollTop","viewState","scrollLeft","_autoCompletion","_editor","dispose","create","style","height","width","children","className","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/cadany/WebstormProjects/monaco/src/CodeEditor.tsx"],"sourcesContent":["import React, {useRef, useEffect} from 'react';\nimport * as monaco from 'monaco-editor';\nimport {registerAutoCompletionLanguage} from \"./proxy\";\nimport {editor, IPosition} from \"monaco-editor\";\nimport IStandaloneEditorConstructionOptions = editor.IStandaloneEditorConstructionOptions;\nimport ITextModel = editor.ITextModel;\nimport IEditorViewState = editor.IEditorViewState;\nimport ICodeEditorViewState = editor.ICodeEditorViewState;\n\n\n// window.MonacoEnvironment = {\n//     getWorker: function (_moduleId: any, label: string) {\n//         // console.log(metadata.languages);\n//         switch (label) {\n//             case 'editorWorkerService':\n//                 return new Worker(new URL('monaco-editor/esm/vs/editor/editor.worker', import.meta.url));\n//             case 'css':\n//             case 'less':\n//             case 'scss':\n//                 return new Worker(new URL('monaco-editor/esm/vs/language/css/css.worker', import.meta.url));\n//             case 'handlebars':\n//             case 'html':\n//             case 'razor':\n//                 return new Worker(\n//                     new URL('monaco-editor/esm/vs/language/html/html.worker', import.meta.url),\n//                 );\n//             case 'json':\n//                 return new Worker(\n//                     new URL('monaco-editor/esm/vs/language/json/json.worker', import.meta.url),\n//                 );\n//             case 'javascript':\n//             case 'typescript':\n//                 return new Worker(\n//                     new URL('monaco-editor/esm/vs/language/typescript/ts.worker', import.meta.url),\n//                 );\n//             default:\n//                 throw new Error(`Unknown label ${label}`);\n//         }\n//     }\n// };\n\ninterface ISuggestions {\n    label: string;\n    kind: string;\n    insertText: string;\n    detail?: string;\n}\n\nexport interface IEditModelState {\n    // model: ITextModel,\n    viewstate?: ICodeEditorViewState | null,\n    standaloneEditorConstructionOptions?: IStandaloneEditorConstructionOptions,\n\n    onViewStateChange?: (state: ICodeEditorViewState | null) => void\n}\n\n\n\nexport const CodeEditor: React.FC<IEditModelState> = (props, context) => {\n    const container = useRef<HTMLDivElement>(null);\n    let editor: monaco.editor.IStandaloneCodeEditor;\n    let autoCompletion: monaco.IDisposable;\n\n    //自定义提示\n    let customAutoCompletion: ISuggestions[] = [{\n        label: \"item11\",\n        insertText: \"item text\",\n        kind: \"6\",\n        detail: \"TABLE.COLLUMN\"\n    }];\n\n    useEffect(()=>{\n        console.log(\"props.viewstate effect\");\n    },[props.viewstate]);\n\n    useEffect(()=>{\n        console.log(\"props.standaloneEditorConstructionOptions effect\");\n        if (container.current){\n            // editor = monaco.editor.create(container.current);\n            if(props.standaloneEditorConstructionOptions?.model) {\n                console.log(\"set model\");\n                //让父级保存view状态\n                props.onViewStateChange&&props.onViewStateChange(editor.saveViewState());\n                //切换成新的内容\n                editor.setModel(props.standaloneEditorConstructionOptions?.model)\n                autoCompletion = registerAutoCompletionLanguage(props.standaloneEditorConstructionOptions?.model.getLanguageId(), customAutoCompletion);\n                editor.focus();\n                //切换成父级传进来的view状态\n                if(props.viewstate){\n                    editor.restoreViewState(props.viewstate);\n                    editor.setScrollPosition({\n                        scrollTop: props.viewstate.viewState.scrollTop,\n                        scrollLeft: props.viewstate.viewState.scrollLeft\n                    });\n                }\n            }\n\n            return () => {\n                // if (autoCompletion)\n                    autoCompletion?.dispose();   //防止自动提示重复\n                // if(editor)\n                    editor?.dispose();\n            };\n        }\n    },[props]);\n\n    useEffect(() => {\n        if (container.current) {\n    //         console.log(\"didMount ==> \"+props.standaloneEditorConstructionOptions?.language);\n    //         //didMount/didUpdateMount\n            editor = monaco.editor.create(container.current);\n    //         if(props.standaloneEditorConstructionOptions?.model) {\n    //             console.log(\"set model\");\n    //             editor.setModel(props.standaloneEditorConstructionOptions?.model)\n    //             autoCompletion = registerAutoCompletionLanguage(props.standaloneEditorConstructionOptions?.model.getLanguageId(), customAutoCompletion);\n    //             editor.focus();\n    //         }\n            return () => {\n                //didUnmount\n                if (autoCompletion) autoCompletion.dispose();   //防止自动提示重复\n                editor.dispose();\n            };\n        }\n    }, []);\n\n    // let sqlstate: IModelState = {model: monaco.editor.createModel(\"select * from table\", \"mysql\"), viewstate: null};\n    // let redisstate: IModelState = {model: monaco.editor.createModel(\"INFO \", \"redis\"), viewstate: null};\n\n    // function changeModel(type: number) {\n    //     if (autoCompletion) autoCompletion.dispose();\n    //     //保存状态\n    //     if (currentModel) {\n    //         currentModel.viewstate = editor.saveViewState();\n    //     }\n    //     //切换\n    //     switch (type) {\n    //         case 1:\n    //             currentModel = sqlstate;\n    //             editor.setModel(currentModel.model);\n    //             autoCompletion = registerAutoCompletionLanguage(\"mysql\", customAutoCompletion);\n    //             editor.focus();\n    //             break;\n    //         default:\n    //             currentModel = redisstate;\n    //             editor.setModel(currentModel.model);\n    //             autoCompletion = registerAutoCompletionLanguage(\"redis\", customAutoCompletion);\n    //             editor.focus();\n    //     }\n    //     //恢复状态\n    //     if (currentModel.viewstate) {\n    //         editor.restoreViewState(currentModel.viewstate);\n    //         editor.setScrollPosition({\n    //             scrollTop: currentModel.viewstate.viewState.scrollTop,\n    //             scrollLeft: currentModel.viewstate.viewState.scrollLeft\n    //         });\n    //     }\n    // }\n\n    return <div style={{height: \"calc(100%)\", width: \"calc(100%)\"}}>\n        <div className=\"Editor\" ref={container} style={{height: \"calc(90%)\", width: \"calc(100%)\"}}></div>\n    </div>;\n};"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,MAAM,EAAEC,SAAS,QAAO,OAAO;AAC9C,OAAO,KAAKC,MAAM,MAAM,eAAe;AACvC,SAAQC,8BAA8B,QAAO,SAAS;AACtD,SAAQC,MAAM,QAAkB,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,IACzCC,oCAAoC,GAAGH,MAAM,CAACG,oCAAoC;AAAA,IAClFC,UAAU,GAAGJ,MAAM,CAACI,UAAU;AAAA,IAC9BC,gBAAgB,GAAGL,MAAM,CAACK,gBAAgB;AAAA,IAC1CC,oBAAoB,GAAGN,MAAM,CAACM,oBAAoB,EAGzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAmBA,OAAO,MAAMC,UAAqC,GAAGA,CAACC,KAAK,EAAEC,OAAO,KAAK;EAAAC,EAAA;EACrE,MAAMC,SAAS,GAAGf,MAAM,CAAiB,IAAI,CAAC;EAC9C,IAAII,MAA2C;EAC/C,IAAIY,cAAkC;;EAEtC;EACA,IAAIC,oBAAoC,GAAG,CAAC;IACxCC,KAAK,EAAE,QAAQ;IACfC,UAAU,EAAE,WAAW;IACvBC,IAAI,EAAE,GAAG;IACTC,MAAM,EAAE;EACZ,CAAC,CAAC;EAEFpB,SAAS,CAAC,MAAI;IACVqB,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;EACzC,CAAC,EAAC,CAACX,KAAK,CAACY,SAAS,CAAC,CAAC;EAEpBvB,SAAS,CAAC,MAAI;IACVqB,OAAO,CAACC,GAAG,CAAC,kDAAkD,CAAC;IAC/D,IAAIR,SAAS,CAACU,OAAO,EAAC;MAAA,IAAAC,qBAAA;MAClB;MACA,KAAAA,qBAAA,GAAGd,KAAK,CAACe,mCAAmC,cAAAD,qBAAA,eAAzCA,qBAAA,CAA2CE,KAAK,EAAE;QAAA,IAAAC,sBAAA,EAAAC,sBAAA;QACjDR,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;QACxB;QACAX,KAAK,CAACmB,iBAAiB,IAAEnB,KAAK,CAACmB,iBAAiB,CAAC3B,MAAM,CAAC4B,aAAa,EAAE,CAAC;QACxE;QACA5B,MAAM,CAAC6B,QAAQ,EAAAJ,sBAAA,GAACjB,KAAK,CAACe,mCAAmC,cAAAE,sBAAA,uBAAzCA,sBAAA,CAA2CD,KAAK,CAAC;QACjEZ,cAAc,GAAGb,8BAA8B,EAAA2B,sBAAA,GAAClB,KAAK,CAACe,mCAAmC,cAAAG,sBAAA,uBAAzCA,sBAAA,CAA2CF,KAAK,CAACM,aAAa,EAAE,EAAEjB,oBAAoB,CAAC;QACvIb,MAAM,CAAC+B,KAAK,EAAE;QACd;QACA,IAAGvB,KAAK,CAACY,SAAS,EAAC;UACfpB,MAAM,CAACgC,gBAAgB,CAACxB,KAAK,CAACY,SAAS,CAAC;UACxCpB,MAAM,CAACiC,iBAAiB,CAAC;YACrBC,SAAS,EAAE1B,KAAK,CAACY,SAAS,CAACe,SAAS,CAACD,SAAS;YAC9CE,UAAU,EAAE5B,KAAK,CAACY,SAAS,CAACe,SAAS,CAACC;UAC1C,CAAC,CAAC;QACN;MACJ;MAEA,OAAO,MAAM;QAAA,IAAAC,eAAA,EAAAC,OAAA;QACT;QACI,CAAAD,eAAA,GAAAzB,cAAc,cAAAyB,eAAA,uBAAdA,eAAA,CAAgBE,OAAO,EAAE,CAAC,CAAG;QACjC;QACI,CAAAD,OAAA,GAAAtC,MAAM,cAAAsC,OAAA,uBAANA,OAAA,CAAQC,OAAO,EAAE;MACzB,CAAC;IACL;EACJ,CAAC,EAAC,CAAC/B,KAAK,CAAC,CAAC;EAEVX,SAAS,CAAC,MAAM;IACZ,IAAIc,SAAS,CAACU,OAAO,EAAE;MAC3B;MACA;MACQrB,MAAM,GAAGF,MAAM,CAACE,MAAM,CAACwC,MAAM,CAAC7B,SAAS,CAACU,OAAO,CAAC;MACxD;MACA;MACA;MACA;MACA;MACA;MACQ,OAAO,MAAM;QACT;QACA,IAAIT,cAAc,EAAEA,cAAc,CAAC2B,OAAO,EAAE,CAAC,CAAG;QAChDvC,MAAM,CAACuC,OAAO,EAAE;MACpB,CAAC;IACL;EACJ,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,oBAAOrC,OAAA;IAAKuC,KAAK,EAAE;MAACC,MAAM,EAAE,YAAY;MAAEC,KAAK,EAAE;IAAY,CAAE;IAAAC,QAAA,eAC3D1C,OAAA;MAAK2C,SAAS,EAAC,QAAQ;MAACC,GAAG,EAAEnC,SAAU;MAAC8B,KAAK,EAAE;QAACC,MAAM,EAAE,WAAW;QAAEC,KAAK,EAAE;MAAY;IAAE;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAO;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAC/F;AACV,CAAC;AAACxC,EAAA,CAvGWH,UAAqC;AAAA4C,EAAA,GAArC5C,UAAqC;AAAA,IAAA4C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}