{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nvar _a;\nimport * as dom from '../../../../base/browser/dom.js';\nimport { Disposable, DisposableStore, toDisposable } from '../../../../base/common/lifecycle.js';\nimport * as strings from '../../../../base/common/strings.js';\nimport './ghostText.css';\nimport { applyFontInfo } from '../../../browser/config/domFontInfo.js';\nimport { EditorFontLigatures } from '../../../common/config/editorOptions.js';\nimport { LineTokens } from '../../../common/tokens/lineTokens.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { StringBuilder } from '../../../common/core/stringBuilder.js';\nimport { InjectedTextCursorStops } from '../../../common/model.js';\nimport { ILanguageService } from '../../../common/languages/language.js';\nimport { LineDecoration } from '../../../common/viewLayout/lineDecorations.js';\nimport { RenderLineInput, renderViewLine } from '../../../common/viewLayout/viewLineRenderer.js';\nimport { GhostTextReplacement } from './ghostText.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nconst ttPolicy = (_a = window.trustedTypes) === null || _a === void 0 ? void 0 : _a.createPolicy('editorGhostText', {\n  createHTML: value => value\n});\nlet GhostTextWidget = class GhostTextWidget extends Disposable {\n  constructor(editor, model, instantiationService, languageService) {\n    super();\n    this.editor = editor;\n    this.model = model;\n    this.instantiationService = instantiationService;\n    this.languageService = languageService;\n    this.disposed = false;\n    this.partsWidget = this._register(this.instantiationService.createInstance(DecorationsWidget, this.editor));\n    this.additionalLinesWidget = this._register(new AdditionalLinesWidget(this.editor, this.languageService.languageIdCodec));\n    this.viewMoreContentWidget = undefined;\n    this.replacementDecoration = this._register(new DisposableDecorations(this.editor));\n    this._register(this.editor.onDidChangeConfiguration(e => {\n      if (e.hasChanged(30 /* EditorOption.disableMonospaceOptimizations */) || e.hasChanged(111 /* EditorOption.stopRenderingLineAfter */) || e.hasChanged(93 /* EditorOption.renderWhitespace */) || e.hasChanged(88 /* EditorOption.renderControlCharacters */) || e.hasChanged(48 /* EditorOption.fontLigatures */) || e.hasChanged(47 /* EditorOption.fontInfo */) || e.hasChanged(63 /* EditorOption.lineHeight */)) {\n        this.update();\n      }\n    }));\n    this._register(toDisposable(() => {\n      var _a;\n      this.disposed = true;\n      this.update();\n      (_a = this.viewMoreContentWidget) === null || _a === void 0 ? void 0 : _a.dispose();\n      this.viewMoreContentWidget = undefined;\n    }));\n    this._register(model.onDidChange(() => {\n      this.update();\n    }));\n    this.update();\n  }\n  shouldShowHoverAtViewZone(viewZoneId) {\n    return this.additionalLinesWidget.viewZoneId === viewZoneId;\n  }\n  update() {\n    var _a;\n    const ghostText = this.model.ghostText;\n    if (!this.editor.hasModel() || !ghostText || this.disposed) {\n      this.partsWidget.clear();\n      this.additionalLinesWidget.clear();\n      this.replacementDecoration.clear();\n      return;\n    }\n    const inlineTexts = new Array();\n    const additionalLines = new Array();\n    function addToAdditionalLines(lines, className) {\n      if (additionalLines.length > 0) {\n        const lastLine = additionalLines[additionalLines.length - 1];\n        if (className) {\n          lastLine.decorations.push(new LineDecoration(lastLine.content.length + 1, lastLine.content.length + 1 + lines[0].length, className, 0 /* InlineDecorationType.Regular */));\n        }\n\n        lastLine.content += lines[0];\n        lines = lines.slice(1);\n      }\n      for (const line of lines) {\n        additionalLines.push({\n          content: line,\n          decorations: className ? [new LineDecoration(1, line.length + 1, className, 0 /* InlineDecorationType.Regular */)] : []\n        });\n      }\n    }\n    if (ghostText instanceof GhostTextReplacement) {\n      this.replacementDecoration.setDecorations([{\n        range: new Range(ghostText.lineNumber, ghostText.columnStart, ghostText.lineNumber, ghostText.columnStart + ghostText.length),\n        options: {\n          inlineClassName: 'inline-completion-text-to-replace',\n          description: 'GhostTextReplacement'\n        }\n      }]);\n    } else {\n      this.replacementDecoration.setDecorations([]);\n    }\n    const textBufferLine = this.editor.getModel().getLineContent(ghostText.lineNumber);\n    let hiddenTextStartColumn = undefined;\n    let lastIdx = 0;\n    for (const part of ghostText.parts) {\n      let lines = part.lines;\n      if (hiddenTextStartColumn === undefined) {\n        inlineTexts.push({\n          column: part.column,\n          text: lines[0],\n          preview: part.preview\n        });\n        lines = lines.slice(1);\n      } else {\n        addToAdditionalLines([textBufferLine.substring(lastIdx, part.column - 1)], undefined);\n      }\n      if (lines.length > 0) {\n        addToAdditionalLines(lines, 'ghost-text');\n        if (hiddenTextStartColumn === undefined && part.column <= textBufferLine.length) {\n          hiddenTextStartColumn = part.column;\n        }\n      }\n      lastIdx = part.column - 1;\n    }\n    if (hiddenTextStartColumn !== undefined) {\n      addToAdditionalLines([textBufferLine.substring(lastIdx)], undefined);\n    }\n    this.partsWidget.setParts(ghostText.lineNumber, inlineTexts, hiddenTextStartColumn !== undefined ? {\n      column: hiddenTextStartColumn,\n      length: textBufferLine.length + 1 - hiddenTextStartColumn\n    } : undefined);\n    this.additionalLinesWidget.updateLines(ghostText.lineNumber, additionalLines, ghostText.additionalReservedLineCount);\n    if (0 < 0) {\n      // Not supported at the moment, condition is always false.\n      this.viewMoreContentWidget = this.renderViewMoreLines(new Position(ghostText.lineNumber, this.editor.getModel().getLineMaxColumn(ghostText.lineNumber)), '', 0);\n    } else {\n      (_a = this.viewMoreContentWidget) === null || _a === void 0 ? void 0 : _a.dispose();\n      this.viewMoreContentWidget = undefined;\n    }\n  }\n  renderViewMoreLines(position, firstLineText, remainingLinesLength) {\n    const fontInfo = this.editor.getOption(47 /* EditorOption.fontInfo */);\n    const domNode = document.createElement('div');\n    domNode.className = 'suggest-preview-additional-widget';\n    applyFontInfo(domNode, fontInfo);\n    const spacer = document.createElement('span');\n    spacer.className = 'content-spacer';\n    spacer.append(firstLineText);\n    domNode.append(spacer);\n    const newline = document.createElement('span');\n    newline.className = 'content-newline suggest-preview-text';\n    newline.append('⏎  ');\n    domNode.append(newline);\n    const disposableStore = new DisposableStore();\n    const button = document.createElement('div');\n    button.className = 'button suggest-preview-text';\n    button.append(`+${remainingLinesLength} lines…`);\n    disposableStore.add(dom.addStandardDisposableListener(button, 'mousedown', e => {\n      var _a;\n      (_a = this.model) === null || _a === void 0 ? void 0 : _a.setExpanded(true);\n      e.preventDefault();\n      this.editor.focus();\n    }));\n    domNode.append(button);\n    return new ViewMoreLinesContentWidget(this.editor, position, domNode, disposableStore);\n  }\n};\nGhostTextWidget = __decorate([__param(2, IInstantiationService), __param(3, ILanguageService)], GhostTextWidget);\nexport { GhostTextWidget };\nclass DisposableDecorations {\n  constructor(editor) {\n    this.editor = editor;\n    this.decorationIds = [];\n  }\n  setDecorations(decorations) {\n    // Using change decorations ensures that we update the id's before some event handler is called.\n    this.editor.changeDecorations(accessor => {\n      this.decorationIds = accessor.deltaDecorations(this.decorationIds, decorations);\n    });\n  }\n  clear() {\n    this.setDecorations([]);\n  }\n  dispose() {\n    this.clear();\n  }\n}\nclass DecorationsWidget {\n  constructor(editor) {\n    this.editor = editor;\n    this.decorationIds = [];\n  }\n  dispose() {\n    this.clear();\n  }\n  clear() {\n    // Using change decorations ensures that we update the id's before some event handler is called.\n    this.editor.changeDecorations(accessor => {\n      this.decorationIds = accessor.deltaDecorations(this.decorationIds, []);\n    });\n  }\n  setParts(lineNumber, parts, hiddenText) {\n    const textModel = this.editor.getModel();\n    if (!textModel) {\n      return;\n    }\n    const hiddenTextDecorations = new Array();\n    if (hiddenText) {\n      hiddenTextDecorations.push({\n        range: Range.fromPositions(new Position(lineNumber, hiddenText.column), new Position(lineNumber, hiddenText.column + hiddenText.length)),\n        options: {\n          inlineClassName: 'ghost-text-hidden',\n          description: 'ghost-text-hidden'\n        }\n      });\n    }\n    // Using change decorations ensures that we update the id's before some event handler is called.\n    this.editor.changeDecorations(accessor => {\n      this.decorationIds = accessor.deltaDecorations(this.decorationIds, parts.map(p => {\n        return {\n          range: Range.fromPositions(new Position(lineNumber, p.column)),\n          options: {\n            description: 'ghost-text',\n            after: {\n              content: p.text,\n              inlineClassName: p.preview ? 'ghost-text-decoration-preview' : 'ghost-text-decoration',\n              cursorStops: InjectedTextCursorStops.Left\n            },\n            showIfCollapsed: true\n          }\n        };\n      }).concat(hiddenTextDecorations));\n    });\n  }\n}\nclass AdditionalLinesWidget {\n  get viewZoneId() {\n    return this._viewZoneId;\n  }\n  constructor(editor, languageIdCodec) {\n    this.editor = editor;\n    this.languageIdCodec = languageIdCodec;\n    this._viewZoneId = undefined;\n  }\n  dispose() {\n    this.clear();\n  }\n  clear() {\n    this.editor.changeViewZones(changeAccessor => {\n      if (this._viewZoneId) {\n        changeAccessor.removeZone(this._viewZoneId);\n        this._viewZoneId = undefined;\n      }\n    });\n  }\n  updateLines(lineNumber, additionalLines, minReservedLineCount) {\n    const textModel = this.editor.getModel();\n    if (!textModel) {\n      return;\n    }\n    const {\n      tabSize\n    } = textModel.getOptions();\n    this.editor.changeViewZones(changeAccessor => {\n      if (this._viewZoneId) {\n        changeAccessor.removeZone(this._viewZoneId);\n        this._viewZoneId = undefined;\n      }\n      const heightInLines = Math.max(additionalLines.length, minReservedLineCount);\n      if (heightInLines > 0) {\n        const domNode = document.createElement('div');\n        renderLines(domNode, tabSize, additionalLines, this.editor.getOptions(), this.languageIdCodec);\n        this._viewZoneId = changeAccessor.addZone({\n          afterLineNumber: lineNumber,\n          heightInLines: heightInLines,\n          domNode,\n          afterColumnAffinity: 1 /* PositionAffinity.Right */\n        });\n      }\n    });\n  }\n}\n\nfunction renderLines(domNode, tabSize, lines, opts, languageIdCodec) {\n  const disableMonospaceOptimizations = opts.get(30 /* EditorOption.disableMonospaceOptimizations */);\n  const stopRenderingLineAfter = opts.get(111 /* EditorOption.stopRenderingLineAfter */);\n  // To avoid visual confusion, we don't want to render visible whitespace\n  const renderWhitespace = 'none';\n  const renderControlCharacters = opts.get(88 /* EditorOption.renderControlCharacters */);\n  const fontLigatures = opts.get(48 /* EditorOption.fontLigatures */);\n  const fontInfo = opts.get(47 /* EditorOption.fontInfo */);\n  const lineHeight = opts.get(63 /* EditorOption.lineHeight */);\n  const sb = new StringBuilder(10000);\n  sb.appendString('<div class=\"suggest-preview-text\">');\n  for (let i = 0, len = lines.length; i < len; i++) {\n    const lineData = lines[i];\n    const line = lineData.content;\n    sb.appendString('<div class=\"view-line');\n    sb.appendString('\" style=\"top:');\n    sb.appendString(String(i * lineHeight));\n    sb.appendString('px;width:1000000px;\">');\n    const isBasicASCII = strings.isBasicASCII(line);\n    const containsRTL = strings.containsRTL(line);\n    const lineTokens = LineTokens.createEmpty(line, languageIdCodec);\n    renderViewLine(new RenderLineInput(fontInfo.isMonospace && !disableMonospaceOptimizations, fontInfo.canUseHalfwidthRightwardsArrow, line, false, isBasicASCII, containsRTL, 0, lineTokens, lineData.decorations, tabSize, 0, fontInfo.spaceWidth, fontInfo.middotWidth, fontInfo.wsmiddotWidth, stopRenderingLineAfter, renderWhitespace, renderControlCharacters, fontLigatures !== EditorFontLigatures.OFF, null), sb);\n    sb.appendString('</div>');\n  }\n  sb.appendString('</div>');\n  applyFontInfo(domNode, fontInfo);\n  const html = sb.build();\n  const trustedhtml = ttPolicy ? ttPolicy.createHTML(html) : html;\n  domNode.innerHTML = trustedhtml;\n}\nclass ViewMoreLinesContentWidget extends Disposable {\n  constructor(editor, position, domNode, disposableStore) {\n    super();\n    this.editor = editor;\n    this.position = position;\n    this.domNode = domNode;\n    this.allowEditorOverflow = false;\n    this.suppressMouseDown = false;\n    this._register(disposableStore);\n    this._register(toDisposable(() => {\n      this.editor.removeContentWidget(this);\n    }));\n    this.editor.addContentWidget(this);\n  }\n  getId() {\n    return 'editor.widget.viewMoreLinesWidget';\n  }\n  getDomNode() {\n    return this.domNode;\n  }\n  getPosition() {\n    return {\n      position: this.position,\n      preference: [0 /* ContentWidgetPositionPreference.EXACT */]\n    };\n  }\n}","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","_a","dom","Disposable","DisposableStore","toDisposable","strings","applyFontInfo","EditorFontLigatures","LineTokens","Position","Range","StringBuilder","InjectedTextCursorStops","ILanguageService","LineDecoration","RenderLineInput","renderViewLine","GhostTextReplacement","IInstantiationService","ttPolicy","window","trustedTypes","createPolicy","createHTML","value","GhostTextWidget","constructor","editor","model","instantiationService","languageService","disposed","partsWidget","_register","createInstance","DecorationsWidget","additionalLinesWidget","AdditionalLinesWidget","languageIdCodec","viewMoreContentWidget","undefined","replacementDecoration","DisposableDecorations","onDidChangeConfiguration","e","hasChanged","update","dispose","onDidChange","shouldShowHoverAtViewZone","viewZoneId","ghostText","hasModel","clear","inlineTexts","Array","additionalLines","addToAdditionalLines","lines","className","lastLine","decorations","push","content","slice","line","setDecorations","range","lineNumber","columnStart","options","inlineClassName","description","textBufferLine","getModel","getLineContent","hiddenTextStartColumn","lastIdx","part","parts","column","text","preview","substring","setParts","updateLines","additionalReservedLineCount","renderViewMoreLines","getLineMaxColumn","position","firstLineText","remainingLinesLength","fontInfo","getOption","domNode","document","createElement","spacer","append","newline","disposableStore","button","add","addStandardDisposableListener","setExpanded","preventDefault","focus","ViewMoreLinesContentWidget","decorationIds","changeDecorations","accessor","deltaDecorations","hiddenText","textModel","hiddenTextDecorations","fromPositions","map","p","after","cursorStops","Left","showIfCollapsed","concat","_viewZoneId","changeViewZones","changeAccessor","removeZone","minReservedLineCount","tabSize","getOptions","heightInLines","Math","max","renderLines","addZone","afterLineNumber","afterColumnAffinity","opts","disableMonospaceOptimizations","get","stopRenderingLineAfter","renderWhitespace","renderControlCharacters","fontLigatures","lineHeight","sb","appendString","len","lineData","String","isBasicASCII","containsRTL","lineTokens","createEmpty","isMonospace","canUseHalfwidthRightwardsArrow","spaceWidth","middotWidth","wsmiddotWidth","OFF","html","build","trustedhtml","innerHTML","allowEditorOverflow","suppressMouseDown","removeContentWidget","addContentWidget","getId","getDomNode","getPosition","preference"],"sources":["/Users/cadany/WebstormProjects/monaco/node_modules/monaco-editor/esm/vs/editor/contrib/inlineCompletions/browser/ghostTextWidget.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar _a;\nimport * as dom from '../../../../base/browser/dom.js';\nimport { Disposable, DisposableStore, toDisposable } from '../../../../base/common/lifecycle.js';\nimport * as strings from '../../../../base/common/strings.js';\nimport './ghostText.css';\nimport { applyFontInfo } from '../../../browser/config/domFontInfo.js';\nimport { EditorFontLigatures } from '../../../common/config/editorOptions.js';\nimport { LineTokens } from '../../../common/tokens/lineTokens.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { StringBuilder } from '../../../common/core/stringBuilder.js';\nimport { InjectedTextCursorStops } from '../../../common/model.js';\nimport { ILanguageService } from '../../../common/languages/language.js';\nimport { LineDecoration } from '../../../common/viewLayout/lineDecorations.js';\nimport { RenderLineInput, renderViewLine } from '../../../common/viewLayout/viewLineRenderer.js';\nimport { GhostTextReplacement } from './ghostText.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nconst ttPolicy = (_a = window.trustedTypes) === null || _a === void 0 ? void 0 : _a.createPolicy('editorGhostText', { createHTML: value => value });\nlet GhostTextWidget = class GhostTextWidget extends Disposable {\n    constructor(editor, model, instantiationService, languageService) {\n        super();\n        this.editor = editor;\n        this.model = model;\n        this.instantiationService = instantiationService;\n        this.languageService = languageService;\n        this.disposed = false;\n        this.partsWidget = this._register(this.instantiationService.createInstance(DecorationsWidget, this.editor));\n        this.additionalLinesWidget = this._register(new AdditionalLinesWidget(this.editor, this.languageService.languageIdCodec));\n        this.viewMoreContentWidget = undefined;\n        this.replacementDecoration = this._register(new DisposableDecorations(this.editor));\n        this._register(this.editor.onDidChangeConfiguration((e) => {\n            if (e.hasChanged(30 /* EditorOption.disableMonospaceOptimizations */)\n                || e.hasChanged(111 /* EditorOption.stopRenderingLineAfter */)\n                || e.hasChanged(93 /* EditorOption.renderWhitespace */)\n                || e.hasChanged(88 /* EditorOption.renderControlCharacters */)\n                || e.hasChanged(48 /* EditorOption.fontLigatures */)\n                || e.hasChanged(47 /* EditorOption.fontInfo */)\n                || e.hasChanged(63 /* EditorOption.lineHeight */)) {\n                this.update();\n            }\n        }));\n        this._register(toDisposable(() => {\n            var _a;\n            this.disposed = true;\n            this.update();\n            (_a = this.viewMoreContentWidget) === null || _a === void 0 ? void 0 : _a.dispose();\n            this.viewMoreContentWidget = undefined;\n        }));\n        this._register(model.onDidChange(() => {\n            this.update();\n        }));\n        this.update();\n    }\n    shouldShowHoverAtViewZone(viewZoneId) {\n        return (this.additionalLinesWidget.viewZoneId === viewZoneId);\n    }\n    update() {\n        var _a;\n        const ghostText = this.model.ghostText;\n        if (!this.editor.hasModel() || !ghostText || this.disposed) {\n            this.partsWidget.clear();\n            this.additionalLinesWidget.clear();\n            this.replacementDecoration.clear();\n            return;\n        }\n        const inlineTexts = new Array();\n        const additionalLines = new Array();\n        function addToAdditionalLines(lines, className) {\n            if (additionalLines.length > 0) {\n                const lastLine = additionalLines[additionalLines.length - 1];\n                if (className) {\n                    lastLine.decorations.push(new LineDecoration(lastLine.content.length + 1, lastLine.content.length + 1 + lines[0].length, className, 0 /* InlineDecorationType.Regular */));\n                }\n                lastLine.content += lines[0];\n                lines = lines.slice(1);\n            }\n            for (const line of lines) {\n                additionalLines.push({\n                    content: line,\n                    decorations: className ? [new LineDecoration(1, line.length + 1, className, 0 /* InlineDecorationType.Regular */)] : []\n                });\n            }\n        }\n        if (ghostText instanceof GhostTextReplacement) {\n            this.replacementDecoration.setDecorations([\n                {\n                    range: new Range(ghostText.lineNumber, ghostText.columnStart, ghostText.lineNumber, ghostText.columnStart + ghostText.length),\n                    options: {\n                        inlineClassName: 'inline-completion-text-to-replace',\n                        description: 'GhostTextReplacement'\n                    }\n                },\n            ]);\n        }\n        else {\n            this.replacementDecoration.setDecorations([]);\n        }\n        const textBufferLine = this.editor.getModel().getLineContent(ghostText.lineNumber);\n        let hiddenTextStartColumn = undefined;\n        let lastIdx = 0;\n        for (const part of ghostText.parts) {\n            let lines = part.lines;\n            if (hiddenTextStartColumn === undefined) {\n                inlineTexts.push({\n                    column: part.column,\n                    text: lines[0],\n                    preview: part.preview,\n                });\n                lines = lines.slice(1);\n            }\n            else {\n                addToAdditionalLines([textBufferLine.substring(lastIdx, part.column - 1)], undefined);\n            }\n            if (lines.length > 0) {\n                addToAdditionalLines(lines, 'ghost-text');\n                if (hiddenTextStartColumn === undefined && part.column <= textBufferLine.length) {\n                    hiddenTextStartColumn = part.column;\n                }\n            }\n            lastIdx = part.column - 1;\n        }\n        if (hiddenTextStartColumn !== undefined) {\n            addToAdditionalLines([textBufferLine.substring(lastIdx)], undefined);\n        }\n        this.partsWidget.setParts(ghostText.lineNumber, inlineTexts, hiddenTextStartColumn !== undefined ? { column: hiddenTextStartColumn, length: textBufferLine.length + 1 - hiddenTextStartColumn } : undefined);\n        this.additionalLinesWidget.updateLines(ghostText.lineNumber, additionalLines, ghostText.additionalReservedLineCount);\n        if (0 < 0) {\n            // Not supported at the moment, condition is always false.\n            this.viewMoreContentWidget = this.renderViewMoreLines(new Position(ghostText.lineNumber, this.editor.getModel().getLineMaxColumn(ghostText.lineNumber)), '', 0);\n        }\n        else {\n            (_a = this.viewMoreContentWidget) === null || _a === void 0 ? void 0 : _a.dispose();\n            this.viewMoreContentWidget = undefined;\n        }\n    }\n    renderViewMoreLines(position, firstLineText, remainingLinesLength) {\n        const fontInfo = this.editor.getOption(47 /* EditorOption.fontInfo */);\n        const domNode = document.createElement('div');\n        domNode.className = 'suggest-preview-additional-widget';\n        applyFontInfo(domNode, fontInfo);\n        const spacer = document.createElement('span');\n        spacer.className = 'content-spacer';\n        spacer.append(firstLineText);\n        domNode.append(spacer);\n        const newline = document.createElement('span');\n        newline.className = 'content-newline suggest-preview-text';\n        newline.append('⏎  ');\n        domNode.append(newline);\n        const disposableStore = new DisposableStore();\n        const button = document.createElement('div');\n        button.className = 'button suggest-preview-text';\n        button.append(`+${remainingLinesLength} lines…`);\n        disposableStore.add(dom.addStandardDisposableListener(button, 'mousedown', (e) => {\n            var _a;\n            (_a = this.model) === null || _a === void 0 ? void 0 : _a.setExpanded(true);\n            e.preventDefault();\n            this.editor.focus();\n        }));\n        domNode.append(button);\n        return new ViewMoreLinesContentWidget(this.editor, position, domNode, disposableStore);\n    }\n};\nGhostTextWidget = __decorate([\n    __param(2, IInstantiationService),\n    __param(3, ILanguageService)\n], GhostTextWidget);\nexport { GhostTextWidget };\nclass DisposableDecorations {\n    constructor(editor) {\n        this.editor = editor;\n        this.decorationIds = [];\n    }\n    setDecorations(decorations) {\n        // Using change decorations ensures that we update the id's before some event handler is called.\n        this.editor.changeDecorations(accessor => {\n            this.decorationIds = accessor.deltaDecorations(this.decorationIds, decorations);\n        });\n    }\n    clear() {\n        this.setDecorations([]);\n    }\n    dispose() {\n        this.clear();\n    }\n}\nclass DecorationsWidget {\n    constructor(editor) {\n        this.editor = editor;\n        this.decorationIds = [];\n    }\n    dispose() {\n        this.clear();\n    }\n    clear() {\n        // Using change decorations ensures that we update the id's before some event handler is called.\n        this.editor.changeDecorations(accessor => {\n            this.decorationIds = accessor.deltaDecorations(this.decorationIds, []);\n        });\n    }\n    setParts(lineNumber, parts, hiddenText) {\n        const textModel = this.editor.getModel();\n        if (!textModel) {\n            return;\n        }\n        const hiddenTextDecorations = new Array();\n        if (hiddenText) {\n            hiddenTextDecorations.push({\n                range: Range.fromPositions(new Position(lineNumber, hiddenText.column), new Position(lineNumber, hiddenText.column + hiddenText.length)),\n                options: {\n                    inlineClassName: 'ghost-text-hidden',\n                    description: 'ghost-text-hidden',\n                }\n            });\n        }\n        // Using change decorations ensures that we update the id's before some event handler is called.\n        this.editor.changeDecorations(accessor => {\n            this.decorationIds = accessor.deltaDecorations(this.decorationIds, parts.map(p => {\n                return ({\n                    range: Range.fromPositions(new Position(lineNumber, p.column)),\n                    options: {\n                        description: 'ghost-text',\n                        after: { content: p.text, inlineClassName: p.preview ? 'ghost-text-decoration-preview' : 'ghost-text-decoration', cursorStops: InjectedTextCursorStops.Left },\n                        showIfCollapsed: true,\n                    }\n                });\n            }).concat(hiddenTextDecorations));\n        });\n    }\n}\nclass AdditionalLinesWidget {\n    get viewZoneId() { return this._viewZoneId; }\n    constructor(editor, languageIdCodec) {\n        this.editor = editor;\n        this.languageIdCodec = languageIdCodec;\n        this._viewZoneId = undefined;\n    }\n    dispose() {\n        this.clear();\n    }\n    clear() {\n        this.editor.changeViewZones((changeAccessor) => {\n            if (this._viewZoneId) {\n                changeAccessor.removeZone(this._viewZoneId);\n                this._viewZoneId = undefined;\n            }\n        });\n    }\n    updateLines(lineNumber, additionalLines, minReservedLineCount) {\n        const textModel = this.editor.getModel();\n        if (!textModel) {\n            return;\n        }\n        const { tabSize } = textModel.getOptions();\n        this.editor.changeViewZones((changeAccessor) => {\n            if (this._viewZoneId) {\n                changeAccessor.removeZone(this._viewZoneId);\n                this._viewZoneId = undefined;\n            }\n            const heightInLines = Math.max(additionalLines.length, minReservedLineCount);\n            if (heightInLines > 0) {\n                const domNode = document.createElement('div');\n                renderLines(domNode, tabSize, additionalLines, this.editor.getOptions(), this.languageIdCodec);\n                this._viewZoneId = changeAccessor.addZone({\n                    afterLineNumber: lineNumber,\n                    heightInLines: heightInLines,\n                    domNode,\n                    afterColumnAffinity: 1 /* PositionAffinity.Right */\n                });\n            }\n        });\n    }\n}\nfunction renderLines(domNode, tabSize, lines, opts, languageIdCodec) {\n    const disableMonospaceOptimizations = opts.get(30 /* EditorOption.disableMonospaceOptimizations */);\n    const stopRenderingLineAfter = opts.get(111 /* EditorOption.stopRenderingLineAfter */);\n    // To avoid visual confusion, we don't want to render visible whitespace\n    const renderWhitespace = 'none';\n    const renderControlCharacters = opts.get(88 /* EditorOption.renderControlCharacters */);\n    const fontLigatures = opts.get(48 /* EditorOption.fontLigatures */);\n    const fontInfo = opts.get(47 /* EditorOption.fontInfo */);\n    const lineHeight = opts.get(63 /* EditorOption.lineHeight */);\n    const sb = new StringBuilder(10000);\n    sb.appendString('<div class=\"suggest-preview-text\">');\n    for (let i = 0, len = lines.length; i < len; i++) {\n        const lineData = lines[i];\n        const line = lineData.content;\n        sb.appendString('<div class=\"view-line');\n        sb.appendString('\" style=\"top:');\n        sb.appendString(String(i * lineHeight));\n        sb.appendString('px;width:1000000px;\">');\n        const isBasicASCII = strings.isBasicASCII(line);\n        const containsRTL = strings.containsRTL(line);\n        const lineTokens = LineTokens.createEmpty(line, languageIdCodec);\n        renderViewLine(new RenderLineInput((fontInfo.isMonospace && !disableMonospaceOptimizations), fontInfo.canUseHalfwidthRightwardsArrow, line, false, isBasicASCII, containsRTL, 0, lineTokens, lineData.decorations, tabSize, 0, fontInfo.spaceWidth, fontInfo.middotWidth, fontInfo.wsmiddotWidth, stopRenderingLineAfter, renderWhitespace, renderControlCharacters, fontLigatures !== EditorFontLigatures.OFF, null), sb);\n        sb.appendString('</div>');\n    }\n    sb.appendString('</div>');\n    applyFontInfo(domNode, fontInfo);\n    const html = sb.build();\n    const trustedhtml = ttPolicy ? ttPolicy.createHTML(html) : html;\n    domNode.innerHTML = trustedhtml;\n}\nclass ViewMoreLinesContentWidget extends Disposable {\n    constructor(editor, position, domNode, disposableStore) {\n        super();\n        this.editor = editor;\n        this.position = position;\n        this.domNode = domNode;\n        this.allowEditorOverflow = false;\n        this.suppressMouseDown = false;\n        this._register(disposableStore);\n        this._register(toDisposable(() => {\n            this.editor.removeContentWidget(this);\n        }));\n        this.editor.addContentWidget(this);\n    }\n    getId() {\n        return 'editor.widget.viewMoreLinesWidget';\n    }\n    getDomNode() {\n        return this.domNode;\n    }\n    getPosition() {\n        return {\n            position: this.position,\n            preference: [0 /* ContentWidgetPositionPreference.EXACT */]\n        };\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}