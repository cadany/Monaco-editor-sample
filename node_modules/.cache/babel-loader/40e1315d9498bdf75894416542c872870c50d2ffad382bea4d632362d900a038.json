{"ast":null,"code":"import _slicedToArray from \"/Users/cadany/WebstormProjects/monaco/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"/Users/cadany/WebstormProjects/monaco/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/cadany/WebstormProjects/monaco/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/cadany/WebstormProjects/monaco/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/cadany/WebstormProjects/monaco/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nimport { DeferredPromise } from '../../../base/common/async.js';\nimport { CancellationTokenSource } from '../../../base/common/cancellation.js';\nimport { once } from '../../../base/common/functional.js';\nimport { Disposable, DisposableStore, toDisposable } from '../../../base/common/lifecycle.js';\nimport { IInstantiationService } from '../../instantiation/common/instantiation.js';\nimport { DefaultQuickAccessFilterValue, Extensions } from '../common/quickAccess.js';\nimport { IQuickInputService, ItemActivation } from '../common/quickInput.js';\nimport { Registry } from '../../registry/common/platform.js';\nvar QuickAccessController = /*#__PURE__*/function (_Disposable) {\n  _inherits(QuickAccessController, _Disposable);\n  var _super = _createSuper(QuickAccessController);\n  function QuickAccessController(quickInputService, instantiationService) {\n    var _this;\n    _classCallCheck(this, QuickAccessController);\n    _this = _super.call(this);\n    _this.quickInputService = quickInputService;\n    _this.instantiationService = instantiationService;\n    _this.registry = Registry.as(Extensions.Quickaccess);\n    _this.mapProviderToDescriptor = new Map();\n    _this.lastAcceptedPickerValues = new Map();\n    _this.visibleQuickAccess = undefined;\n    return _this;\n  }\n  _createClass(QuickAccessController, [{\n    key: \"show\",\n    value: function show() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var options = arguments.length > 1 ? arguments[1] : undefined;\n      this.doShowOrPick(value, false, options);\n    }\n  }, {\n    key: \"doShowOrPick\",\n    value: function doShowOrPick(value, pick, options) {\n      var _a;\n      // Find provider for the value to show\n      var _this$getOrInstantiat = this.getOrInstantiateProvider(value),\n        _this$getOrInstantiat2 = _slicedToArray(_this$getOrInstantiat, 2),\n        provider = _this$getOrInstantiat2[0],\n        descriptor = _this$getOrInstantiat2[1];\n      // Return early if quick access is already showing on that same prefix\n      var visibleQuickAccess = this.visibleQuickAccess;\n      var visibleDescriptor = visibleQuickAccess === null || visibleQuickAccess === void 0 ? void 0 : visibleQuickAccess.descriptor;\n      if (visibleQuickAccess && descriptor && visibleDescriptor === descriptor) {\n        // Apply value only if it is more specific than the prefix\n        // from the provider and we are not instructed to preserve\n        if (value !== descriptor.prefix && !(options === null || options === void 0 ? void 0 : options.preserveValue)) {\n          visibleQuickAccess.picker.value = value;\n        }\n        // Always adjust selection\n        this.adjustValueSelection(visibleQuickAccess.picker, descriptor, options);\n        return;\n      }\n      // Rewrite the filter value based on certain rules unless disabled\n      if (descriptor && !(options === null || options === void 0 ? void 0 : options.preserveValue)) {\n        var newValue = undefined;\n        // If we have a visible provider with a value, take it's filter value but\n        // rewrite to new provider prefix in case they differ\n        if (visibleQuickAccess && visibleDescriptor && visibleDescriptor !== descriptor) {\n          var newValueCandidateWithoutPrefix = visibleQuickAccess.value.substr(visibleDescriptor.prefix.length);\n          if (newValueCandidateWithoutPrefix) {\n            newValue = \"\".concat(descriptor.prefix).concat(newValueCandidateWithoutPrefix);\n          }\n        }\n        // Otherwise, take a default value as instructed\n        if (!newValue) {\n          var defaultFilterValue = provider === null || provider === void 0 ? void 0 : provider.defaultFilterValue;\n          if (defaultFilterValue === DefaultQuickAccessFilterValue.LAST) {\n            newValue = this.lastAcceptedPickerValues.get(descriptor);\n          } else if (typeof defaultFilterValue === 'string') {\n            newValue = \"\".concat(descriptor.prefix).concat(defaultFilterValue);\n          }\n        }\n        if (typeof newValue === 'string') {\n          value = newValue;\n        }\n      }\n      // Create a picker for the provider to use with the initial value\n      // and adjust the filtering to exclude the prefix from filtering\n      var disposables = new DisposableStore();\n      var picker = disposables.add(this.quickInputService.createQuickPick());\n      picker.value = value;\n      this.adjustValueSelection(picker, descriptor, options);\n      picker.placeholder = descriptor === null || descriptor === void 0 ? void 0 : descriptor.placeholder;\n      picker.quickNavigate = options === null || options === void 0 ? void 0 : options.quickNavigateConfiguration;\n      picker.hideInput = !!picker.quickNavigate && !visibleQuickAccess; // only hide input if there was no picker opened already\n      if (typeof (options === null || options === void 0 ? void 0 : options.itemActivation) === 'number' || (options === null || options === void 0 ? void 0 : options.quickNavigateConfiguration)) {\n        picker.itemActivation = (_a = options === null || options === void 0 ? void 0 : options.itemActivation) !== null && _a !== void 0 ? _a : ItemActivation.SECOND /* quick nav is always second */;\n      }\n\n      picker.contextKey = descriptor === null || descriptor === void 0 ? void 0 : descriptor.contextKey;\n      picker.filterValue = function (value) {\n        return value.substring(descriptor ? descriptor.prefix.length : 0);\n      };\n      if (descriptor === null || descriptor === void 0 ? void 0 : descriptor.placeholder) {\n        picker.ariaLabel = descriptor === null || descriptor === void 0 ? void 0 : descriptor.placeholder;\n      }\n      // Pick mode: setup a promise that can be resolved\n      // with the selected items and prevent execution\n      var pickPromise = undefined;\n      if (pick) {\n        pickPromise = new DeferredPromise();\n        disposables.add(once(picker.onWillAccept)(function (e) {\n          e.veto();\n          picker.hide();\n        }));\n      }\n      // Register listeners\n      disposables.add(this.registerPickerListeners(picker, provider, descriptor, value, options === null || options === void 0 ? void 0 : options.providerOptions));\n      // Ask provider to fill the picker as needed if we have one\n      // and pass over a cancellation token that will indicate when\n      // the picker is hiding without a pick being made.\n      var cts = disposables.add(new CancellationTokenSource());\n      if (provider) {\n        disposables.add(provider.provide(picker, cts.token, options === null || options === void 0 ? void 0 : options.providerOptions));\n      }\n      // Finally, trigger disposal and cancellation when the picker\n      // hides depending on items selected or not.\n      once(picker.onDidHide)(function () {\n        if (picker.selectedItems.length === 0) {\n          cts.cancel();\n        }\n        // Start to dispose once picker hides\n        disposables.dispose();\n        // Resolve pick promise with selected items\n        pickPromise === null || pickPromise === void 0 ? void 0 : pickPromise.complete(picker.selectedItems.slice(0));\n      });\n      // Finally, show the picker. This is important because a provider\n      // may not call this and then our disposables would leak that rely\n      // on the onDidHide event.\n      picker.show();\n      // Pick mode: return with promise\n      if (pick) {\n        return pickPromise === null || pickPromise === void 0 ? void 0 : pickPromise.p;\n      }\n    }\n  }, {\n    key: \"adjustValueSelection\",\n    value: function adjustValueSelection(picker, descriptor, options) {\n      var _a;\n      var valueSelection;\n      // Preserve: just always put the cursor at the end\n      if (options === null || options === void 0 ? void 0 : options.preserveValue) {\n        valueSelection = [picker.value.length, picker.value.length];\n      }\n      // Otherwise: select the value up until the prefix\n      else {\n        valueSelection = [(_a = descriptor === null || descriptor === void 0 ? void 0 : descriptor.prefix.length) !== null && _a !== void 0 ? _a : 0, picker.value.length];\n      }\n      picker.valueSelection = valueSelection;\n    }\n  }, {\n    key: \"registerPickerListeners\",\n    value: function registerPickerListeners(picker, provider, descriptor, value, providerOptions) {\n      var _this2 = this;\n      var disposables = new DisposableStore();\n      // Remember as last visible picker and clean up once picker get's disposed\n      var visibleQuickAccess = this.visibleQuickAccess = {\n        picker: picker,\n        descriptor: descriptor,\n        value: value\n      };\n      disposables.add(toDisposable(function () {\n        if (visibleQuickAccess === _this2.visibleQuickAccess) {\n          _this2.visibleQuickAccess = undefined;\n        }\n      }));\n      // Whenever the value changes, check if the provider has\n      // changed and if so - re-create the picker from the beginning\n      disposables.add(picker.onDidChangeValue(function (value) {\n        var _this2$getOrInstantia = _this2.getOrInstantiateProvider(value),\n          _this2$getOrInstantia2 = _slicedToArray(_this2$getOrInstantia, 1),\n          providerForValue = _this2$getOrInstantia2[0];\n        if (providerForValue !== provider) {\n          _this2.show(value, {\n            // do not rewrite value from user typing!\n            preserveValue: true,\n            // persist the value of the providerOptions from the original showing\n            providerOptions: providerOptions\n          });\n        } else {\n          visibleQuickAccess.value = value; // remember the value in our visible one\n        }\n      }));\n      // Remember picker input for future use when accepting\n      if (descriptor) {\n        disposables.add(picker.onDidAccept(function () {\n          _this2.lastAcceptedPickerValues.set(descriptor, picker.value);\n        }));\n      }\n      return disposables;\n    }\n  }, {\n    key: \"getOrInstantiateProvider\",\n    value: function getOrInstantiateProvider(value) {\n      var providerDescriptor = this.registry.getQuickAccessProvider(value);\n      if (!providerDescriptor) {\n        return [undefined, undefined];\n      }\n      var provider = this.mapProviderToDescriptor.get(providerDescriptor);\n      if (!provider) {\n        provider = this.instantiationService.createInstance(providerDescriptor.ctor);\n        this.mapProviderToDescriptor.set(providerDescriptor, provider);\n      }\n      return [provider, providerDescriptor];\n    }\n  }]);\n  return QuickAccessController;\n}(Disposable);\nQuickAccessController = __decorate([__param(0, IQuickInputService), __param(1, IInstantiationService)], QuickAccessController);\nexport { QuickAccessController };","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","DeferredPromise","CancellationTokenSource","once","Disposable","DisposableStore","toDisposable","IInstantiationService","DefaultQuickAccessFilterValue","Extensions","IQuickInputService","ItemActivation","Registry","QuickAccessController","_Disposable","_inherits","_super","_createSuper","quickInputService","instantiationService","_this","_classCallCheck","call","registry","as","Quickaccess","mapProviderToDescriptor","Map","lastAcceptedPickerValues","visibleQuickAccess","undefined","_createClass","value","show","options","doShowOrPick","pick","_a","_this$getOrInstantiat","getOrInstantiateProvider","_this$getOrInstantiat2","_slicedToArray","provider","descriptor","visibleDescriptor","prefix","preserveValue","picker","adjustValueSelection","newValue","newValueCandidateWithoutPrefix","substr","concat","defaultFilterValue","LAST","get","disposables","add","createQuickPick","placeholder","quickNavigate","quickNavigateConfiguration","hideInput","itemActivation","SECOND","contextKey","filterValue","substring","ariaLabel","pickPromise","onWillAccept","e","veto","hide","registerPickerListeners","providerOptions","cts","provide","token","onDidHide","selectedItems","cancel","dispose","complete","slice","p","valueSelection","_this2","onDidChangeValue","_this2$getOrInstantia","_this2$getOrInstantia2","providerForValue","onDidAccept","set","providerDescriptor","getQuickAccessProvider","createInstance","ctor"],"sources":["/Users/cadany/WebstormProjects/monaco/node_modules/monaco-editor/esm/vs/platform/quickinput/browser/quickAccess.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { DeferredPromise } from '../../../base/common/async.js';\nimport { CancellationTokenSource } from '../../../base/common/cancellation.js';\nimport { once } from '../../../base/common/functional.js';\nimport { Disposable, DisposableStore, toDisposable } from '../../../base/common/lifecycle.js';\nimport { IInstantiationService } from '../../instantiation/common/instantiation.js';\nimport { DefaultQuickAccessFilterValue, Extensions } from '../common/quickAccess.js';\nimport { IQuickInputService, ItemActivation } from '../common/quickInput.js';\nimport { Registry } from '../../registry/common/platform.js';\nlet QuickAccessController = class QuickAccessController extends Disposable {\n    constructor(quickInputService, instantiationService) {\n        super();\n        this.quickInputService = quickInputService;\n        this.instantiationService = instantiationService;\n        this.registry = Registry.as(Extensions.Quickaccess);\n        this.mapProviderToDescriptor = new Map();\n        this.lastAcceptedPickerValues = new Map();\n        this.visibleQuickAccess = undefined;\n    }\n    show(value = '', options) {\n        this.doShowOrPick(value, false, options);\n    }\n    doShowOrPick(value, pick, options) {\n        var _a;\n        // Find provider for the value to show\n        const [provider, descriptor] = this.getOrInstantiateProvider(value);\n        // Return early if quick access is already showing on that same prefix\n        const visibleQuickAccess = this.visibleQuickAccess;\n        const visibleDescriptor = visibleQuickAccess === null || visibleQuickAccess === void 0 ? void 0 : visibleQuickAccess.descriptor;\n        if (visibleQuickAccess && descriptor && visibleDescriptor === descriptor) {\n            // Apply value only if it is more specific than the prefix\n            // from the provider and we are not instructed to preserve\n            if (value !== descriptor.prefix && !(options === null || options === void 0 ? void 0 : options.preserveValue)) {\n                visibleQuickAccess.picker.value = value;\n            }\n            // Always adjust selection\n            this.adjustValueSelection(visibleQuickAccess.picker, descriptor, options);\n            return;\n        }\n        // Rewrite the filter value based on certain rules unless disabled\n        if (descriptor && !(options === null || options === void 0 ? void 0 : options.preserveValue)) {\n            let newValue = undefined;\n            // If we have a visible provider with a value, take it's filter value but\n            // rewrite to new provider prefix in case they differ\n            if (visibleQuickAccess && visibleDescriptor && visibleDescriptor !== descriptor) {\n                const newValueCandidateWithoutPrefix = visibleQuickAccess.value.substr(visibleDescriptor.prefix.length);\n                if (newValueCandidateWithoutPrefix) {\n                    newValue = `${descriptor.prefix}${newValueCandidateWithoutPrefix}`;\n                }\n            }\n            // Otherwise, take a default value as instructed\n            if (!newValue) {\n                const defaultFilterValue = provider === null || provider === void 0 ? void 0 : provider.defaultFilterValue;\n                if (defaultFilterValue === DefaultQuickAccessFilterValue.LAST) {\n                    newValue = this.lastAcceptedPickerValues.get(descriptor);\n                }\n                else if (typeof defaultFilterValue === 'string') {\n                    newValue = `${descriptor.prefix}${defaultFilterValue}`;\n                }\n            }\n            if (typeof newValue === 'string') {\n                value = newValue;\n            }\n        }\n        // Create a picker for the provider to use with the initial value\n        // and adjust the filtering to exclude the prefix from filtering\n        const disposables = new DisposableStore();\n        const picker = disposables.add(this.quickInputService.createQuickPick());\n        picker.value = value;\n        this.adjustValueSelection(picker, descriptor, options);\n        picker.placeholder = descriptor === null || descriptor === void 0 ? void 0 : descriptor.placeholder;\n        picker.quickNavigate = options === null || options === void 0 ? void 0 : options.quickNavigateConfiguration;\n        picker.hideInput = !!picker.quickNavigate && !visibleQuickAccess; // only hide input if there was no picker opened already\n        if (typeof (options === null || options === void 0 ? void 0 : options.itemActivation) === 'number' || (options === null || options === void 0 ? void 0 : options.quickNavigateConfiguration)) {\n            picker.itemActivation = (_a = options === null || options === void 0 ? void 0 : options.itemActivation) !== null && _a !== void 0 ? _a : ItemActivation.SECOND /* quick nav is always second */;\n        }\n        picker.contextKey = descriptor === null || descriptor === void 0 ? void 0 : descriptor.contextKey;\n        picker.filterValue = (value) => value.substring(descriptor ? descriptor.prefix.length : 0);\n        if (descriptor === null || descriptor === void 0 ? void 0 : descriptor.placeholder) {\n            picker.ariaLabel = descriptor === null || descriptor === void 0 ? void 0 : descriptor.placeholder;\n        }\n        // Pick mode: setup a promise that can be resolved\n        // with the selected items and prevent execution\n        let pickPromise = undefined;\n        if (pick) {\n            pickPromise = new DeferredPromise();\n            disposables.add(once(picker.onWillAccept)(e => {\n                e.veto();\n                picker.hide();\n            }));\n        }\n        // Register listeners\n        disposables.add(this.registerPickerListeners(picker, provider, descriptor, value, options === null || options === void 0 ? void 0 : options.providerOptions));\n        // Ask provider to fill the picker as needed if we have one\n        // and pass over a cancellation token that will indicate when\n        // the picker is hiding without a pick being made.\n        const cts = disposables.add(new CancellationTokenSource());\n        if (provider) {\n            disposables.add(provider.provide(picker, cts.token, options === null || options === void 0 ? void 0 : options.providerOptions));\n        }\n        // Finally, trigger disposal and cancellation when the picker\n        // hides depending on items selected or not.\n        once(picker.onDidHide)(() => {\n            if (picker.selectedItems.length === 0) {\n                cts.cancel();\n            }\n            // Start to dispose once picker hides\n            disposables.dispose();\n            // Resolve pick promise with selected items\n            pickPromise === null || pickPromise === void 0 ? void 0 : pickPromise.complete(picker.selectedItems.slice(0));\n        });\n        // Finally, show the picker. This is important because a provider\n        // may not call this and then our disposables would leak that rely\n        // on the onDidHide event.\n        picker.show();\n        // Pick mode: return with promise\n        if (pick) {\n            return pickPromise === null || pickPromise === void 0 ? void 0 : pickPromise.p;\n        }\n    }\n    adjustValueSelection(picker, descriptor, options) {\n        var _a;\n        let valueSelection;\n        // Preserve: just always put the cursor at the end\n        if (options === null || options === void 0 ? void 0 : options.preserveValue) {\n            valueSelection = [picker.value.length, picker.value.length];\n        }\n        // Otherwise: select the value up until the prefix\n        else {\n            valueSelection = [(_a = descriptor === null || descriptor === void 0 ? void 0 : descriptor.prefix.length) !== null && _a !== void 0 ? _a : 0, picker.value.length];\n        }\n        picker.valueSelection = valueSelection;\n    }\n    registerPickerListeners(picker, provider, descriptor, value, providerOptions) {\n        const disposables = new DisposableStore();\n        // Remember as last visible picker and clean up once picker get's disposed\n        const visibleQuickAccess = this.visibleQuickAccess = { picker, descriptor, value };\n        disposables.add(toDisposable(() => {\n            if (visibleQuickAccess === this.visibleQuickAccess) {\n                this.visibleQuickAccess = undefined;\n            }\n        }));\n        // Whenever the value changes, check if the provider has\n        // changed and if so - re-create the picker from the beginning\n        disposables.add(picker.onDidChangeValue(value => {\n            const [providerForValue] = this.getOrInstantiateProvider(value);\n            if (providerForValue !== provider) {\n                this.show(value, {\n                    // do not rewrite value from user typing!\n                    preserveValue: true,\n                    // persist the value of the providerOptions from the original showing\n                    providerOptions\n                });\n            }\n            else {\n                visibleQuickAccess.value = value; // remember the value in our visible one\n            }\n        }));\n        // Remember picker input for future use when accepting\n        if (descriptor) {\n            disposables.add(picker.onDidAccept(() => {\n                this.lastAcceptedPickerValues.set(descriptor, picker.value);\n            }));\n        }\n        return disposables;\n    }\n    getOrInstantiateProvider(value) {\n        const providerDescriptor = this.registry.getQuickAccessProvider(value);\n        if (!providerDescriptor) {\n            return [undefined, undefined];\n        }\n        let provider = this.mapProviderToDescriptor.get(providerDescriptor);\n        if (!provider) {\n            provider = this.instantiationService.createInstance(providerDescriptor.ctor);\n            this.mapProviderToDescriptor.set(providerDescriptor, provider);\n        }\n        return [provider, providerDescriptor];\n    }\n};\nQuickAccessController = __decorate([\n    __param(0, IQuickInputService),\n    __param(1, IInstantiationService)\n], QuickAccessController);\nexport { QuickAccessController };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}